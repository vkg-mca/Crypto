//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Binance.Spot
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IClient
    {
        /// <summary>
        /// Test Connectivity
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PingAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test Connectivity
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PingAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check Server Time
        /// </summary>
        /// <returns>Binance server UTC timestamp</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> TimeAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check Server Time
        /// </summary>
        /// <returns>Binance server UTC timestamp</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> TimeAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Exchange Information
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Current exchange trading rules and symbol information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> ExchangeInfoAsync(string symbol, string symbols, string permissions);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Exchange Information
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Current exchange trading rules and symbol information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> ExchangeInfoAsync(string symbol, string symbols, string permissions, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Order Book
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">If limit &gt; 5000, then the response will truncate to 5000</param>
        /// <returns>Order book</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> DepthAsync(string symbol, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Order Book
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">If limit &gt; 5000, then the response will truncate to 5000</param>
        /// <returns>Order book</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> DepthAsync(string symbol, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Recent Trades List
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Trade>> TradesAsync(string symbol, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recent Trades List
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Trade>> TradesAsync(string symbol, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Old Trade Lookup (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Trade>> HistoricalTradesAsync(string symbol, int? limit, long? fromId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Old Trade Lookup (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Trade>> HistoricalTradesAsync(string symbol, int? limit, long? fromId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Compressed/Aggregate Trades List
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AggTrade>> AggTradesAsync(string symbol, long? fromId, long? startTime, long? endTime, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Compressed/Aggregate Trades List
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AggTrade>> AggTradesAsync(string symbol, long? fromId, long? startTime, long? endTime, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Kline/Candlestick Data
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="interval">kline intervals</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Kline data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>> KlinesAsync(string symbol, Interval interval, long? startTime, long? endTime, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Kline/Candlestick Data
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="interval">kline intervals</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Kline data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>> KlinesAsync(string symbol, Interval interval, long? startTime, long? endTime, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// UIKlines
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="interval">kline intervals</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>UIKline data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>> UiKlinesAsync(string symbol, Interval2 interval, long? startTime, long? endTime, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// UIKlines
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="interval">kline intervals</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>UIKline data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>> UiKlinesAsync(string symbol, Interval2 interval, long? startTime, long? endTime, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Current Average Price
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Average price</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AvgPriceAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Current Average Price
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Average price</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> AvgPriceAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// 24hr Ticker Price Change Statistics
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Supported values: FULL or MINI.
        /// <br/>If none provided, the default is FULL</param>
        /// <returns>24hr ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Ticker> Hr24Async(string symbol, string symbols, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 24hr Ticker Price Change Statistics
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Supported values: FULL or MINI.
        /// <br/>If none provided, the default is FULL</param>
        /// <returns>24hr ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Ticker> Hr24Async(string symbol, string symbols, string type, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Symbol Price Ticker
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Price ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PriceTicker> PriceAsync(string symbol, string symbols);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Symbol Price Ticker
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Price ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PriceTicker> PriceAsync(string symbol, string symbols, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Symbol Order Book Ticker
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Order book ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BookTicker> BookTickerAsync(string symbol, string symbols);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Symbol Order Book Ticker
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Order book ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BookTicker> BookTickerAsync(string symbol, string symbols, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Rolling window price change statistics
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="windowSize">Defaults to 1d if no parameter provided.
        /// <br/>Supported windowSize values:
        /// <br/>1m,2m....59m for minutes
        /// <br/>1h, 2h....23h - for hours
        /// <br/>1d...7d - for days.
        /// <br/>
        /// <br/>Units cannot be combined (e.g. 1d2h is not allowed)</param>
        /// <param name="type">Supported values: FULL or MINI.
        /// <br/>If none provided, the default is FULL</param>
        /// <returns>Rolling price ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> TickerAsync(string symbol, string symbols, string windowSize, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rolling window price change statistics
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="windowSize">Defaults to 1d if no parameter provided.
        /// <br/>Supported windowSize values:
        /// <br/>1m,2m....59m for minutes
        /// <br/>1h, 2h....23h - for hours
        /// <br/>1d...7d - for days.
        /// <br/>
        /// <br/>Units cannot be combined (e.g. 1d2h is not allowed)</param>
        /// <param name="type">Supported values: FULL or MINI.
        /// <br/>If none provided, the default is FULL</param>
        /// <returns>Rolling price ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> TickerAsync(string symbol, string symbols, string windowSize, string type, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Test New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> TestAsync(string symbol, Side side, Type type, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> TestAsync(string symbol, Side side, Type type, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Order (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderDetails> OrderGETAsync(string symbol, long? orderId, string origClientOrderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Order (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderDetails> OrderGETAsync(string symbol, long? orderId, string origClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order result</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResponseAck> OrderPOSTAsync(string symbol, Side side, Type type, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order result</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrderResponseAck> OrderPOSTAsync(string symbol, Side side, Type type, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Order> OrderDELETEAsync(string symbol, long? orderId, string origClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Order> OrderDELETEAsync(string symbol, long? orderId, string origClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel an Existing Order and Send a New Order (Trade)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="cancelReplaceMode">- `STOP_ON_FAILURE` If the cancel request fails, the new order placement will not be attempted.
        /// <br/>- `ALLOW_FAILURES` If new order placement will be attempted even if cancel request fails.</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="cancelNewClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="cancelOrigClientOrderId">Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.</param>
        /// <param name="cancelOrderId">Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> CancelReplaceAsync(string symbol, Side side, Type type, string cancelReplaceMode, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string cancelNewClientOrderId, string cancelOrigClientOrderId, long? cancelOrderId, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel an Existing Order and Send a New Order (Trade)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="cancelReplaceMode">- `STOP_ON_FAILURE` If the cancel request fails, the new order placement will not be attempted.
        /// <br/>- `ALLOW_FAILURES` If new order placement will be attempted even if cancel request fails.</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="cancelNewClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="cancelOrigClientOrderId">Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.</param>
        /// <param name="cancelOrderId">Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> CancelReplaceAsync(string symbol, Side side, Type type, string cancelReplaceMode, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string cancelNewClientOrderId, string cancelOrigClientOrderId, long? cancelOrderId, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Current Open Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Current open orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderDetails>> OpenOrdersAllGETAsync(string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Current Open Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Current open orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderDetails>> OpenOrdersAllGETAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel all Open Orders on a Symbol (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> OpenOrdersAllDELETEAsync(string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel all Open Orders on a Symbol (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> OpenOrdersAllDELETEAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// All Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Current open orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderDetails>> AllOrdersAsync(string symbol, long? orderId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// All Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Current open orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderDetails>> AllOrdersAsync(string symbol, long? orderId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// New OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="limitClientOrderId">A unique Id for the limit order</param>
        /// <param name="limitStrategyType">The value cannot be less than 1000000.</param>
        /// <param name="price">Order price</param>
        /// <param name="stopClientOrderId">A unique Id for the stop loss/stop loss limit leg</param>
        /// <param name="stopLimitPrice">If provided, stopLimitTimeInForce is required.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>New OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> OcoAsync(string symbol, string listClientOrderId, Side side, double quantity, string limitClientOrderId, long? limitStrategyId, long? limitStrategyType, double price, double? limitIcebergQty, double? trailingDelta, string stopClientOrderId, double stopPrice, long? stopStrategyId, long? stopStrategyType, double? stopLimitPrice, double? stopIcebergQty, StopLimitTimeInForce? stopLimitTimeInForce, NewOrderRespType2? newOrderRespType, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// New OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="limitClientOrderId">A unique Id for the limit order</param>
        /// <param name="limitStrategyType">The value cannot be less than 1000000.</param>
        /// <param name="price">Order price</param>
        /// <param name="stopClientOrderId">A unique Id for the stop loss/stop loss limit leg</param>
        /// <param name="stopLimitPrice">If provided, stopLimitTimeInForce is required.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>New OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> OcoAsync(string symbol, string listClientOrderId, Side side, double quantity, string limitClientOrderId, long? limitStrategyId, long? limitStrategyType, double price, double? limitIcebergQty, double? trailingDelta, string stopClientOrderId, double stopPrice, long? stopStrategyId, long? stopStrategyType, double? stopLimitPrice, double? stopIcebergQty, StopLimitTimeInForce? stopLimitTimeInForce, NewOrderRespType2? newOrderRespType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query OCO (USER_DATA)
        /// </summary>
        /// <param name="orderListId">Order list id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> OrderListGETAsync(long? orderListId, string origClientOrderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query OCO (USER_DATA)
        /// </summary>
        /// <param name="orderListId">Order list id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> OrderListGETAsync(long? orderListId, string origClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Report on deleted OCO</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OcoOrder> OrderListDELETEAsync(string symbol, long? orderListId, string listClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Report on deleted OCO</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OcoOrder> OrderListDELETEAsync(string symbol, long? orderListId, string listClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query all OCO (USER_DATA)
        /// </summary>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> AllOrderListAsync(long? fromId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query all OCO (USER_DATA)
        /// </summary>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> AllOrderListAsync(long? fromId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Open OCO (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous3>> OpenOrderListAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Open OCO (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous3>> OpenOrderListAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Account Information (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Account> AccountGETAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account Information (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Account> AccountGETAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Account Trade List (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">This can only be used in combination with symbol.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of trades</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MyTrade>> MyTradesAsync(string symbol, long? orderId, long? startTime, long? endTime, long? fromId, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account Trade List (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">This can only be used in combination with symbol.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of trades</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MyTrade>> MyTradesAsync(string symbol, long? orderId, long? startTime, long? endTime, long? fromId, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Current Order Count Usage (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order rate limits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous4>> OrderAllAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Current Order Count Usage (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order rate limits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous4>> OrderAllAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cross Margin Account Transfer (MARGIN)
        /// </summary>
        /// <param name="type">* `1` - transfer from main account to margin account
        /// <br/>* `2` - transfer from margin account to main account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transaction> TransferPOSTAsync(string asset, double amount, Type2 type, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross Margin Account Transfer (MARGIN)
        /// </summary>
        /// <param name="type">* `1` - transfer from main account to margin account
        /// <br/>* `2` - transfer from margin account to main account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transaction> TransferPOSTAsync(string asset, double amount, Type2 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Cross Margin Transfer History (USER_DATA)
        /// </summary>
        /// <param name="type">Transfer Type</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin account transfer history, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> TransferGETAsync(string asset, Type3? type, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Cross Margin Transfer History (USER_DATA)
        /// </summary>
        /// <param name="type">Transfer Type</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin account transfer history, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> TransferGETAsync(string asset, Type3? type, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Account Borrow (MARGIN)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transaction> LoanPOSTAsync(string asset, IsIsolated? isIsolated, string symbol, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Borrow (MARGIN)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transaction> LoanPOSTAsync(string asset, IsIsolated? isIsolated, string symbol, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Loan Record (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="txId">the tranId in  `POST /sapi/v1/margin/loan`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> LoanGETAsync(string asset, string isolatedSymbol, long? txId, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Loan Record (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="txId">the tranId in  `POST /sapi/v1/margin/loan`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> LoanGETAsync(string asset, string isolatedSymbol, long? txId, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Account Repay (MARGIN)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transaction> RepayPOSTAsync(string asset, IsIsolated? isIsolated, string symbol, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Repay (MARGIN)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transaction> RepayPOSTAsync(string asset, IsIsolated? isIsolated, string symbol, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Repay Record (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="txId">the tranId in  `POST /sapi/v1/margin/repay`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Load records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> RepayGETAsync(string asset, string isolatedSymbol, long? txId, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Repay Record (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="txId">the tranId in  `POST /sapi/v1/margin/repay`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Load records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> RepayGETAsync(string asset, string isolatedSymbol, long? txId, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin Asset (MARKET_DATA)
        /// </summary>
        /// <returns>Asset details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> AssetAsync(string asset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Asset (MARKET_DATA)
        /// </summary>
        /// <returns>Asset details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> AssetAsync(string asset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Cross Margin Pair (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Margin pair details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response13> PairAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Cross Margin Pair (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Margin pair details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response13> PairAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get All Margin Assets (MARKET_DATA)
        /// </summary>
        /// <returns>Assets details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous5>> AllAssetsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Margin Assets (MARKET_DATA)
        /// </summary>
        /// <returns>Assets details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous5>> AllAssetsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get All Cross Margin Pairs (MARKET_DATA)
        /// </summary>
        /// <returns>Margin pairs</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> AllPairsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Cross Margin Pairs (MARKET_DATA)
        /// </summary>
        /// <returns>Margin pairs</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> AllPairsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin PriceIndex (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Price index</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response14> PriceIndexAsync(string symbol);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin PriceIndex (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Price index</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response14> PriceIndexAsync(string symbol, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin Account's Order (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Interest History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginOrderDetail> OrderGET2Async(string symbol, IsIsolated? isIsolated, long? orderId, string origClientOrderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's Order (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Interest History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginOrderDetail> OrderGET2Async(string symbol, IsIsolated? isIsolated, long? orderId, string origClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Account New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="type">Order type</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="sideEffectType">Default `NO_SIDE_EFFECT`</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin order info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginOrderResponseAck> OrderPOST2Async(string symbol, IsIsolated? isIsolated, Side side, Type type, double quantity, double? quoteOrderQty, double? price, double? stopPrice, string newClientOrderId, double? icebergQty, NewOrderRespType2? newOrderRespType, SideEffectType? sideEffectType, TimeInForce? timeInForce, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="type">Order type</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="sideEffectType">Default `NO_SIDE_EFFECT`</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin order info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginOrderResponseAck> OrderPOST2Async(string symbol, IsIsolated? isIsolated, Side side, Type type, double quantity, double? quoteOrderQty, double? price, double? stopPrice, string newClientOrderId, double? icebergQty, NewOrderRespType2? newOrderRespType, SideEffectType? sideEffectType, TimeInForce? timeInForce, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Account Cancel Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled margin order details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginOrder> OrderDELETE2Async(string symbol, IsIsolated? isIsolated, long? orderId, string origClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Cancel Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled margin order details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginOrder> OrderDELETE2Async(string symbol, IsIsolated? isIsolated, long? orderId, string origClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Interest History (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Interest History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response15> InterestHistoryAsync(string asset, string isolatedSymbol, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Interest History (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Interest History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response15> InterestHistoryAsync(string asset, string isolatedSymbol, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Force Liquidation Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Force Liquidation History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response16> ForceLiquidationRecAsync(long? startTime, long? endTime, string isolatedSymbol, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Force Liquidation Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Force Liquidation History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response16> ForceLiquidationRecAsync(long? startTime, long? endTime, string isolatedSymbol, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Cross Margin Account Details (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response17> AccountGET2Async(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Cross Margin Account Details (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response17> AccountGET2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin Account's Open Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin open orders list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginOrderDetail>> OpenOrdersAllGET2Async(string symbol, IsIsolated? isIsolated, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's Open Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin open orders list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginOrderDetail>> OpenOrdersAllGET2Async(string symbol, IsIsolated? isIsolated, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Account Cancel all Open Orders on a Symbol (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled margin orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> OpenOrdersAllDELETE2Async(string symbol, IsIsolated? isIsolated, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Cancel all Open Orders on a Symbol (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled margin orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> OpenOrdersAllDELETE2Async(string symbol, IsIsolated? isIsolated, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin Account's All Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin order list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginOrderDetail>> AllOrders2Async(string symbol, IsIsolated? isIsolated, long? orderId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's All Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin order list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginOrderDetail>> AllOrders2Async(string symbol, IsIsolated? isIsolated, long? orderId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Account New OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="limitClientOrderId">A unique Id for the limit order</param>
        /// <param name="price">Order price</param>
        /// <param name="stopClientOrderId">A unique Id for the stop loss/stop loss limit leg</param>
        /// <param name="stopLimitPrice">If provided, stopLimitTimeInForce is required.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="sideEffectType">Default `NO_SIDE_EFFECT`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>New Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response18> Oco2Async(string symbol, IsIsolated? isIsolated, string listClientOrderId, Side side, double quantity, string limitClientOrderId, double price, double? limitIcebergQty, string stopClientOrderId, double stopPrice, double? stopLimitPrice, double? stopIcebergQty, StopLimitTimeInForce? stopLimitTimeInForce, NewOrderRespType2? newOrderRespType, SideEffectType? sideEffectType, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account New OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="limitClientOrderId">A unique Id for the limit order</param>
        /// <param name="price">Order price</param>
        /// <param name="stopClientOrderId">A unique Id for the stop loss/stop loss limit leg</param>
        /// <param name="stopLimitPrice">If provided, stopLimitTimeInForce is required.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="sideEffectType">Default `NO_SIDE_EFFECT`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>New Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response18> Oco2Async(string symbol, IsIsolated? isIsolated, string listClientOrderId, Side side, double quantity, string limitClientOrderId, double price, double? limitIcebergQty, string stopClientOrderId, double stopPrice, double? stopLimitPrice, double? stopIcebergQty, StopLimitTimeInForce? stopLimitTimeInForce, NewOrderRespType2? newOrderRespType, SideEffectType? sideEffectType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin Account's OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response19> OrderListGET2Async(IsIsolated? isIsolated, string symbol, long? orderListId, string origClientOrderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response19> OrderListGET2Async(IsIsolated? isIsolated, string symbol, long? orderListId, string origClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Account Cancel OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginOcoOrder> OrderListDELETE2Async(string symbol, IsIsolated? isIsolated, long? orderListId, string listClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Cancel OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginOcoOrder> OrderListDELETE2Async(string symbol, IsIsolated? isIsolated, long? orderListId, string listClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin Account's all OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="fromId">If supplied, neither `startTime` or `endTime` can be provided</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default Value: 500; Max Value: 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of Margin OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> AllOrderList2Async(IsIsolated? isIsolated, string symbol, string fromId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's all OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="fromId">If supplied, neither `startTime` or `endTime` can be provided</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default Value: 500; Max Value: 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of Margin OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> AllOrderList2Async(IsIsolated? isIsolated, string symbol, string fromId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin Account's Open OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of Open Margin OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous9>> OpenOrderList2Async(IsIsolated? isIsolated, string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's Open OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of Open Margin OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous9>> OpenOrderList2Async(IsIsolated? isIsolated, string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Margin Account's Trade List (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of margin trades</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginTrade>> MyTrades2Async(string symbol, IsIsolated? isIsolated, long? startTime, long? endTime, long? fromId, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's Trade List (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of margin trades</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginTrade>> MyTrades2Async(string symbol, IsIsolated? isIsolated, long? startTime, long? endTime, long? fromId, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Max Borrow (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Details on max borrow amount</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response20> MaxBorrowableAsync(string asset, string isolatedSymbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Max Borrow (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Details on max borrow amount</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response20> MaxBorrowableAsync(string asset, string isolatedSymbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Max Transfer-Out Amount (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Details on max transferable amount</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response21> MaxTransferableAsync(string asset, string isolatedSymbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Max Transfer-Out Amount (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Details on max transferable amount</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response21> MaxTransferableAsync(string asset, string isolatedSymbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Summary of Margin account (USER_DATA)
        /// </summary>
        /// <param name="email">Email Address</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Summary of Margin Account</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response22> TradeCoeffAsync(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Summary of Margin account (USER_DATA)
        /// </summary>
        /// <param name="email">Email Address</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Summary of Margin Account</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response22> TradeCoeffAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Isolated Margin Transfer History (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginTransferDetails> TransferGET2Async(string asset, string symbol, TransFrom? transFrom, TransTo? transTo, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Isolated Margin Transfer History (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarginTransferDetails> TransferGET2Async(string asset, string symbol, TransFrom? transFrom, TransTo? transTo, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Isolated Margin Account Transfer (MARGIN)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> TransferPOST2Async(string asset, string symbol, TransFrom2 transFrom, TransTo2 transTo, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Isolated Margin Account Transfer (MARGIN)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> TransferPOST2Async(string asset, string symbol, TransFrom2 transFrom, TransTo2 transTo, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Isolated Margin Account Info (USER_DATA)
        /// </summary>
        /// <param name="symbols">Max 5 symbols can be sent; separated by ','</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account Info when "symbols" is not sent</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsolatedMarginAccountInfo> AccountGET3Async(string symbols, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Isolated Margin Account Info (USER_DATA)
        /// </summary>
        /// <param name="symbols">Max 5 symbols can be sent; separated by ','</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account Info when "symbols" is not sent</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IsolatedMarginAccountInfo> AccountGET3Async(string symbols, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Disable Isolated Margin Account (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response23> AccountDELETEAsync(string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable Isolated Margin Account (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response23> AccountDELETEAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable Isolated Margin Account (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response24> AccountPOSTAsync(string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Isolated Margin Account (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response24> AccountPOSTAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Enabled Isolated Margin Account Limit (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Number of enabled Isolated Margin Account and its limit</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response25> AccountLimitAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Enabled Isolated Margin Account Limit (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Number of enabled Isolated Margin Account and its limit</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response25> AccountLimitAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Isolated Margin Symbol (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Symbol</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response26> Pair2Async(string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Isolated Margin Symbol (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Symbol</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response26> Pair2Async(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get All Isolated Margin Symbol(USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>All Isolated Margin Symbols</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous10>> AllPairs2Async(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Isolated Margin Symbol(USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>All Isolated Margin Symbols</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous10>> AllPairs2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
        /// </summary>
        /// <param name="spotBNBBurn">Determines whether to use BNB to pay for trading fees on SPOT</param>
        /// <param name="interestBNBBurn">Determines whether to use BNB to pay for margin loan's interest</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on BNB to pay for trading fees</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BnbBurnStatus> BnbBurnPOSTAsync(SpotBNBBurn? spotBNBBurn, InterestBNBBurn? interestBNBBurn, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
        /// </summary>
        /// <param name="spotBNBBurn">Determines whether to use BNB to pay for trading fees on SPOT</param>
        /// <param name="interestBNBBurn">Determines whether to use BNB to pay for margin loan's interest</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on BNB to pay for trading fees</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BnbBurnStatus> BnbBurnPOSTAsync(SpotBNBBurn? spotBNBBurn, InterestBNBBurn? interestBNBBurn, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get All Isolated Margin Symbol(USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on BNB to pay for trading fees</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BnbBurnStatus> BnbBurnGETAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Isolated Margin Symbol(USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on BNB to pay for trading fees</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BnbBurnStatus> BnbBurnGETAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Interest Rate History (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin Interest Rate History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> InterestRateHistoryAsync(string asset, int? vipLevel, long? startTime, long? endTime, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Interest Rate History (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin Interest Rate History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> InterestRateHistoryAsync(string asset, int? vipLevel, long? startTime, long? endTime, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Cross Margin Fee Data (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross Margin Fee Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> CrossMarginDataAsync(int? vipLevel, string coin, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Cross Margin Fee Data (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross Margin Fee Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> CrossMarginDataAsync(int? vipLevel, string coin, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Isolated Margin Fee Data (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Fee Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous13>> IsolatedMarginDataAsync(int? vipLevel, string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Isolated Margin Fee Data (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Fee Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous13>> IsolatedMarginDataAsync(int? vipLevel, string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Isolated Margin Tier Data (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="tier">All margin tier data will be returned if tier is omitted</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Tier Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous14>> IsolatedMarginTierAsync(string symbol, string tier, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Isolated Margin Tier Data (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="tier">All margin tier data will be returned if tier is omitted</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Tier Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous14>> IsolatedMarginTierAsync(string symbol, string tier, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Current Margin Order Count Usage (TRADE)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">isolated symbol, mandatory for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Usage.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous15>> OrderAll2Async(string isIsolated, string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Current Margin Order Count Usage (TRADE)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">isolated symbol, mandatory for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Usage.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous15>> OrderAll2Async(string isIsolated, string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Dustlog (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust Log</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response27> DribbletAsync(long? startTime, long? endTime, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Dustlog (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust Log</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response27> DribbletAsync(long? startTime, long? endTime, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// System Status (System)
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> StatusAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// System Status (System)
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> StatusAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// All Coins' Information (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>All coins details information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous16>> GetallAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// All Coins' Information (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>All coins details information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous16>> GetallAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Daily Account Snapshot (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account Snapshot</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotSpot> AccountSnapshotAsync(Type4 type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Daily Account Snapshot (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account Snapshot</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotSpot> AccountSnapshotAsync(Type4 type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Disable Fast Withdraw Switch (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DisableFastWithdrawSwitchAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable Fast Withdraw Switch (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DisableFastWithdrawSwitchAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable Fast Withdraw Switch (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> EnableFastWithdrawSwitchAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Fast Withdraw Switch (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> EnableFastWithdrawSwitchAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Withdraw (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="withdrawOrderId">Client id for withdraw</param>
        /// <param name="network">Get the value from `GET /sapi/v1/capital/config/getall`</param>
        /// <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
        /// <param name="transactionFeeFlag">When making internal transfer
        /// <br/>- `true` -&gt;  returning the fee to the destination account;
        /// <br/>- `false` -&gt; returning the fee back to the departure account.</param>
        /// <param name="walletType">The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transafer Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response29> ApplyAsync(string coin, string withdrawOrderId, string network, string address, string addressTag, double amount, bool? transactionFeeFlag, string name, int? walletType, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Withdraw (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="withdrawOrderId">Client id for withdraw</param>
        /// <param name="network">Get the value from `GET /sapi/v1/capital/config/getall`</param>
        /// <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
        /// <param name="transactionFeeFlag">When making internal transfer
        /// <br/>- `true` -&gt;  returning the fee to the destination account;
        /// <br/>- `false` -&gt; returning the fee back to the departure account.</param>
        /// <param name="walletType">The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transafer Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response29> ApplyAsync(string coin, string withdrawOrderId, string network, string address, string addressTag, double amount, bool? transactionFeeFlag, string name, int? walletType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deposit History（supporting network） (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="status">* `0` - pending
        /// <br/>* `6` - credited but cannot withdraw
        /// <br/>* `1` - success</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of deposits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous17>> HisrecAsync(string coin, Status? status, long? startTime, long? endTime, int? offset, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deposit History（supporting network） (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="status">* `0` - pending
        /// <br/>* `6` - credited but cannot withdraw
        /// <br/>* `1` - success</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of deposits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous17>> HisrecAsync(string coin, Status? status, long? startTime, long? endTime, int? offset, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Withdraw History (supporting network) (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="status">* `0` - Email Sent
        /// <br/>* `1` - Cancelled
        /// <br/>* `2` - Awaiting Approval
        /// <br/>* `3` - Rejected
        /// <br/>* `4` - Processing
        /// <br/>* `5` - Failure
        /// <br/>* `6` - Completed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of withdraw history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous18>> HistoryAllAsync(string coin, string withdrawOrderId, Status2? status, long? startTime, long? endTime, int? offset, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Withdraw History (supporting network) (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="status">* `0` - Email Sent
        /// <br/>* `1` - Cancelled
        /// <br/>* `2` - Awaiting Approval
        /// <br/>* `3` - Rejected
        /// <br/>* `4` - Processing
        /// <br/>* `5` - Failure
        /// <br/>* `6` - Completed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of withdraw history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous18>> HistoryAllAsync(string coin, string withdrawOrderId, Status2? status, long? startTime, long? endTime, int? offset, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deposit Address (supporting network) (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Deposit address info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response30> AddressAsync(string coin, string network, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deposit Address (supporting network) (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Deposit address info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response30> AddressAsync(string coin, string network, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Account Status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response31> Status2Async(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account Status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response31> Status2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Account API Trading Status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account API trading status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response32> ApiTradingStatusAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account API Trading Status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account API trading status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response32> ApiTradingStatusAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// DustLog(USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust log records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response33> Dribblet2Async(long? startTime, long? endTime, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// DustLog(USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust log records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response33> Dribblet2Async(long? startTime, long? endTime, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Assets That Can Be Converted Into BNB (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account assets available to be converted to BNB</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response34> DustBtcAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Assets That Can Be Converted Into BNB (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account assets available to be converted to BNB</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response34> DustBtcAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Dust Transfer (USER_DATA)
        /// </summary>
        /// <param name="asset">The asset being converted. For example, asset=BTC&amp;asset=USDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust log records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response35> DustAsync(System.Collections.Generic.IEnumerable<string> asset, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dust Transfer (USER_DATA)
        /// </summary>
        /// <param name="asset">The asset being converted. For example, asset=BTC&amp;asset=USDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust log records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response35> DustAsync(System.Collections.Generic.IEnumerable<string> asset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Asset Dividend Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Records of asset devidend</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response36> AssetDividendAsync(string asset, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Asset Dividend Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Records of asset devidend</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response36> AssetDividendAsync(string asset, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Asset Detail (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset detail</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response37> AssetDetailAsync(string asset, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Asset Detail (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset detail</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response37> AssetDetailAsync(string asset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Trade Fee (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Trade fee info per symbol</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous19>> TradeFeeAsync(string symbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Trade Fee (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Trade fee info per symbol</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous19>> TradeFeeAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query User Universal Transfer History (USER_DATA)
        /// </summary>
        /// <param name="type">Universal transfer type</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="fromSymbol">Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="toSymbol">Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Universal transfer history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response38> TransferGET3Async(Type5 type, long? startTime, long? endTime, int? current, int? size, string fromSymbol, string toSymbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query User Universal Transfer History (USER_DATA)
        /// </summary>
        /// <param name="type">Universal transfer type</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="fromSymbol">Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="toSymbol">Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Universal transfer history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response38> TransferGET3Async(Type5 type, long? startTime, long? endTime, int? current, int? size, string fromSymbol, string toSymbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// User Universal Transfer (USER_DATA)
        /// </summary>
        /// <param name="type">Universal transfer type</param>
        /// <param name="fromSymbol">Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="toSymbol">Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response39> TransferPOST3Async(Type5 type, string asset, double amount, string fromSymbol, string toSymbol, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// User Universal Transfer (USER_DATA)
        /// </summary>
        /// <param name="type">Universal transfer type</param>
        /// <param name="fromSymbol">Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="toSymbol">Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response39> TransferPOST3Async(Type5 type, string asset, double amount, string fromSymbol, string toSymbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Funding Wallet (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Funding asset detail</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous20>> GetFundingAssetAsync(string asset, NeedBtcValuation? needBtcValuation, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Funding Wallet (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Funding asset detail</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous20>> GetFundingAssetAsync(string asset, NeedBtcValuation? needBtcValuation, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// User Asset (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>User assets</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous21>> GetUserAssetAsync(string asset, NeedBtcValuation? needBtcValuation, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// User Asset (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>User assets</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous21>> GetUserAssetAsync(string asset, NeedBtcValuation? needBtcValuation, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Convert Transfer (USER_DATA)
        /// </summary>
        /// <param name="clientTranId">The unique flag, the min length is 20</param>
        /// <param name="targetAsset">Target asset you want to convert</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Conversion Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response40> ConvertTransferAsync(string clientTranId, string asset, double amount, string targetAsset, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Convert Transfer (USER_DATA)
        /// </summary>
        /// <param name="clientTranId">The unique flag, the min length is 20</param>
        /// <param name="targetAsset">Target asset you want to convert</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Conversion Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response40> ConvertTransferAsync(string clientTranId, string asset, double amount, string targetAsset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Convert Transfer (USER_DATA)
        /// </summary>
        /// <param name="tranId">The transaction id</param>
        /// <param name="asset">If it is blank, we will match deducted asset and target asset.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="accountType">MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Query Convert Transfer</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response41> QueryByPagePOSTAsync(long? tranId, string asset, long startTime, long endTime, AccountType? accountType, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Convert Transfer (USER_DATA)
        /// </summary>
        /// <param name="tranId">The transaction id</param>
        /// <param name="asset">If it is blank, we will match deducted asset and target asset.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="accountType">MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Query Convert Transfer</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response41> QueryByPagePOSTAsync(long? tranId, string asset, long startTime, long endTime, AccountType? accountType, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Cloud-Mining payment and refund history (USER_DATA)
        /// </summary>
        /// <param name="tranId">The transaction id</param>
        /// <param name="clientTranId">The unique flag</param>
        /// <param name="asset">If it is blank, we will query all assets</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cloud Mining Payment and Refund History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response42> QueryByPageGETAsync(long? tranId, string clientTranId, string asset, long startTime, long endTime, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Cloud-Mining payment and refund history (USER_DATA)
        /// </summary>
        /// <param name="tranId">The transaction id</param>
        /// <param name="clientTranId">The unique flag</param>
        /// <param name="asset">If it is blank, we will query all assets</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cloud Mining Payment and Refund History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response42> QueryByPageGETAsync(long? tranId, string clientTranId, string asset, long startTime, long endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get API Key Permission (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>API Key permissions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response43> ApiRestrictionsAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get API Key Permission (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>API Key permissions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response43> ApiRestrictionsAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a Virtual Sub-account(For Master Account)
        /// </summary>
        /// <param name="subAccountString">Please input a string. We will create a virtual email using that string for you to register</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Return the created virtual email</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response44> VirtualSubAccountAsync(string subAccountString, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a Virtual Sub-account(For Master Account)
        /// </summary>
        /// <param name="subAccountString">Please input a string. We will create a virtual email using that string for you to register</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Return the created virtual email</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response44> VirtualSubAccountAsync(string subAccountString, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Sub-account List (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 1; max 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of sub-accounts</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response45> ListAsync(string email, IsFreeze? isFreeze, int? page, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Sub-account List (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 1; max 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of sub-accounts</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response45> ListAsync(string email, IsFreeze? isFreeze, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account Spot Asset Transfer History (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account Spot Asset Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous22>> HistoryAll2Async(string fromEmail, string toEmail, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Spot Asset Transfer History (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account Spot Asset Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous22>> HistoryAll2Async(string fromEmail, string toEmail, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account Futures Asset Transfer History (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">1:USDT-margined Futures, 2: Coin-margined Futures</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default value: 50, Max value: 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account Futures Asset Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response46> InternalTransferGETAsync(string email, int futuresType, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Futures Asset Transfer History (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">1:USDT-margined Futures, 2: Coin-margined Futures</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default value: 50, Max value: 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account Futures Asset Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response46> InternalTransferGETAsync(string email, int futuresType, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account Futures Asset Transfer (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sender email</param>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="futuresType">1:USDT-margined Futures,2: Coin-margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Asset Transfer Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response47> InternalTransferPOSTAsync(string fromEmail, string toEmail, int futuresType, string asset, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Futures Asset Transfer (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sender email</param>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="futuresType">1:USDT-margined Futures,2: Coin-margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Asset Transfer Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response47> InternalTransferPOSTAsync(string fromEmail, string toEmail, int futuresType, string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account Assets (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of assets balances</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response48> AssetsAsync(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Assets (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of assets balances</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response48> AssetsAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account Spot Assets Summary (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="page">Default 1</param>
        /// <param name="size">Default:10 Max:20</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Summary of Sub-account Spot Assets</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response49> SpotSummaryAsync(string email, int? page, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Spot Assets Summary (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="page">Default 1</param>
        /// <param name="size">Default:10 Max:20</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Summary of Sub-account Spot Assets</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response49> SpotSummaryAsync(string email, int? page, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account Spot Assets Summary (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Deposit address info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response50> SubAddressAsync(string email, string coin, string network, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Spot Assets Summary (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Deposit address info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response50> SubAddressAsync(string email, string coin, string network, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account Deposit History (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="coin">Coin name</param>
        /// <param name="status">0(0:pending,6: credited but cannot withdraw, 1:success)</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account deposit history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous23>> SubHisrecAsync(string email, string coin, int? status, long? startTime, long? endTime, long? limit, int? offset, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Deposit History (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="coin">Coin name</param>
        /// <param name="status">0(0:pending,6: credited but cannot withdraw, 1:success)</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account deposit history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous23>> SubHisrecAsync(string email, string coin, int? status, long? startTime, long? endTime, long? limit, int? offset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account's Status on Margin/Futures (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on Margin/Futures</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous24>> StatusAllAsync(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account's Status on Margin/Futures (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on Margin/Futures</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous24>> StatusAllAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable Margin for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response51> EnableAsync(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Margin for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response51> EnableAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Detail on Sub-account's Margin Account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin sub-account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response52> AccountGET4Async(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detail on Sub-account's Margin Account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin sub-account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response52> AccountGET4Async(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Summary of Sub-account's Margin Account (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin sub-account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response53> AccountSummaryAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Summary of Sub-account's Margin Account (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin sub-account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response53> AccountSummaryAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable Futures for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response54> Enable2Async(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Futures for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response54> Enable2Async(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Detail on Sub-account's Futures Account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response55> AccountGET5Async(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detail on Sub-account's Futures Account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response55> AccountGET5Async(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Summary of Sub-account's Futures Account (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response56> AccountSummary2Async(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Summary of Sub-account's Futures Account (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response56> AccountSummary2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Futures Position-Risk of Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous25>> PositionRiskAllAsync(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Futures Position-Risk of Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous25>> PositionRiskAllAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Transfer for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">* `1` - transfer from subaccount's spot account to its USDT-margined futures account
        /// <br/>* `2` - transfer from subaccount's USDT-margined futures account to its spot account
        /// <br/>* `3` - transfer from subaccount's spot account to its COIN-margined futures account
        /// <br/>* `4` - transfer from subaccount's COIN-margined futures account to its spot account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response57> TransferPOST4Async(string email, string asset, double amount, Type6 type, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">* `1` - transfer from subaccount's spot account to its USDT-margined futures account
        /// <br/>* `2` - transfer from subaccount's USDT-margined futures account to its spot account
        /// <br/>* `3` - transfer from subaccount's spot account to its COIN-margined futures account
        /// <br/>* `4` - transfer from subaccount's COIN-margined futures account to its spot account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response57> TransferPOST4Async(string email, string asset, double amount, Type6 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Margin Transfer for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">* `1` - transfer from subaccount's spot account to margin account
        /// <br/>* `2` - transfer from subaccount's margin account to its spot account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response58> TransferPOST5Async(string email, string asset, double amount, Type7 type, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Transfer for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">* `1` - transfer from subaccount's spot account to margin account
        /// <br/>* `2` - transfer from subaccount's margin account to its spot account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response58> TransferPOST5Async(string email, string asset, double amount, Type7 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Transfer to Sub-account of Same Master (For Sub-account)
        /// </summary>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response59> SubToSubAsync(string toEmail, string asset, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer to Sub-account of Same Master (For Sub-account)
        /// </summary>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response59> SubToSubAsync(string toEmail, string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Transfer to Master (For Sub-account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response60> SubToMasterAsync(string asset, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer to Master (For Sub-account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response60> SubToMasterAsync(string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sub-account Transfer History (For Sub-account)
        /// </summary>
        /// <param name="type">* `1` - transfer in
        /// <br/>* `2` - transfer out</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous26>> SubUserHistoryAsync(string asset, Type8? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Transfer History (For Sub-account)
        /// </summary>
        /// <param name="type">* `1` - transfer in
        /// <br/>* `2` - transfer out</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous26>> SubUserHistoryAsync(string asset, Type8? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Universal Transfer History (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 500, Max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous27>> UniversalTransferAllAsync(string fromEmail, string toEmail, string clientTranId, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Universal Transfer History (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 500, Max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous27>> UniversalTransferAllAsync(string fromEmail, string toEmail, string clientTranId, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Universal Transfer (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="symbol">Only supported under ISOLATED_MARGIN type</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response61> UniversalTransferAsync(string fromEmail, string toEmail, FromAccountType fromAccountType, ToAccountType toAccountType, string clientTranId, string symbol, string asset, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Universal Transfer (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="symbol">Only supported under ISOLATED_MARGIN type</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response61> UniversalTransferAsync(string fromEmail, string toEmail, FromAccountType fromAccountType, ToAccountType toAccountType, string clientTranId, string symbol, string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Detail on Sub-account's Futures Account V2 (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubAccountUSDTFuturesDetails> AccountGET6Async(string email, FuturesType futuresType, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detail on Sub-account's Futures Account V2 (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubAccountUSDTFuturesDetails> AccountGET6Async(string email, FuturesType futuresType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Summary of Sub-account's Futures Account V2 (For Master Account)
        /// </summary>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 10, Max 20</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubAccountUSDTFuturesSummary> AccountSummary3Async(FuturesType2 futuresType, int? page, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Summary of Sub-account's Futures Account V2 (For Master Account)
        /// </summary>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 10, Max 20</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubAccountUSDTFuturesSummary> AccountSummary3Async(FuturesType2 futuresType, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Futures Position-Risk of Sub-account V2 (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Position Risk</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubAccountUSDTFuturesPositionRisk> PositionRiskAsync(string email, FuturesType3 futuresType, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Futures Position-Risk of Sub-account V2 (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Position Risk</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubAccountUSDTFuturesPositionRisk> PositionRiskAsync(string email, FuturesType3 futuresType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable Leverage Token for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="enableBlvt">Only true for now</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>BLVT status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response62> Enable3Async(string email, bool enableBlvt, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Leverage Token for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="enableBlvt">Only true for now</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>BLVT status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response62> Enable3Async(string email, bool enableBlvt, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deposit assets into the managed sub-account（For Investor Master Account）
        /// </summary>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response63> DepositPOSTAsync(string toEmail, string asset, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deposit assets into the managed sub-account（For Investor Master Account）
        /// </summary>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response63> DepositPOSTAsync(string toEmail, string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Managed sub-account asset details（For Investor Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of asset details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous28>> AssetAllAsync(string email, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Managed sub-account asset details（For Investor Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of asset details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous28>> AssetAllAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Withdrawl assets from the managed sub-account（For Investor Master Account)
        /// </summary>
        /// <param name="fromEmail">Sender email</param>
        /// <param name="transferDate">Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response64> WithdrawPOSTAsync(string fromEmail, string asset, double amount, long? transferDate, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Withdrawl assets from the managed sub-account（For Investor Master Account)
        /// </summary>
        /// <param name="fromEmail">Sender email</param>
        /// <param name="transferDate">Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response64> WithdrawPOSTAsync(string fromEmail, string asset, double amount, long? transferDate, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Managed sub-account snapshot (For Investor Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">"SPOT", "MARGIN"(cross), "FUTURES"(UM)</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">min 7, max 30, default 7</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account spot snapshot</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response65> AccountSnapshot2Async(string email, string type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Managed sub-account snapshot (For Investor Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">"SPOT", "MARGIN"(cross), "FUTURES"(UM)</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">min 7, max 30, default 7</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account spot snapshot</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response65> AccountSnapshot2Async(string email, string type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable or Disable IP Restriction for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipRestrict">true or false</param>
        /// <param name="thirdParty">true or false</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>IP Restriction information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response66> IpRestrictionPOSTAsync(string email, string subAccountApiKey, bool ipRestrict, bool? thirdParty, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable or Disable IP Restriction for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipRestrict">true or false</param>
        /// <param name="thirdParty">true or false</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>IP Restriction information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response66> IpRestrictionPOSTAsync(string email, string subAccountApiKey, bool ipRestrict, bool? thirdParty, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get IP Restriction for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>IP Restriction information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response67> IpRestrictionGETAsync(string email, string subAccountApiKey, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get IP Restriction for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>IP Restriction information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response67> IpRestrictionGETAsync(string email, string subAccountApiKey, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add IP List for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipAddress">Can be added in batches, separated by commas</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Add IP information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response68> IpListPOSTAsync(string email, string subAccountApiKey, string ipAddress, string thirdPartyName, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add IP List for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipAddress">Can be added in batches, separated by commas</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Add IP information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response68> IpListPOSTAsync(string email, string subAccountApiKey, string ipAddress, string thirdPartyName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete IP List for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipAddress">Can be added in batches, separated by commas</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Delete IP information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response69> IpListDELETEAsync(string email, string subAccountApiKey, string ipAddress, string thirdPartyName, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete IP List for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipAddress">Can be added in batches, separated by commas</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Delete IP information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response69> IpListDELETEAsync(string email, string subAccountApiKey, string ipAddress, string thirdPartyName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Sub-Account API key Third Party IP whitelist (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Third Party IP whitelist</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response70> ThirdPartyListAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Sub-Account API key Third Party IP whitelist (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Third Party IP whitelist</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response70> ThirdPartyListAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update IP Restriction for Sub-Account API key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="status">IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only. 3 = Restrict access to users' trusted third party IPs only</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Update IP Restriction</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response71> IpRestrictionPOST2Async(string email, string subAccountApiKey, string status, string thirdPartyName, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update IP Restriction for Sub-Account API key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="status">IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only. 3 = Restrict access to users' trusted third party IPs only</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Update IP Restriction</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response71> IpRestrictionPOST2Async(string email, string subAccountApiKey, string status, string thirdPartyName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a ListenKey (USER_STREAM)
        /// </summary>
        /// <returns>Listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response72> UserDataStreamPOSTAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a ListenKey (USER_STREAM)
        /// </summary>
        /// <returns>Listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response72> UserDataStreamPOSTAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ping/Keep-alive a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserDataStreamPUTAsync(string listenKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ping/Keep-alive a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserDataStreamPUTAsync(string listenKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserDataStreamDELETEAsync(string listenKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserDataStreamDELETEAsync(string listenKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a ListenKey (USER_STREAM)
        /// </summary>
        /// <returns>Margin listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response73> UserDataStreamPOST2Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a ListenKey (USER_STREAM)
        /// </summary>
        /// <returns>Margin listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response73> UserDataStreamPOST2Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ping/Keep-alive a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserDataStreamPUT2Async(string listenKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ping/Keep-alive a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserDataStreamPUT2Async(string listenKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserDataStreamDELETE2Async(string listenKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserDataStreamDELETE2Async(string listenKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Generate a Listen Key (USER_STREAM)
        /// </summary>
        /// <returns>Isolated margin listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response74> IsolatedPOSTAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a Listen Key (USER_STREAM)
        /// </summary>
        /// <returns>Isolated margin listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response74> IsolatedPOSTAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ping/Keep-alive a Listen Key (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> IsolatedPUTAsync(string listenKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ping/Keep-alive a Listen Key (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> IsolatedPUTAsync(string listenKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> IsolatedDELETEAsync(string listenKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> IsolatedDELETEAsync(string listenKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fiat Deposit/Withdraw History (USER_DATA)
        /// </summary>
        /// <param name="transactionType">* `0` - deposit
        /// <br/>* `1` - withdraw</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">Default 100, max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of deposit/withdraw orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response75> OrdersAsync(TransactionType transactionType, long? beginTime, long? endTime, int? page, int? rows, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fiat Deposit/Withdraw History (USER_DATA)
        /// </summary>
        /// <param name="transactionType">* `0` - deposit
        /// <br/>* `1` - withdraw</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">Default 100, max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of deposit/withdraw orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response75> OrdersAsync(TransactionType transactionType, long? beginTime, long? endTime, int? page, int? rows, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fiat Payments History (USER_DATA)
        /// </summary>
        /// <param name="transactionType">* `0` - deposit
        /// <br/>* `1` - withdraw</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">Default 100, max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of fiat payments</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response76> PaymentsAsync(TransactionType transactionType, long? beginTime, long? endTime, int? page, int? rows, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fiat Payments History (USER_DATA)
        /// </summary>
        /// <param name="transactionType">* `0` - deposit
        /// <br/>* `1` - withdraw</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">Default 100, max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of fiat payments</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response76> PaymentsAsync(TransactionType transactionType, long? beginTime, long? endTime, int? page, int? rows, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Flexible Product List (USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="featured">Default `ALL`</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible products</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous29>> ListAllAsync(Status3? status, Featured? featured, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Flexible Product List (USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="featured">Default `ALL`</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible products</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous29>> ListAllAsync(Status3? status, Featured? featured, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Left Daily Purchase Quota of Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Daily purchase quote of flexible product left</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response77> UserLeftQuotaAsync(string productId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Left Daily Purchase Quota of Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Daily purchase quote of flexible product left</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response77> UserLeftQuotaAsync(string productId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Purchase Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Generated Purchase Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response78> PurchaseAsync(string productId, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purchase Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Generated Purchase Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response78> PurchaseAsync(string productId, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Left Daily Redemption Quota of Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Daily redemption quota of flexible product left</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response79> UserRedemptionQuotaAsync(string productId, Type9 type, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Left Daily Redemption Quota of Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Daily redemption quota of flexible product left</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response79> UserRedemptionQuotaAsync(string productId, Type9 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Redeem Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RedeemAsync(string productId, double amount, Type9 type, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeem Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RedeemAsync(string productId, double amount, Type9 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Flexible Product Position (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible product positions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous30>> PositionAsync(string asset, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Flexible Product Position (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible product positions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous30>> PositionAsync(string asset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Fixed/Activity Project List(USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="isSortAsc">default "true"</param>
        /// <param name="sortBy">Default `START_TIME`</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of fixed projects</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous31>> ListAll2Async(string asset, Type10 type, Status4? status, bool? isSortAsc, SortBy? sortBy, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Fixed/Activity Project List(USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="isSortAsc">default "true"</param>
        /// <param name="sortBy">Default `START_TIME`</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of fixed projects</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous31>> ListAll2Async(string asset, Type10 type, Status4? status, bool? isSortAsc, SortBy? sortBy, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Purchase Fixed/Activity Project (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Generated Purchase Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response80> Purchase2Async(string projectId, string lot, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purchase Fixed/Activity Project (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Generated Purchase Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response80> Purchase2Async(string projectId, string lot, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Fixed/Activity Project Position (USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of fixed project positions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous32>> ListAll3Async(string asset, string projectId, Status4? status, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Fixed/Activity Project Position (USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of fixed project positions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous32>> ListAll3Async(string asset, string projectId, Status4? status, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lending Account (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Lending account</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response81> AccountGET7Async(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lending Account (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Lending account</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response81> AccountGET7Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Purchase Record (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible or Fixed/Activity products</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SavingsFlexiblePurchaseRecord> PurchaseRecordAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Purchase Record (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible or Fixed/Activity products</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SavingsFlexiblePurchaseRecord> PurchaseRecordAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Redemption Record (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of Flexible or Fixed/Activity Redemptions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SavingsFlexibleRedemptionRecord> RedemptionRecordAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Redemption Record (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of Flexible or Fixed/Activity Redemptions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SavingsFlexibleRedemptionRecord> RedemptionRecordAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Interest History (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of interest</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous33>> InterestHistoryAllAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Interest History (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of interest</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous33>> InterestHistoryAllAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Change Fixed/Activity Position to Daily Position (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Purchase information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response82> PositionChangedAsync(string projectId, string lot, string positionId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change Fixed/Activity Position to Daily Position (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Purchase information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response82> PositionChangedAsync(string projectId, string lot, string positionId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Staking Product List (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Product list.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous34>> ProductListAsync(string product, string asset, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Staking Product List (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Product list.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous34>> ProductListAsync(string product, string asset, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Purchase Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="renewable">true or false, default false. Active if product is `STAKING` or `L_DEFI`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Position Id.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response83> Purchase3Async(string product, string productId, double amount, string renewable, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purchase Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="renewable">true or false, default false. Active if product is `STAKING` or `L_DEFI`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Position Id.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response83> Purchase3Async(string product, string productId, double amount, string renewable, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Redeem Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="positionId">Mandatory if product is `STAKING` or `L_DEFI`</param>
        /// <param name="amount">Mandatory if product is `F_DEFI`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response84> Redeem2Async(string product, string positionId, string productId, double? amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeem Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="positionId">Mandatory if product is `STAKING` or `L_DEFI`</param>
        /// <param name="amount">Mandatory if product is `F_DEFI`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response84> Redeem2Async(string product, string positionId, string productId, double? amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Staking Product Position (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Position.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous35>> Position2Async(string product, string productId, string asset, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Staking Product Position (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Position.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous35>> Position2Async(string product, string productId, string asset, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Staking History (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="txnType">`SUBSCRIPTION`, `REDEMPTION`, `INTEREST`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Staking History.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous36>> StakingRecordAsync(string product, string txnType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Staking History (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="txnType">`SUBSCRIPTION`, `REDEMPTION`, `INTEREST`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Staking History.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous36>> StakingRecordAsync(string product, string txnType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set Auto Staking (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="renewable">true or false</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response85> SetAutoStakingAsync(string product, string positionId, string renewable, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Auto Staking (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="renewable">true or false</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response85> SetAutoStakingAsync(string product, string positionId, string renewable, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Personal Left Quota of Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quota.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous37>> PersonalLeftQuotaAsync(string product, string productId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Personal Left Quota of Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quota.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous37>> PersonalLeftQuotaAsync(string product, string productId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Acquiring Algorithm (MARKET_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Algorithm information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response86> AlgoListAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Acquiring Algorithm (MARKET_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Algorithm information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response86> AlgoListAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Acquiring CoinName (MARKET_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Coin information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response87> CoinListAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Acquiring CoinName (MARKET_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Coin information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response87> CoinListAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Request for Detail Miner List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="workerName">Miner’s name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of workers' hashrates'</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response88> DetailAsync(string algo, string userName, string workerName, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request for Detail Miner List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="workerName">Miner’s name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of workers' hashrates'</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response88> DetailAsync(string algo, string userName, string workerName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Request for Miner List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="sort">sort sequence（default=0）0 positive sequence, 1 negative sequence</param>
        /// <param name="sortColumn">Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time</param>
        /// <param name="workerStatus">miners status（default=0）0 all, 1 valid, 2 invalid, 3 failure</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of workers</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response89> List2Async(string algo, string userName, int? pageIndex, int? sort, int? sortColumn, int? workerStatus, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request for Miner List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="sort">sort sequence（default=0）0 positive sequence, 1 negative sequence</param>
        /// <param name="sortColumn">Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time</param>
        /// <param name="workerStatus">miners status（default=0）0 all, 1 valid, 2 invalid, 3 failure</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of workers</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response89> List2Async(string algo, string userName, int? pageIndex, int? sort, int? sortColumn, int? workerStatus, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Earnings List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="coin">Coin name</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of earnings</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response90> List3Async(string algo, string userName, string coin, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="coin">Coin name</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of earnings</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response90> List3Async(string algo, string userName, string coin, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Extra Bonus List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="coin">Coin name</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of extra bonuses</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response91> OtherAsync(string algo, string userName, string coin, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Extra Bonus List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="coin">Coin name</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of extra bonuses</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response91> OtherAsync(string algo, string userName, string coin, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Hashrate Resale List (USER_DATA)
        /// </summary>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of hashrate resales</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response92> List4Async(int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hashrate Resale List (USER_DATA)
        /// </summary>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of hashrate resales</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response92> List4Async(int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Hashrate Resale Details (USER_DATA)
        /// </summary>
        /// <param name="configId">Mining ID</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of hashrate resale details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response93> DetailsAsync(string configId, string userName, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hashrate Resale Details (USER_DATA)
        /// </summary>
        /// <param name="configId">Mining ID</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of hashrate resale details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response93> DetailsAsync(string configId, string userName, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Hashrate Resale Request (USER_DATA)
        /// </summary>
        /// <param name="userName">Mining Account</param>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="toPoolUser">Mining Account</param>
        /// <param name="hashRate">Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining Account Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response94> ConfigAsync(string userName, string algo, string startDate, string endDate, string toPoolUser, string hashRate, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hashrate Resale Request (USER_DATA)
        /// </summary>
        /// <param name="userName">Mining Account</param>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="toPoolUser">Mining Account</param>
        /// <param name="hashRate">Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining Account Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response94> ConfigAsync(string userName, string algo, string startDate, string endDate, string toPoolUser, string hashRate, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel Hashrate Resale configuration (USER_DATA)
        /// </summary>
        /// <param name="configId">Mining ID</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success flag</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response95> CancelAsync(string configId, string userName, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Hashrate Resale configuration (USER_DATA)
        /// </summary>
        /// <param name="configId">Mining ID</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success flag</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response95> CancelAsync(string configId, string userName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Statistic List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining account statistics</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response96> Status3Async(string algo, string userName, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Statistic List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining account statistics</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response96> Status3Async(string algo, string userName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Account List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of mining accounts</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response97> List5Async(string algo, string userName, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of mining accounts</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response97> List5Async(string algo, string userName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mining Account Earning (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining account earnings</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response98> UidAsync(string algo, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mining Account Earning (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining account earnings</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response98> UidAsync(string algo, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// New Future Account Transfer (USER_DATA)
        /// </summary>
        /// <param name="type">1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Transfer</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response99> TransferPOST6Async(string asset, double amount, long type, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// New Future Account Transfer (USER_DATA)
        /// </summary>
        /// <param name="type">1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Transfer</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response99> TransferPOST6Async(string asset, double amount, long type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Future Account Transaction History List (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Transfer Query</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response100> TransferGET4Async(string asset, long startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Future Account Transaction History List (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Transfer Query</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response100> TransferGET4Async(string asset, long startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cross-Collateral Borrow History (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Borrow History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response101> HistoryAsync(string coin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Borrow History (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Borrow History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response101> HistoryAsync(string coin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cross-Collateral Repayment History (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response102> History2Async(string coin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Repayment History (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response102> History2Async(string coin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cross-Collateral Wallet V2 (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Wallet Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response103> WalletAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Wallet V2 (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Wallet Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response103> WalletAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adjust Cross-Collateral LTV History (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Adjust Cross-Collateral LTV History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response104> History3Async(string loanCoin, string collateralCoin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adjust Cross-Collateral LTV History (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Adjust Cross-Collateral LTV History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response104> History3Async(string loanCoin, string collateralCoin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cross-Collateral Liquidation History (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Liquidation History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response105> LiquidationHistoryAsync(string loanCoin, string collateralCoin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Liquidation History (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Liquidation History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response105> LiquidationHistoryAsync(string loanCoin, string collateralCoin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cross-Collateral Interest History (USER_DATA)
        /// </summary>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Interest History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response106> InterestHistory2Async(string collateralCoin, long? startTime, long? endTime, int? current, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Interest History (USER_DATA)
        /// </summary>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Interest History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response106> InterestHistory2Async(string collateralCoin, long? startTime, long? endTime, int? current, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Volume Participation(VP) New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.</param>
        /// <param name="quantity">Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT</param>
        /// <param name="urgency">Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH</param>
        /// <param name="clientAlgoId">A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value</param>
        /// <param name="reduceOnly">'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position</param>
        /// <param name="limitPrice">Limit price of the order; If it is not sent, will place order by market price by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Volume Participation(VP) Order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response107> NewOrderVpAsync(string symbol, Side side, PositionSide? positionSide, double quantity, Urgency urgency, string clientAlgoId, bool? reduceOnly, double? limitPrice, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Volume Participation(VP) New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.</param>
        /// <param name="quantity">Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT</param>
        /// <param name="urgency">Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH</param>
        /// <param name="clientAlgoId">A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value</param>
        /// <param name="reduceOnly">'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position</param>
        /// <param name="limitPrice">Limit price of the order; If it is not sent, will place order by market price by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Volume Participation(VP) Order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response107> NewOrderVpAsync(string symbol, Side side, PositionSide? positionSide, double quantity, Urgency urgency, string clientAlgoId, bool? reduceOnly, double? limitPrice, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Time-Weighted Average Price(Twap) New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.</param>
        /// <param name="quantity">Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT</param>
        /// <param name="duration">Duration for TWAP orders in seconds. [300, 86400];Less than 5min =&gt; defaults to 5 min; Greater than 24h =&gt; defaults to 24h</param>
        /// <param name="clientAlgoId">A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value</param>
        /// <param name="reduceOnly">'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position</param>
        /// <param name="limitPrice">Limit price of the order; If it is not sent, will place order by market price by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Time-Weighted Average Price(Twap) New Order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response108> NewOrderTwapAsync(string symbol, Side side, PositionSide? positionSide, double quantity, long duration, string clientAlgoId, bool? reduceOnly, double? limitPrice, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Time-Weighted Average Price(Twap) New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.</param>
        /// <param name="quantity">Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT</param>
        /// <param name="duration">Duration for TWAP orders in seconds. [300, 86400];Less than 5min =&gt; defaults to 5 min; Greater than 24h =&gt; defaults to 24h</param>
        /// <param name="clientAlgoId">A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value</param>
        /// <param name="reduceOnly">'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position</param>
        /// <param name="limitPrice">Limit price of the order; If it is not sent, will place order by market price by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Time-Weighted Average Price(Twap) New Order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response108> NewOrderTwapAsync(string symbol, Side side, PositionSide? positionSide, double quantity, long duration, string clientAlgoId, bool? reduceOnly, double? limitPrice, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel Algo Order(TRADE)
        /// </summary>
        /// <param name="algoId">Eg. 14511</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response109> OrderDELETE3Async(long algoId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Algo Order(TRADE)
        /// </summary>
        /// <param name="algoId">Eg. 14511</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response109> OrderDELETE3Async(long algoId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Current Algo Open Orders (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Open Algo Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response110> OpenOrdersAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Current Algo Open Orders (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Open Algo Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response110> OpenOrdersAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Historical Algo Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="pageSize">Page size, minimum 1, maximum 100, default 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Historical Algo Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response111> HistoricalOrdersAsync(string symbol, Side2? side, long? startTime, long? endTime, int? page, string pageSize, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Historical Algo Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="pageSize">Page size, minimum 1, maximum 100, default 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Historical Algo Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response111> HistoricalOrdersAsync(string symbol, Side2? side, long? startTime, long? endTime, int? page, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Sub Orders (USER_DATA)
        /// </summary>
        /// <param name="page">Default 1</param>
        /// <param name="pageSize">Page size, minimum 1, maximum 100, default 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Adjust Cross-Collateral LTV History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response112> SubOrdersAsync(long algoId, int? page, string pageSize, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Sub Orders (USER_DATA)
        /// </summary>
        /// <param name="page">Default 1</param>
        /// <param name="pageSize">Page size, minimum 1, maximum 100, default 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Adjust Cross-Collateral LTV History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response112> SubOrdersAsync(long algoId, int? page, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Portfolio Margin Account Info (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Portfolio account.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response113> AccountGET8Async(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Portfolio Margin Account Info (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Portfolio account.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response113> AccountGET8Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Portfolio Margin Collateral Rate (MARKET_DATA)
        /// </summary>
        /// <returns>Portfolio Margin Collateral Rate.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous38>> CollateralRateAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Portfolio Margin Collateral Rate (MARKET_DATA)
        /// </summary>
        /// <returns>Portfolio Margin Collateral Rate.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous38>> CollateralRateAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Portfolio Margin Bankruptcy Loan Amount.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response114> PmLoanAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Portfolio Margin Bankruptcy Loan Amount.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response114> PmLoanAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response115> RepayPOST2Async(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response115> RepayPOST2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// BLVT Info (MARKET_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <returns>List of token information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous39>> TokenInfoAsync(string tokenName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// BLVT Info (MARKET_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <returns>List of token information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous39>> TokenInfoAsync(string tokenName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Subscribe BLVT (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="cost">Spot balance</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Subscription Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response116> SubscribeAsync(string tokenName, double cost, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Subscribe BLVT (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="cost">Spot balance</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Subscription Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response116> SubscribeAsync(string tokenName, double cost, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query Subscription Record (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of subscription record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response117> RecordAsync(string tokenName, long? id, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Subscription Record (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of subscription record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response117> RecordAsync(string tokenName, long? id, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Redeem BLVT (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Redemption record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response118> Redeem3Async(string tokenName, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeem BLVT (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Redemption record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response118> Redeem3Async(string tokenName, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Redemption Record (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 1000, max 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of redemption record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous40>> RecordAllAsync(string tokenName, long? id, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redemption Record (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 1000, max 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of redemption record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous40>> RecordAllAsync(string tokenName, long? id, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// BLVT User Limit Info (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of token limits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous41>> UserLimitAsync(string tokenName, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// BLVT User Limit Info (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of token limits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous41>> UserLimitAsync(string tokenName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List All Swap Pools (MARKET_DATA)
        /// </summary>
        /// <returns>List of Swap Pools</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous42>> PoolsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List All Swap Pools (MARKET_DATA)
        /// </summary>
        /// <returns>List of Swap Pools</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous42>> PoolsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liquidity information of a pool (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pool Liquidation information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous43>> LiquidityAsync(long? poolId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liquidity information of a pool (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pool Liquidation information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous43>> LiquidityAsync(long? poolId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Liquidity (TRADE)
        /// </summary>
        /// <param name="type">* `Single` - to add a single token
        /// <br/>* `Combination` - to add dual tokens</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response119> LiquidityAddAsync(long poolId, Type11? type, string asset, double quantity, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Liquidity (TRADE)
        /// </summary>
        /// <param name="type">* `Single` - to add a single token
        /// <br/>* `Combination` - to add dual tokens</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response119> LiquidityAddAsync(long poolId, Type11? type, string asset, double quantity, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Liquidity (TRADE)
        /// </summary>
        /// <param name="type">* `SINGLE` - for single asset removal
        /// <br/>* `COMBINATION` - for combination of all coins removal</param>
        /// <param name="asset">Mandatory for single asset removal</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response120> LiquidityRemoveAsync(long poolId, Type12 type, string asset, double shareAmount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Liquidity (TRADE)
        /// </summary>
        /// <param name="type">* `SINGLE` - for single asset removal
        /// <br/>* `COMBINATION` - for combination of all coins removal</param>
        /// <param name="asset">Mandatory for single asset removal</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response120> LiquidityRemoveAsync(long poolId, Type12 type, string asset, double shareAmount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liquidity Operation Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Liquidity Operation Record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous44>> LiquidityOpsAsync(long? operationId, long? poolId, Operation? operation, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liquidity Operation Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Liquidity Operation Record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous44>> LiquidityOpsAsync(long? operationId, long? poolId, Operation? operation, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Request Quote (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quote Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response121> QuoteAsync(string quoteAsset, string baseAsset, double quoteQty, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request Quote (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quote Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response121> QuoteAsync(string quoteAsset, string baseAsset, double quoteQty, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Swap (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Swap Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response122> SwapAsync(string quoteAsset, string baseAsset, double quoteQty, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Swap (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Swap Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response122> SwapAsync(string quoteAsset, string baseAsset, double quoteQty, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Swap History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="status">* `0` - pending for swap
        /// <br/>* `1` - success
        /// <br/>* `2` - failed</param>
        /// <param name="limit">default 3, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Swap History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous45>> SwapAllAsync(long? swapId, long? startTime, long? endTime, Status5? status, string quoteAsset, string baseAsset, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Swap History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="status">* `0` - pending for swap
        /// <br/>* `1` - success
        /// <br/>* `2` - failed</param>
        /// <param name="limit">default 3, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Swap History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous45>> SwapAllAsync(long? swapId, long? startTime, long? endTime, Status5? status, string quoteAsset, string baseAsset, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Pool Configure (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pool Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous46>> PoolConfigureAsync(long? poolId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Pool Configure (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pool Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous46>> PoolConfigureAsync(long? poolId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Liquidity Preview (USER_DATA)
        /// </summary>
        /// <param name="type">* `SINGLE` - for adding a single token
        /// <br/>* `COMBINATION` - for adding dual tokens</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Add Liquidity Preview</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BswapAddLiquidityPreviewCombination> AddLiquidityPreviewAsync(long poolId, Type13 type, string quoteAsset, double quoteQty, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Liquidity Preview (USER_DATA)
        /// </summary>
        /// <param name="type">* `SINGLE` - for adding a single token
        /// <br/>* `COMBINATION` - for adding dual tokens</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Add Liquidity Preview</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BswapAddLiquidityPreviewCombination> AddLiquidityPreviewAsync(long poolId, Type13 type, string quoteAsset, double quoteQty, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Liquidity Preview (USER_DATA)
        /// </summary>
        /// <param name="type">* `SINGLE` - remove and obtain a single token
        /// <br/>* `COMBINATION` - remove and obtain dual token</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Remove Liquidity Preview</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BswapRmvLiquidityPreviewCombination> RemoveLiquidityPreviewAsync(long poolId, Type14 type, string quoteAsset, double shareAmount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Liquidity Preview (USER_DATA)
        /// </summary>
        /// <param name="type">* `SINGLE` - remove and obtain a single token
        /// <br/>* `COMBINATION` - remove and obtain dual token</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Remove Liquidity Preview</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BswapRmvLiquidityPreviewCombination> RemoveLiquidityPreviewAsync(long poolId, Type14 type, string quoteAsset, double shareAmount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Unclaimed Rewards Record (USER_DATA)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Unclaimed rewards record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response123> UnclaimedRewardsAsync(int? type, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Unclaimed Rewards Record (USER_DATA)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Unclaimed rewards record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response123> UnclaimedRewardsAsync(int? type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Claim rewards (TRADE)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Result of claim</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response124> ClaimRewardsAsync(int? type, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Claim rewards (TRADE)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Result of claim</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response124> ClaimRewardsAsync(int? type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Claimed History (USER_DATA)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 3, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Claimed History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous47>> ClaimedHistoryAsync(long? poolId, string assetRewards, int? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Claimed History (USER_DATA)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 3, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Claimed History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous47>> ClaimedHistoryAsync(long? poolId, string assetRewards, int? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get C2C Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTimestamp">UTC timestamp in ms</param>
        /// <param name="endTimestamp">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">default 100, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Trades history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response125> ListUserOrderHistoryAsync(TradeType tradeType, long? startTimestamp, long? endTimestamp, int? page, int? rows, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get C2C Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTimestamp">UTC timestamp in ms</param>
        /// <param name="endTimestamp">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">default 100, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Trades history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response125> ListUserOrderHistoryAsync(TradeType tradeType, long? startTimestamp, long? endTimestamp, int? page, int? rows, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get VIP Loan Ongoing Orders (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 10; max 100.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Ongoing VIP Loan Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response126> Orders2Async(long? orderId, long? collateralAccountId, string loanCoin, string collateralCoin, int? current, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get VIP Loan Ongoing Orders (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 10; max 100.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Ongoing VIP Loan Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response126> Orders2Async(long? orderId, long? collateralAccountId, string loanCoin, string collateralCoin, int? current, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// VIP Loan Repay (TRADE)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Loan Repayment</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response127> RepayPOST3Async(long? orderId, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// VIP Loan Repay (TRADE)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Loan Repayment</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response127> RepayPOST3Async(long? orderId, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get VIP Loan Repayment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 10; max 100.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Loan Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response128> History4Async(long? orderId, string loanCoin, long? startTime, long? endTime, int? current, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get VIP Loan Repayment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 10; max 100.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Loan Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response128> History4Async(long? orderId, string loanCoin, long? startTime, long? endTime, int? current, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check Locked Value of VIP Collateral Account (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Locked Value</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response129> AccountGET9Async(long? orderId, long? collateralAccountId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check Locked Value of VIP Collateral Account (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Locked Value</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response129> AccountGET9Async(long? orderId, long? collateralAccountId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Crypto Loans Income History (USER_DATA)
        /// </summary>
        /// <param name="type">All types will be returned by default.
        /// <br/>* `borrowIn`
        /// <br/>* `collateralSpent`
        /// <br/>* `repayAmount`
        /// <br/>* `collateralReturn` - Collateral return after repayment
        /// <br/>* `addCollateral`
        /// <br/>* `removeCollateral`
        /// <br/>* `collateralReturnAfterLiquidation`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 20, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous48>> IncomeAsync(string asset, Type15? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Crypto Loans Income History (USER_DATA)
        /// </summary>
        /// <param name="type">All types will be returned by default.
        /// <br/>* `borrowIn`
        /// <br/>* `collateralSpent`
        /// <br/>* `repayAmount`
        /// <br/>* `collateralReturn` - Collateral return after repayment
        /// <br/>* `addCollateral`
        /// <br/>* `removeCollateral`
        /// <br/>* `collateralReturnAfterLiquidation`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 20, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous48>> IncomeAsync(string asset, Type15? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Crypto Loan Borrow (TRADE)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="loanAmount">Mandatory when collateralAmount is empty</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="collateralAmount">Mandatory when loanAmount is empty</param>
        /// <param name="loanTerm">7/14/30/90/180 days</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Borrow Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response130> BorrowAsync(string loanCoin, double? loanAmount, string collateralCoin, double? collateralAmount, int loanTerm, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Loan Borrow (TRADE)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="loanAmount">Mandatory when collateralAmount is empty</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="collateralAmount">Mandatory when loanAmount is empty</param>
        /// <param name="loanTerm">7/14/30/90/180 days</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Borrow Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response130> BorrowAsync(string loanCoin, double? loanAmount, string collateralCoin, double? collateralAmount, int loanTerm, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Crypto Loans Borrow History (USER_DATA)
        /// </summary>
        /// <param name="orderId">orderId in POST /sapi/v1/loan/borrow</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Borrow History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response131> History5Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Crypto Loans Borrow History (USER_DATA)
        /// </summary>
        /// <param name="orderId">orderId in POST /sapi/v1/loan/borrow</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Borrow History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response131> History5Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Loan Ongoing Orders (USER_DATA)
        /// </summary>
        /// <param name="orderId">orderId in POST /sapi/v1/loan/borrow</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="current">Current querying page. Start from 1; default:1, max:1000</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Ongoing Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response132> Orders3Async(long? orderId, string loanCoin, string collateralCoin, int? current, long? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loan Ongoing Orders (USER_DATA)
        /// </summary>
        /// <param name="orderId">orderId in POST /sapi/v1/loan/borrow</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="current">Current querying page. Start from 1; default:1, max:1000</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Ongoing Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response132> Orders3Async(long? orderId, string loanCoin, string collateralCoin, int? current, long? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Crypto Loan Repay (TRADE)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="amount">Repayment Amount</param>
        /// <param name="type">Default: 1. 1 for 'repay with borrowed coin'; 2 for 'repay with collateral'.</param>
        /// <param name="collateralReturn">Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Repayment Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepaymentInfo> RepayPOST4Async(long orderId, double amount, int? type, bool? collateralReturn, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Loan Repay (TRADE)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="amount">Repayment Amount</param>
        /// <param name="type">Default: 1. 1 for 'repay with borrowed coin'; 2 for 'repay with collateral'.</param>
        /// <param name="collateralReturn">Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Repayment Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepaymentInfo> RepayPOST4Async(long orderId, double amount, int? type, bool? collateralReturn, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Loan Repayment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response133> History6Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loan Repayment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response133> History6Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Crypto Loan Adjust LTV (TRADE)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="amount">Amount</param>
        /// <param name="direction">'ADDITIONAL', 'REDUCED'</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>LTV Adjust</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response134> LtvAsync(long orderId, double amount, Direction direction, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Loan Adjust LTV (TRADE)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="amount">Amount</param>
        /// <param name="direction">'ADDITIONAL', 'REDUCED'</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>LTV Adjust</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response134> LtvAsync(long orderId, double amount, Direction direction, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Loan LTV Adjustment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>LTV Adjustment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response135> History7Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loan LTV Adjustment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>LTV Adjustment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response135> History7Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Loanable Assets Data (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loanable Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response136> DataAsync(string loanCoin, int? vipLevel, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loanable Assets Data (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loanable Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response136> DataAsync(string loanCoin, int? vipLevel, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Collateral Assets Data (USER_DATA)
        /// </summary>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response137> Data2Async(string collateralCoin, int? vipLevel, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Collateral Assets Data (USER_DATA)
        /// </summary>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response137> Data2Async(string collateralCoin, int? vipLevel, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check Collateral Repay Rate (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="repayAmount">repay amount of loanCoin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response138> RateAsync(string loanCoin, string collateralCoin, decimal repayAmount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check Collateral Repay Rate (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="repayAmount">repay amount of loanCoin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response138> RateAsync(string loanCoin, string collateralCoin, decimal repayAmount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Pay Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 100, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pay History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response139> TransactionsAsync(long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Pay Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 100, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pay History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response139> TransactionsAsync(long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List All Convert Pairs (USER_DATA)
        /// </summary>
        /// <param name="fromAsset">User spends coin</param>
        /// <param name="toAsset">User receives coin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List Convert Pairs</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous49>> ExchangeInfoAllAsync(string fromAsset, string toAsset, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List All Convert Pairs (USER_DATA)
        /// </summary>
        /// <param name="fromAsset">User spends coin</param>
        /// <param name="toAsset">User receives coin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List Convert Pairs</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous49>> ExchangeInfoAllAsync(string fromAsset, string toAsset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query order quantity precision per asset (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset Precision Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous50>> AssetInfoAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query order quantity precision per asset (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset Precision Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous50>> AssetInfoAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Send quote request (USER_DATA)
        /// </summary>
        /// <param name="fromAmount">When specified, it is the amount you will be debited after the conversion</param>
        /// <param name="toAmount">When specified, it is the amount you will be debited after the conversion</param>
        /// <param name="validTime">10s, 30s, 1m, 2m, default 10s</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quote Request</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response140> GetQuoteAsync(string fromAsset, string toAsset, decimal? fromAmount, decimal? toAmount, ValidTime? validTime, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send quote request (USER_DATA)
        /// </summary>
        /// <param name="fromAmount">When specified, it is the amount you will be debited after the conversion</param>
        /// <param name="toAmount">When specified, it is the amount you will be debited after the conversion</param>
        /// <param name="validTime">10s, 30s, 1m, 2m, default 10s</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quote Request</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response140> GetQuoteAsync(string fromAsset, string toAsset, decimal? fromAmount, decimal? toAmount, ValidTime? validTime, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Accept Quote (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Accept Quote</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response141> AcceptQuoteAsync(string quoteId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Accept Quote (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Accept Quote</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response141> AcceptQuoteAsync(string quoteId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Order status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order Status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response142> OrderStatusAsync(string orderId, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Order status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order Status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response142> OrderStatusAsync(string orderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Convert Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 100, max 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Convert Trade History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response143> TradeFlowAsync(long startTime, long endTime, int? limit, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Convert Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 100, max 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Convert Trade History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response143> TradeFlowAsync(long startTime, long endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Spot Rebate History Records (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Rebate History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response144> TaxQueryAsync(long? startTime, long? endTime, int? page, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Spot Rebate History Records (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Rebate History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response144> TaxQueryAsync(long? startTime, long? endTime, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get NFT Transaction History (USER_DATA)
        /// </summary>
        /// <param name="orderType">0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Transaction History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response145> Transactions2Async(int orderType, long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT Transaction History (USER_DATA)
        /// </summary>
        /// <param name="orderType">0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Transaction History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response145> Transactions2Async(int orderType, long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get NFT Deposit History(USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Deposit History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response146> DepositGETAsync(long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT Deposit History(USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Deposit History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response146> DepositGETAsync(long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get NFT Withdraw History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Withdraw History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response147> WithdrawGETAsync(long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT Withdraw History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Withdraw History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response147> WithdrawGETAsync(long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get NFT Asset (USER_DATA)
        /// </summary>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response148> GetAssetAsync(int? limit, int? page, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT Asset (USER_DATA)
        /// </summary>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response148> GetAssetAsync(int? limit, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="token">The coin type contained in the Binance Code</param>
        /// <param name="amount">The amount of the coin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code creation</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response149> CreateCodeAsync(string token, double amount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="token">The coin type contained in the Binance Code</param>
        /// <param name="amount">The amount of the coin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code creation</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response149> CreateCodeAsync(string token, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Redeem a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="code">Binance Code</param>
        /// <param name="externalUid">Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Redeemed Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response150> RedeemCodeAsync(string code, string externalUid, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeem a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="code">Binance Code</param>
        /// <param name="externalUid">Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Redeemed Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response150> RedeemCodeAsync(string code, string externalUid, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Verify a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="referenceNo">reference number</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code Verification</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response151> VerifyAsync(string referenceNo, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Verify a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="referenceNo">reference number</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code Verification</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response151> VerifyAsync(string referenceNo, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch RSA Public Key (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>RSA Public Key.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response152> RsaPublicKeyAsync(long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch RSA Public Key (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>RSA Public Key.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response152> RsaPublicKeyAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Buy a Binance Code (TRADE)
        /// </summary>
        /// <param name="baseToken">The token you want to pay, example BUSD</param>
        /// <param name="faceToken">The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint.</param>
        /// <param name="baseTokenAmount">The base token asset quantity, example  1.002</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code creation</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response153> BuyCodeAsync(string baseToken, string faceToken, double baseTokenAmount, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Buy a Binance Code (TRADE)
        /// </summary>
        /// <param name="baseToken">The token you want to pay, example BUSD</param>
        /// <param name="faceToken">The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint.</param>
        /// <param name="baseTokenAmount">The base token asset quantity, example  1.002</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code creation</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response153> BuyCodeAsync(string baseToken, string faceToken, double baseTokenAmount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch Token Limit (USER_DATA)
        /// </summary>
        /// <param name="baseToken">The token you want to pay, example BUSD</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Token limit</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response154> TokenLimitAsync(string baseToken, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch Token Limit (USER_DATA)
        /// </summary>
        /// <param name="baseToken">The token you want to pay, example BUSD</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Token limit</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response154> TokenLimitAsync(string baseToken, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client : IClient
    {
        private string _baseUrl = "https://api.binance.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Test Connectivity
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PingAsync()
        {
            return PingAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test Connectivity
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PingAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/ping");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check Server Time
        /// </summary>
        /// <returns>Binance server UTC timestamp</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> TimeAsync()
        {
            return TimeAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check Server Time
        /// </summary>
        /// <returns>Binance server UTC timestamp</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> TimeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/time");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Exchange Information
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Current exchange trading rules and symbol information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response2> ExchangeInfoAsync(string symbol, string symbols, string permissions)
        {
            return ExchangeInfoAsync(symbol, symbols, permissions, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Exchange Information
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Current exchange trading rules and symbol information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> ExchangeInfoAsync(string symbol, string symbols, string permissions, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/exchangeInfo?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbols != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbols") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (permissions != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("permissions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(permissions, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Order Book
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">If limit &gt; 5000, then the response will truncate to 5000</param>
        /// <returns>Order book</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response3> DepthAsync(string symbol, int? limit)
        {
            return DepthAsync(symbol, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Order Book
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">If limit &gt; 5000, then the response will truncate to 5000</param>
        /// <returns>Order book</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response3> DepthAsync(string symbol, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/depth?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Recent Trades List
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Trade>> TradesAsync(string symbol, int? limit)
        {
            return TradesAsync(symbol, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recent Trades List
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Trade>> TradesAsync(string symbol, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/trades?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Trade>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Old Trade Lookup (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Trade>> HistoricalTradesAsync(string symbol, int? limit, long? fromId)
        {
            return HistoricalTradesAsync(symbol, limit, fromId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Old Trade Lookup (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Trade>> HistoricalTradesAsync(string symbol, int? limit, long? fromId, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/historicalTrades?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Trade>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Compressed/Aggregate Trades List
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AggTrade>> AggTradesAsync(string symbol, long? fromId, long? startTime, long? endTime, int? limit)
        {
            return AggTradesAsync(symbol, fromId, startTime, endTime, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Compressed/Aggregate Trades List
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Trade list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AggTrade>> AggTradesAsync(string symbol, long? fromId, long? startTime, long? endTime, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/aggTrades?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fromId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AggTrade>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Kline/Candlestick Data
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="interval">kline intervals</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Kline data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>> KlinesAsync(string symbol, Interval interval, long? startTime, long? endTime, int? limit)
        {
            return KlinesAsync(symbol, interval, startTime, endTime, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Kline/Candlestick Data
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="interval">kline intervals</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>Kline data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>> KlinesAsync(string symbol, Interval interval, long? startTime, long? endTime, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (interval == null)
                throw new System.ArgumentNullException("interval");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/klines?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("interval") + "=").Append(System.Uri.EscapeDataString(ConvertToString(interval, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// UIKlines
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="interval">kline intervals</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>UIKline data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>> UiKlinesAsync(string symbol, Interval2 interval, long? startTime, long? endTime, int? limit)
        {
            return UiKlinesAsync(symbol, interval, startTime, endTime, limit, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// UIKlines
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="interval">kline intervals</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <returns>UIKline data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>> UiKlinesAsync(string symbol, Interval2 interval, long? startTime, long? endTime, int? limit, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (interval == null)
                throw new System.ArgumentNullException("interval");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/uiKlines?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("interval") + "=").Append(System.Uri.EscapeDataString(ConvertToString(interval, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<long>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Current Average Price
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Average price</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response4> AvgPriceAsync(string symbol)
        {
            return AvgPriceAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Current Average Price
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Average price</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response4> AvgPriceAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/avgPrice?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 24hr Ticker Price Change Statistics
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Supported values: FULL or MINI.
        /// <br/>If none provided, the default is FULL</param>
        /// <returns>24hr ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Ticker> Hr24Async(string symbol, string symbols, string type)
        {
            return Hr24Async(symbol, symbols, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 24hr Ticker Price Change Statistics
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Supported values: FULL or MINI.
        /// <br/>If none provided, the default is FULL</param>
        /// <returns>24hr ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Ticker> Hr24Async(string symbol, string symbols, string type, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/ticker/24hr?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbols != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbols") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Ticker>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Symbol Price Ticker
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Price ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PriceTicker> PriceAsync(string symbol, string symbols)
        {
            return PriceAsync(symbol, symbols, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Symbol Price Ticker
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Price ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PriceTicker> PriceAsync(string symbol, string symbols, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/ticker/price?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbols != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbols") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PriceTicker>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Symbol Order Book Ticker
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Order book ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BookTicker> BookTickerAsync(string symbol, string symbols)
        {
            return BookTickerAsync(symbol, symbols, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Symbol Order Book Ticker
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Order book ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BookTicker> BookTickerAsync(string symbol, string symbols, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/ticker/bookTicker?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbols != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbols") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BookTicker>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Rolling window price change statistics
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="windowSize">Defaults to 1d if no parameter provided.
        /// <br/>Supported windowSize values:
        /// <br/>1m,2m....59m for minutes
        /// <br/>1h, 2h....23h - for hours
        /// <br/>1d...7d - for days.
        /// <br/>
        /// <br/>Units cannot be combined (e.g. 1d2h is not allowed)</param>
        /// <param name="type">Supported values: FULL or MINI.
        /// <br/>If none provided, the default is FULL</param>
        /// <returns>Rolling price ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response5> TickerAsync(string symbol, string symbols, string windowSize, string type)
        {
            return TickerAsync(symbol, symbols, windowSize, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rolling window price change statistics
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="windowSize">Defaults to 1d if no parameter provided.
        /// <br/>Supported windowSize values:
        /// <br/>1m,2m....59m for minutes
        /// <br/>1h, 2h....23h - for hours
        /// <br/>1d...7d - for days.
        /// <br/>
        /// <br/>Units cannot be combined (e.g. 1d2h is not allowed)</param>
        /// <param name="type">Supported values: FULL or MINI.
        /// <br/>If none provided, the default is FULL</param>
        /// <returns>Rolling price ticker</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response5> TickerAsync(string symbol, string symbols, string windowSize, string type, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/ticker?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbols != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbols") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (windowSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("windowSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(windowSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> TestAsync(string symbol, Side side, Type type, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature)
        {
            return TestAsync(symbol, side, type, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, strategyId, strategyType, stopPrice, trailingDelta, icebergQty, newOrderRespType, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> TestAsync(string symbol, Side side, Type type, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (side == null)
                throw new System.ArgumentNullException("side");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/order/test?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (timeInForce != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeInForce") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeInForce, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quoteOrderQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quoteOrderQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteOrderQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (price != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("price") + "=").Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (strategyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("strategyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strategyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (strategyType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("strategyType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strategyType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopPrice != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trailingDelta != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trailingDelta") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trailingDelta, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (icebergQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("icebergQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(icebergQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newOrderRespType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newOrderRespType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newOrderRespType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Order (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrderDetails> OrderGETAsync(string symbol, long? orderId, string origClientOrderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderGETAsync(symbol, orderId, origClientOrderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Order (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderDetails> OrderGETAsync(string symbol, long? orderId, string origClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order result</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrderResponseAck> OrderPOSTAsync(string symbol, Side side, Type type, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature)
        {
            return OrderPOSTAsync(symbol, side, type, timeInForce, quantity, quoteOrderQty, price, newClientOrderId, strategyId, strategyType, stopPrice, trailingDelta, icebergQty, newOrderRespType, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order result</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResponseAck> OrderPOSTAsync(string symbol, Side side, Type type, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (side == null)
                throw new System.ArgumentNullException("side");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (timeInForce != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeInForce") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeInForce, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quoteOrderQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quoteOrderQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteOrderQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (price != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("price") + "=").Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (strategyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("strategyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strategyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (strategyType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("strategyType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strategyType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopPrice != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trailingDelta != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trailingDelta") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trailingDelta, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (icebergQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("icebergQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(icebergQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newOrderRespType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newOrderRespType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newOrderRespType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResponseAck>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Order> OrderDELETEAsync(string symbol, long? orderId, string origClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderDELETEAsync(symbol, orderId, origClientOrderId, newClientOrderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Order> OrderDELETEAsync(string symbol, long? orderId, string origClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Order>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel an Existing Order and Send a New Order (Trade)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="cancelReplaceMode">- `STOP_ON_FAILURE` If the cancel request fails, the new order placement will not be attempted.
        /// <br/>- `ALLOW_FAILURES` If new order placement will be attempted even if cancel request fails.</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="cancelNewClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="cancelOrigClientOrderId">Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.</param>
        /// <param name="cancelOrderId">Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response6> CancelReplaceAsync(string symbol, Side side, Type type, string cancelReplaceMode, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string cancelNewClientOrderId, string cancelOrigClientOrderId, long? cancelOrderId, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature)
        {
            return CancelReplaceAsync(symbol, side, type, cancelReplaceMode, timeInForce, quantity, quoteOrderQty, price, cancelNewClientOrderId, cancelOrigClientOrderId, cancelOrderId, newClientOrderId, strategyId, strategyType, stopPrice, trailingDelta, icebergQty, newOrderRespType, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel an Existing Order and Send a New Order (Trade)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="type">Order type</param>
        /// <param name="cancelReplaceMode">- `STOP_ON_FAILURE` If the cancel request fails, the new order placement will not be attempted.
        /// <br/>- `ALLOW_FAILURES` If new order placement will be attempted even if cancel request fails.</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="quantity">Order quantity</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="cancelNewClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="cancelOrigClientOrderId">Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.</param>
        /// <param name="cancelOrderId">Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="strategyType">The value cannot be less than 1000000.</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="trailingDelta">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response6> CancelReplaceAsync(string symbol, Side side, Type type, string cancelReplaceMode, TimeInForce? timeInForce, double? quantity, double? quoteOrderQty, double? price, string cancelNewClientOrderId, string cancelOrigClientOrderId, long? cancelOrderId, string newClientOrderId, long? strategyId, long? strategyType, double? stopPrice, double? trailingDelta, double? icebergQty, NewOrderRespType? newOrderRespType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (side == null)
                throw new System.ArgumentNullException("side");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (cancelReplaceMode == null)
                throw new System.ArgumentNullException("cancelReplaceMode");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/order/cancelReplace?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("cancelReplaceMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cancelReplaceMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (timeInForce != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeInForce") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeInForce, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quantity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quoteOrderQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quoteOrderQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteOrderQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (price != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("price") + "=").Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cancelNewClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cancelNewClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cancelNewClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cancelOrigClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cancelOrigClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cancelOrigClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cancelOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cancelOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cancelOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (strategyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("strategyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strategyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (strategyType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("strategyType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strategyType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopPrice != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trailingDelta != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trailingDelta") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trailingDelta, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (icebergQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("icebergQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(icebergQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newOrderRespType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newOrderRespType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newOrderRespType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Current Open Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Current open orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderDetails>> OpenOrdersAllGETAsync(string symbol, long? recvWindow, long timestamp, string signature)
        {
            return OpenOrdersAllGETAsync(symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Current Open Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Current open orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderDetails>> OpenOrdersAllGETAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/openOrders?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrderDetails>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel all Open Orders on a Symbol (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> OpenOrdersAllDELETEAsync(string symbol, long? recvWindow, long timestamp, string signature)
        {
            return OpenOrdersAllDELETEAsync(symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel all Open Orders on a Symbol (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> OpenOrdersAllDELETEAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/openOrders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// All Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Current open orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderDetails>> AllOrdersAsync(string symbol, long? orderId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return AllOrdersAsync(symbol, orderId, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// All Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">Order id</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Current open orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderDetails>> AllOrdersAsync(string symbol, long? orderId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/allOrders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrderDetails>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// New OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="limitClientOrderId">A unique Id for the limit order</param>
        /// <param name="limitStrategyType">The value cannot be less than 1000000.</param>
        /// <param name="price">Order price</param>
        /// <param name="stopClientOrderId">A unique Id for the stop loss/stop loss limit leg</param>
        /// <param name="stopLimitPrice">If provided, stopLimitTimeInForce is required.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>New OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response7> OcoAsync(string symbol, string listClientOrderId, Side side, double quantity, string limitClientOrderId, long? limitStrategyId, long? limitStrategyType, double price, double? limitIcebergQty, double? trailingDelta, string stopClientOrderId, double stopPrice, long? stopStrategyId, long? stopStrategyType, double? stopLimitPrice, double? stopIcebergQty, StopLimitTimeInForce? stopLimitTimeInForce, NewOrderRespType2? newOrderRespType, long? recvWindow, long timestamp, string signature)
        {
            return OcoAsync(symbol, listClientOrderId, side, quantity, limitClientOrderId, limitStrategyId, limitStrategyType, price, limitIcebergQty, trailingDelta, stopClientOrderId, stopPrice, stopStrategyId, stopStrategyType, stopLimitPrice, stopIcebergQty, stopLimitTimeInForce, newOrderRespType, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// New OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="limitClientOrderId">A unique Id for the limit order</param>
        /// <param name="limitStrategyType">The value cannot be less than 1000000.</param>
        /// <param name="price">Order price</param>
        /// <param name="stopClientOrderId">A unique Id for the stop loss/stop loss limit leg</param>
        /// <param name="stopLimitPrice">If provided, stopLimitTimeInForce is required.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>New OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response7> OcoAsync(string symbol, string listClientOrderId, Side side, double quantity, string limitClientOrderId, long? limitStrategyId, long? limitStrategyType, double price, double? limitIcebergQty, double? trailingDelta, string stopClientOrderId, double stopPrice, long? stopStrategyId, long? stopStrategyType, double? stopLimitPrice, double? stopIcebergQty, StopLimitTimeInForce? stopLimitTimeInForce, NewOrderRespType2? newOrderRespType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (side == null)
                throw new System.ArgumentNullException("side");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (price == null)
                throw new System.ArgumentNullException("price");

            if (stopPrice == null)
                throw new System.ArgumentNullException("stopPrice");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/order/oco?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (listClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limitClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limitClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limitClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limitStrategyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limitStrategyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limitStrategyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limitStrategyType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limitStrategyType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limitStrategyType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("price") + "=").Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limitIcebergQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limitIcebergQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limitIcebergQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trailingDelta != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trailingDelta") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trailingDelta, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("stopPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (stopStrategyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopStrategyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopStrategyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopStrategyType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopStrategyType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopStrategyType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopLimitPrice != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopLimitPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopLimitPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopIcebergQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopIcebergQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopIcebergQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopLimitTimeInForce != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopLimitTimeInForce") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopLimitTimeInForce, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newOrderRespType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newOrderRespType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newOrderRespType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query OCO (USER_DATA)
        /// </summary>
        /// <param name="orderListId">Order list id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response8> OrderListGETAsync(long? orderListId, string origClientOrderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderListGETAsync(orderListId, origClientOrderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query OCO (USER_DATA)
        /// </summary>
        /// <param name="orderListId">Order list id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response8> OrderListGETAsync(long? orderListId, string origClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/orderList?");
            if (orderListId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderListId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderListId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Report on deleted OCO</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OcoOrder> OrderListDELETEAsync(string symbol, long? orderListId, string listClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderListDELETEAsync(symbol, orderListId, listClientOrderId, newClientOrderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Report on deleted OCO</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OcoOrder> OrderListDELETEAsync(string symbol, long? orderListId, string listClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/orderList?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderListId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderListId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderListId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (listClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OcoOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query all OCO (USER_DATA)
        /// </summary>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> AllOrderListAsync(long? fromId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return AllOrderListAsync(fromId, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query all OCO (USER_DATA)
        /// </summary>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> AllOrderListAsync(long? fromId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/allOrderList?");
            if (fromId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous2>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Open OCO (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous3>> OpenOrderListAsync(long? recvWindow, long timestamp, string signature)
        {
            return OpenOrderListAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Open OCO (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous3>> OpenOrderListAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/openOrderList?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous3>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Account Information (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Account> AccountGETAsync(long? recvWindow, long timestamp, string signature)
        {
            return AccountGETAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account Information (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Account> AccountGETAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/account?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Account>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Account Trade List (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">This can only be used in combination with symbol.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of trades</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MyTrade>> MyTradesAsync(string symbol, long? orderId, long? startTime, long? endTime, long? fromId, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return MyTradesAsync(symbol, orderId, startTime, endTime, fromId, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account Trade List (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="orderId">This can only be used in combination with symbol.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of trades</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MyTrade>> MyTradesAsync(string symbol, long? orderId, long? startTime, long? endTime, long? fromId, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/myTrades?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MyTrade>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Current Order Count Usage (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order rate limits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous4>> OrderAllAsync(long? recvWindow, long timestamp, string signature)
        {
            return OrderAllAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Current Order Count Usage (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order rate limits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous4>> OrderAllAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/rateLimit/order?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous4>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cross Margin Account Transfer (MARGIN)
        /// </summary>
        /// <param name="type">* `1` - transfer from main account to margin account
        /// <br/>* `2` - transfer from margin account to main account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Transaction> TransferPOSTAsync(string asset, double amount, Type2 type, long? recvWindow, long timestamp, string signature)
        {
            return TransferPOSTAsync(asset, amount, type, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross Margin Account Transfer (MARGIN)
        /// </summary>
        /// <param name="type">* `1` - transfer from main account to margin account
        /// <br/>* `2` - transfer from margin account to main account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Transaction> TransferPOSTAsync(string asset, double amount, Type2 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Transaction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Cross Margin Transfer History (USER_DATA)
        /// </summary>
        /// <param name="type">Transfer Type</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin account transfer history, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response9> TransferGETAsync(string asset, Type3? type, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature)
        {
            return TransferGETAsync(asset, type, startTime, endTime, current, size, archived, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Cross Margin Transfer History (USER_DATA)
        /// </summary>
        /// <param name="type">Transfer Type</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin account transfer history, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response9> TransferGETAsync(string asset, Type3? type, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/transfer?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (archived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("archived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Account Borrow (MARGIN)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Transaction> LoanPOSTAsync(string asset, IsIsolated? isIsolated, string symbol, double amount, long? recvWindow, long timestamp, string signature)
        {
            return LoanPOSTAsync(asset, isIsolated, symbol, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Borrow (MARGIN)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Transaction> LoanPOSTAsync(string asset, IsIsolated? isIsolated, string symbol, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/loan?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Transaction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Loan Record (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="txId">the tranId in  `POST /sapi/v1/margin/loan`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response10> LoanGETAsync(string asset, string isolatedSymbol, long? txId, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature)
        {
            return LoanGETAsync(asset, isolatedSymbol, txId, startTime, endTime, current, size, archived, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Loan Record (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="txId">the tranId in  `POST /sapi/v1/margin/loan`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response10> LoanGETAsync(string asset, string isolatedSymbol, long? txId, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/loan?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isolatedSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isolatedSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isolatedSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (txId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("txId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(txId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (archived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("archived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Account Repay (MARGIN)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Transaction> RepayPOSTAsync(string asset, IsIsolated? isIsolated, string symbol, double amount, long? recvWindow, long timestamp, string signature)
        {
            return RepayPOSTAsync(asset, isIsolated, symbol, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Repay (MARGIN)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Transaction> RepayPOSTAsync(string asset, IsIsolated? isIsolated, string symbol, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/repay?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Transaction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Repay Record (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="txId">the tranId in  `POST /sapi/v1/margin/repay`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Load records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response11> RepayGETAsync(string asset, string isolatedSymbol, long? txId, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature)
        {
            return RepayGETAsync(asset, isolatedSymbol, txId, startTime, endTime, current, size, archived, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Repay Record (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="txId">the tranId in  `POST /sapi/v1/margin/repay`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Load records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response11> RepayGETAsync(string asset, string isolatedSymbol, long? txId, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/repay?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isolatedSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isolatedSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isolatedSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (txId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("txId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(txId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (archived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("archived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin Asset (MARKET_DATA)
        /// </summary>
        /// <returns>Asset details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response12> AssetAsync(string asset)
        {
            return AssetAsync(asset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Asset (MARKET_DATA)
        /// </summary>
        /// <returns>Asset details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response12> AssetAsync(string asset, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/asset?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Cross Margin Pair (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Margin pair details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response13> PairAsync(string symbol)
        {
            return PairAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Cross Margin Pair (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Margin pair details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response13> PairAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/pair?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Margin Assets (MARKET_DATA)
        /// </summary>
        /// <returns>Assets details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous5>> AllAssetsAsync()
        {
            return AllAssetsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Margin Assets (MARKET_DATA)
        /// </summary>
        /// <returns>Assets details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous5>> AllAssetsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/allAssets");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous5>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Cross Margin Pairs (MARKET_DATA)
        /// </summary>
        /// <returns>Margin pairs</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> AllPairsAsync()
        {
            return AllPairsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Cross Margin Pairs (MARKET_DATA)
        /// </summary>
        /// <returns>Margin pairs</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> AllPairsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/allPairs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous6>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin PriceIndex (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Price index</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response14> PriceIndexAsync(string symbol)
        {
            return PriceIndexAsync(symbol, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin PriceIndex (MARKET_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <returns>Price index</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response14> PriceIndexAsync(string symbol, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/priceIndex?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin Account's Order (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Interest History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarginOrderDetail> OrderGET2Async(string symbol, IsIsolated? isIsolated, long? orderId, string origClientOrderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderGET2Async(symbol, isIsolated, orderId, origClientOrderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's Order (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Interest History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarginOrderDetail> OrderGET2Async(string symbol, IsIsolated? isIsolated, long? orderId, string origClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarginOrderDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Account New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="type">Order type</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="sideEffectType">Default `NO_SIDE_EFFECT`</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin order info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarginOrderResponseAck> OrderPOST2Async(string symbol, IsIsolated? isIsolated, Side side, Type type, double quantity, double? quoteOrderQty, double? price, double? stopPrice, string newClientOrderId, double? icebergQty, NewOrderRespType2? newOrderRespType, SideEffectType? sideEffectType, TimeInForce? timeInForce, long? recvWindow, long timestamp, string signature)
        {
            return OrderPOST2Async(symbol, isIsolated, side, type, quantity, quoteOrderQty, price, stopPrice, newClientOrderId, icebergQty, newOrderRespType, sideEffectType, timeInForce, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="type">Order type</param>
        /// <param name="quoteOrderQty">Quote quantity</param>
        /// <param name="price">Order price</param>
        /// <param name="stopPrice">Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="icebergQty">Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="sideEffectType">Default `NO_SIDE_EFFECT`</param>
        /// <param name="timeInForce">Order time in force</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin order info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarginOrderResponseAck> OrderPOST2Async(string symbol, IsIsolated? isIsolated, Side side, Type type, double quantity, double? quoteOrderQty, double? price, double? stopPrice, string newClientOrderId, double? icebergQty, NewOrderRespType2? newOrderRespType, SideEffectType? sideEffectType, TimeInForce? timeInForce, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (side == null)
                throw new System.ArgumentNullException("side");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (quoteOrderQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quoteOrderQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteOrderQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (price != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("price") + "=").Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopPrice != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (icebergQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("icebergQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(icebergQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newOrderRespType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newOrderRespType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newOrderRespType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sideEffectType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sideEffectType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sideEffectType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeInForce != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timeInForce") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timeInForce, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarginOrderResponseAck>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Account Cancel Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled margin order details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarginOrder> OrderDELETE2Async(string symbol, IsIsolated? isIsolated, long? orderId, string origClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderDELETE2Async(symbol, isIsolated, orderId, origClientOrderId, newClientOrderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Cancel Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled margin order details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarginOrder> OrderDELETE2Async(string symbol, IsIsolated? isIsolated, long? orderId, string origClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarginOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Interest History (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Interest History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response15> InterestHistoryAsync(string asset, string isolatedSymbol, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature)
        {
            return InterestHistoryAsync(asset, isolatedSymbol, startTime, endTime, current, size, archived, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Interest History (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="archived">Default: false. Set to true for archived data from 6 months ago</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Interest History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response15> InterestHistoryAsync(string asset, string isolatedSymbol, long? startTime, long? endTime, int? current, int? size, string archived, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/interestHistory?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isolatedSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isolatedSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isolatedSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (archived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("archived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(archived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Force Liquidation Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Force Liquidation History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response16> ForceLiquidationRecAsync(long? startTime, long? endTime, string isolatedSymbol, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return ForceLiquidationRecAsync(startTime, endTime, isolatedSymbol, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Force Liquidation Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Force Liquidation History, response in descending order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response16> ForceLiquidationRecAsync(long? startTime, long? endTime, string isolatedSymbol, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/forceLiquidationRec?");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isolatedSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isolatedSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isolatedSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Cross Margin Account Details (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response17> AccountGET2Async(long? recvWindow, long timestamp, string signature)
        {
            return AccountGET2Async(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Cross Margin Account Details (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response17> AccountGET2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/account?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin Account's Open Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin open orders list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginOrderDetail>> OpenOrdersAllGET2Async(string symbol, IsIsolated? isIsolated, long? recvWindow, long timestamp, string signature)
        {
            return OpenOrdersAllGET2Async(symbol, isIsolated, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's Open Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin open orders list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginOrderDetail>> OpenOrdersAllGET2Async(string symbol, IsIsolated? isIsolated, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/openOrders?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MarginOrderDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Account Cancel all Open Orders on a Symbol (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled margin orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> OpenOrdersAllDELETE2Async(string symbol, IsIsolated? isIsolated, long? recvWindow, long timestamp, string signature)
        {
            return OpenOrdersAllDELETE2Async(symbol, isIsolated, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Cancel all Open Orders on a Symbol (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled margin orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> OpenOrdersAllDELETE2Async(string symbol, IsIsolated? isIsolated, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/openOrders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous7>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin Account's All Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin order list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginOrderDetail>> AllOrders2Async(string symbol, IsIsolated? isIsolated, long? orderId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return AllOrders2Async(symbol, isIsolated, orderId, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's All Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderId">Order id</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin order list</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginOrderDetail>> AllOrders2Async(string symbol, IsIsolated? isIsolated, long? orderId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/allOrders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MarginOrderDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Account New OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="limitClientOrderId">A unique Id for the limit order</param>
        /// <param name="price">Order price</param>
        /// <param name="stopClientOrderId">A unique Id for the stop loss/stop loss limit leg</param>
        /// <param name="stopLimitPrice">If provided, stopLimitTimeInForce is required.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="sideEffectType">Default `NO_SIDE_EFFECT`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>New Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response18> Oco2Async(string symbol, IsIsolated? isIsolated, string listClientOrderId, Side side, double quantity, string limitClientOrderId, double price, double? limitIcebergQty, string stopClientOrderId, double stopPrice, double? stopLimitPrice, double? stopIcebergQty, StopLimitTimeInForce? stopLimitTimeInForce, NewOrderRespType2? newOrderRespType, SideEffectType? sideEffectType, long? recvWindow, long timestamp, string signature)
        {
            return Oco2Async(symbol, isIsolated, listClientOrderId, side, quantity, limitClientOrderId, price, limitIcebergQty, stopClientOrderId, stopPrice, stopLimitPrice, stopIcebergQty, stopLimitTimeInForce, newOrderRespType, sideEffectType, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account New OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="limitClientOrderId">A unique Id for the limit order</param>
        /// <param name="price">Order price</param>
        /// <param name="stopClientOrderId">A unique Id for the stop loss/stop loss limit leg</param>
        /// <param name="stopLimitPrice">If provided, stopLimitTimeInForce is required.</param>
        /// <param name="newOrderRespType">Set the response JSON.</param>
        /// <param name="sideEffectType">Default `NO_SIDE_EFFECT`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>New Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response18> Oco2Async(string symbol, IsIsolated? isIsolated, string listClientOrderId, Side side, double quantity, string limitClientOrderId, double price, double? limitIcebergQty, string stopClientOrderId, double stopPrice, double? stopLimitPrice, double? stopIcebergQty, StopLimitTimeInForce? stopLimitTimeInForce, NewOrderRespType2? newOrderRespType, SideEffectType? sideEffectType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (side == null)
                throw new System.ArgumentNullException("side");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (price == null)
                throw new System.ArgumentNullException("price");

            if (stopPrice == null)
                throw new System.ArgumentNullException("stopPrice");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/order/oco?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (listClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limitClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limitClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limitClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("price") + "=").Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limitIcebergQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limitIcebergQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limitIcebergQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("stopPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (stopLimitPrice != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopLimitPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopLimitPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopIcebergQty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopIcebergQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopIcebergQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stopLimitTimeInForce != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stopLimitTimeInForce") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stopLimitTimeInForce, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newOrderRespType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newOrderRespType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newOrderRespType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sideEffectType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sideEffectType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sideEffectType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin Account's OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response19> OrderListGET2Async(IsIsolated? isIsolated, string symbol, long? orderListId, string origClientOrderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderListGET2Async(isIsolated, symbol, orderListId, origClientOrderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="origClientOrderId">Order id from client</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response19> OrderListGET2Async(IsIsolated? isIsolated, string symbol, long? orderListId, string origClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/orderList?");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderListId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderListId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderListId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Account Cancel OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarginOcoOrder> OrderListDELETE2Async(string symbol, IsIsolated? isIsolated, long? orderListId, string listClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderListDELETE2Async(symbol, isIsolated, orderListId, listClientOrderId, newClientOrderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Account Cancel OCO (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="orderListId">Order list id</param>
        /// <param name="listClientOrderId">A unique Id for the entire orderList</param>
        /// <param name="newClientOrderId">Used to uniquely identify this cancel. Automatically generated by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin OCO details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarginOcoOrder> OrderListDELETE2Async(string symbol, IsIsolated? isIsolated, long? orderListId, string listClientOrderId, string newClientOrderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/orderList?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderListId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderListId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderListId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (listClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (newClientOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("newClientOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newClientOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarginOcoOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin Account's all OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="fromId">If supplied, neither `startTime` or `endTime` can be provided</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default Value: 500; Max Value: 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of Margin OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> AllOrderList2Async(IsIsolated? isIsolated, string symbol, string fromId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return AllOrderList2Async(isIsolated, symbol, fromId, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's all OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="fromId">If supplied, neither `startTime` or `endTime` can be provided</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default Value: 500; Max Value: 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of Margin OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> AllOrderList2Async(IsIsolated? isIsolated, string symbol, string fromId, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/allOrderList?");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous8>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin Account's Open OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of Open Margin OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous9>> OpenOrderList2Async(IsIsolated? isIsolated, string symbol, long? recvWindow, long timestamp, string signature)
        {
            return OpenOrderList2Async(isIsolated, symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's Open OCO (USER_DATA)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of Open Margin OCO orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous9>> OpenOrderList2Async(IsIsolated? isIsolated, string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/openOrderList?");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous9>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Margin Account's Trade List (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of margin trades</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginTrade>> MyTrades2Async(string symbol, IsIsolated? isIsolated, long? startTime, long? endTime, long? fromId, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return MyTrades2Async(symbol, isIsolated, startTime, endTime, fromId, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Margin Account's Trade List (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="fromId">Trade id to fetch from. Default gets most recent trades.</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of margin trades</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MarginTrade>> MyTrades2Async(string symbol, IsIsolated? isIsolated, long? startTime, long? endTime, long? fromId, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/myTrades?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MarginTrade>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Max Borrow (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Details on max borrow amount</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response20> MaxBorrowableAsync(string asset, string isolatedSymbol, long? recvWindow, long timestamp, string signature)
        {
            return MaxBorrowableAsync(asset, isolatedSymbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Max Borrow (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Details on max borrow amount</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response20> MaxBorrowableAsync(string asset, string isolatedSymbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/maxBorrowable?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isolatedSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isolatedSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isolatedSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Max Transfer-Out Amount (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Details on max transferable amount</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response21> MaxTransferableAsync(string asset, string isolatedSymbol, long? recvWindow, long timestamp, string signature)
        {
            return MaxTransferableAsync(asset, isolatedSymbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Max Transfer-Out Amount (USER_DATA)
        /// </summary>
        /// <param name="isolatedSymbol">Isolated symbol</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Details on max transferable amount</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response21> MaxTransferableAsync(string asset, string isolatedSymbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/maxTransferable?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isolatedSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isolatedSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isolatedSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Summary of Margin account (USER_DATA)
        /// </summary>
        /// <param name="email">Email Address</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Summary of Margin Account</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response22> TradeCoeffAsync(string email, long? recvWindow, long timestamp, string signature)
        {
            return TradeCoeffAsync(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Summary of Margin account (USER_DATA)
        /// </summary>
        /// <param name="email">Email Address</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Summary of Margin Account</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response22> TradeCoeffAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/tradeCoeff?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Isolated Margin Transfer History (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarginTransferDetails> TransferGET2Async(string asset, string symbol, TransFrom? transFrom, TransTo? transTo, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return TransferGET2Async(asset, symbol, transFrom, transTo, startTime, endTime, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Isolated Margin Transfer History (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarginTransferDetails> TransferGET2Async(string asset, string symbol, TransFrom? transFrom, TransTo? transTo, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolated/transfer?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (transFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (transTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarginTransferDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Isolated Margin Account Transfer (MARGIN)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> TransferPOST2Async(string asset, string symbol, TransFrom2 transFrom, TransTo2 transTo, double amount, long? recvWindow, long timestamp, string signature)
        {
            return TransferPOST2Async(asset, symbol, transFrom, transTo, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Isolated Margin Account Transfer (MARGIN)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> TransferPOST2Async(string asset, string symbol, TransFrom2 transFrom, TransTo2 transTo, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (transFrom == null)
                throw new System.ArgumentNullException("transFrom");

            if (transTo == null)
                throw new System.ArgumentNullException("transTo");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolated/transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("transFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("transTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Isolated Margin Account Info (USER_DATA)
        /// </summary>
        /// <param name="symbols">Max 5 symbols can be sent; separated by ','</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account Info when "symbols" is not sent</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IsolatedMarginAccountInfo> AccountGET3Async(string symbols, long? recvWindow, long timestamp, string signature)
        {
            return AccountGET3Async(symbols, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Isolated Margin Account Info (USER_DATA)
        /// </summary>
        /// <param name="symbols">Max 5 symbols can be sent; separated by ','</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account Info when "symbols" is not sent</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IsolatedMarginAccountInfo> AccountGET3Async(string symbols, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolated/account?");
            if (symbols != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbols") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbols, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IsolatedMarginAccountInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable Isolated Margin Account (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response23> AccountDELETEAsync(string symbol, long? recvWindow, long timestamp, string signature)
        {
            return AccountDELETEAsync(symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable Isolated Margin Account (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response23> AccountDELETEAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolated/account?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable Isolated Margin Account (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response24> AccountPOSTAsync(string symbol, long? recvWindow, long timestamp, string signature)
        {
            return AccountPOSTAsync(symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Isolated Margin Account (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Account status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response24> AccountPOSTAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolated/account?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Enabled Isolated Margin Account Limit (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Number of enabled Isolated Margin Account and its limit</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response25> AccountLimitAsync(long? recvWindow, long timestamp, string signature)
        {
            return AccountLimitAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Enabled Isolated Margin Account Limit (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Number of enabled Isolated Margin Account and its limit</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response25> AccountLimitAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolated/accountLimit?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Isolated Margin Symbol (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Symbol</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response26> Pair2Async(string symbol, long? recvWindow, long timestamp, string signature)
        {
            return Pair2Async(symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Isolated Margin Symbol (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Symbol</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response26> Pair2Async(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolated/pair?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Isolated Margin Symbol(USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>All Isolated Margin Symbols</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous10>> AllPairs2Async(long? recvWindow, long timestamp, string signature)
        {
            return AllPairs2Async(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Isolated Margin Symbol(USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>All Isolated Margin Symbols</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous10>> AllPairs2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolated/allPairs?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous10>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
        /// </summary>
        /// <param name="spotBNBBurn">Determines whether to use BNB to pay for trading fees on SPOT</param>
        /// <param name="interestBNBBurn">Determines whether to use BNB to pay for margin loan's interest</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on BNB to pay for trading fees</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BnbBurnStatus> BnbBurnPOSTAsync(SpotBNBBurn? spotBNBBurn, InterestBNBBurn? interestBNBBurn, long? recvWindow, long timestamp, string signature)
        {
            return BnbBurnPOSTAsync(spotBNBBurn, interestBNBBurn, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
        /// </summary>
        /// <param name="spotBNBBurn">Determines whether to use BNB to pay for trading fees on SPOT</param>
        /// <param name="interestBNBBurn">Determines whether to use BNB to pay for margin loan's interest</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on BNB to pay for trading fees</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BnbBurnStatus> BnbBurnPOSTAsync(SpotBNBBurn? spotBNBBurn, InterestBNBBurn? interestBNBBurn, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bnbBurn?");
            if (spotBNBBurn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("spotBNBBurn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(spotBNBBurn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (interestBNBBurn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("interestBNBBurn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(interestBNBBurn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BnbBurnStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get All Isolated Margin Symbol(USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on BNB to pay for trading fees</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BnbBurnStatus> BnbBurnGETAsync(long? recvWindow, long timestamp, string signature)
        {
            return BnbBurnGETAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get All Isolated Margin Symbol(USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on BNB to pay for trading fees</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BnbBurnStatus> BnbBurnGETAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bnbBurn?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BnbBurnStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Interest Rate History (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin Interest Rate History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> InterestRateHistoryAsync(string asset, int? vipLevel, long? startTime, long? endTime, long? recvWindow, long timestamp, string signature)
        {
            return InterestRateHistoryAsync(asset, vipLevel, startTime, endTime, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Interest Rate History (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin Interest Rate History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> InterestRateHistoryAsync(string asset, int? vipLevel, long? startTime, long? endTime, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/interestRateHistory?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (vipLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vipLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vipLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous11>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Cross Margin Fee Data (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross Margin Fee Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> CrossMarginDataAsync(int? vipLevel, string coin, long? recvWindow, long timestamp, string signature)
        {
            return CrossMarginDataAsync(vipLevel, coin, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Cross Margin Fee Data (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross Margin Fee Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> CrossMarginDataAsync(int? vipLevel, string coin, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/crossMarginData?");
            if (vipLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vipLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vipLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (coin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous12>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Isolated Margin Fee Data (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Fee Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous13>> IsolatedMarginDataAsync(int? vipLevel, string symbol, long? recvWindow, long timestamp, string signature)
        {
            return IsolatedMarginDataAsync(vipLevel, symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Isolated Margin Fee Data (USER_DATA)
        /// </summary>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Fee Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous13>> IsolatedMarginDataAsync(int? vipLevel, string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolatedMarginData?");
            if (vipLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vipLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vipLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous13>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Isolated Margin Tier Data (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="tier">All margin tier data will be returned if tier is omitted</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Tier Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous14>> IsolatedMarginTierAsync(string symbol, string tier, long? recvWindow, long timestamp, string signature)
        {
            return IsolatedMarginTierAsync(symbol, tier, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Isolated Margin Tier Data (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="tier">All margin tier data will be returned if tier is omitted</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Isolated Margin Tier Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous14>> IsolatedMarginTierAsync(string symbol, string tier, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/isolatedMarginTier?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (tier != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tier") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous14>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Current Margin Order Count Usage (TRADE)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">isolated symbol, mandatory for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Usage.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous15>> OrderAll2Async(string isIsolated, string symbol, long? recvWindow, long timestamp, string signature)
        {
            return OrderAll2Async(isIsolated, symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Current Margin Order Count Usage (TRADE)
        /// </summary>
        /// <param name="isIsolated">* `TRUE` - For isolated margin
        /// <br/>* `FALSE` - Default, not for isolated margin</param>
        /// <param name="symbol">isolated symbol, mandatory for isolated margin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Usage.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous15>> OrderAll2Async(string isIsolated, string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/rateLimit/order?");
            if (isIsolated != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isIsolated") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isIsolated, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous15>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Dustlog (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust Log</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response27> DribbletAsync(long? startTime, long? endTime, long? recvWindow, long timestamp, string signature)
        {
            return DribbletAsync(startTime, endTime, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Dustlog (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust Log</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response27> DribbletAsync(long? startTime, long? endTime, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/margin/dribblet?");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// System Status (System)
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response28> StatusAsync()
        {
            return StatusAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// System Status (System)
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response28> StatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/system/status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// All Coins' Information (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>All coins details information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous16>> GetallAsync(long? recvWindow, long timestamp, string signature)
        {
            return GetallAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// All Coins' Information (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>All coins details information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous16>> GetallAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/capital/config/getall?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous16>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Daily Account Snapshot (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account Snapshot</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SnapshotSpot> AccountSnapshotAsync(Type4 type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return AccountSnapshotAsync(type, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Daily Account Snapshot (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account Snapshot</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SnapshotSpot> AccountSnapshotAsync(Type4 type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/accountSnapshot?");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SnapshotSpot>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disable Fast Withdraw Switch (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> DisableFastWithdrawSwitchAsync(long? recvWindow, long timestamp, string signature)
        {
            return DisableFastWithdrawSwitchAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable Fast Withdraw Switch (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> DisableFastWithdrawSwitchAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/account/disableFastWithdrawSwitch?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable Fast Withdraw Switch (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> EnableFastWithdrawSwitchAsync(long? recvWindow, long timestamp, string signature)
        {
            return EnableFastWithdrawSwitchAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Fast Withdraw Switch (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> EnableFastWithdrawSwitchAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/account/enableFastWithdrawSwitch?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Withdraw (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="withdrawOrderId">Client id for withdraw</param>
        /// <param name="network">Get the value from `GET /sapi/v1/capital/config/getall`</param>
        /// <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
        /// <param name="transactionFeeFlag">When making internal transfer
        /// <br/>- `true` -&gt;  returning the fee to the destination account;
        /// <br/>- `false` -&gt; returning the fee back to the departure account.</param>
        /// <param name="walletType">The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transafer Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response29> ApplyAsync(string coin, string withdrawOrderId, string network, string address, string addressTag, double amount, bool? transactionFeeFlag, string name, int? walletType, long? recvWindow, long timestamp, string signature)
        {
            return ApplyAsync(coin, withdrawOrderId, network, address, addressTag, amount, transactionFeeFlag, name, walletType, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Withdraw (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="withdrawOrderId">Client id for withdraw</param>
        /// <param name="network">Get the value from `GET /sapi/v1/capital/config/getall`</param>
        /// <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
        /// <param name="transactionFeeFlag">When making internal transfer
        /// <br/>- `true` -&gt;  returning the fee to the destination account;
        /// <br/>- `false` -&gt; returning the fee back to the departure account.</param>
        /// <param name="walletType">The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transafer Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response29> ApplyAsync(string coin, string withdrawOrderId, string network, string address, string addressTag, double amount, bool? transactionFeeFlag, string name, int? walletType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (coin == null)
                throw new System.ArgumentNullException("coin");

            if (address == null)
                throw new System.ArgumentNullException("address");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/capital/withdraw/apply?");
            urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (withdrawOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withdrawOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withdrawOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (network != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("network") + "=").Append(System.Uri.EscapeDataString(ConvertToString(network, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (addressTag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("addressTag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(addressTag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (transactionFeeFlag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transactionFeeFlag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transactionFeeFlag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (walletType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("walletType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(walletType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deposit History（supporting network） (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="status">* `0` - pending
        /// <br/>* `6` - credited but cannot withdraw
        /// <br/>* `1` - success</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of deposits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous17>> HisrecAsync(string coin, Status? status, long? startTime, long? endTime, int? offset, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return HisrecAsync(coin, status, startTime, endTime, offset, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deposit History（supporting network） (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="status">* `0` - pending
        /// <br/>* `6` - credited but cannot withdraw
        /// <br/>* `1` - success</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of deposits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous17>> HisrecAsync(string coin, Status? status, long? startTime, long? endTime, int? offset, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/capital/deposit/hisrec?");
            if (coin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous17>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Withdraw History (supporting network) (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="status">* `0` - Email Sent
        /// <br/>* `1` - Cancelled
        /// <br/>* `2` - Awaiting Approval
        /// <br/>* `3` - Rejected
        /// <br/>* `4` - Processing
        /// <br/>* `5` - Failure
        /// <br/>* `6` - Completed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of withdraw history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous18>> HistoryAllAsync(string coin, string withdrawOrderId, Status2? status, long? startTime, long? endTime, int? offset, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return HistoryAllAsync(coin, withdrawOrderId, status, startTime, endTime, offset, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Withdraw History (supporting network) (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="status">* `0` - Email Sent
        /// <br/>* `1` - Cancelled
        /// <br/>* `2` - Awaiting Approval
        /// <br/>* `3` - Rejected
        /// <br/>* `4` - Processing
        /// <br/>* `5` - Failure
        /// <br/>* `6` - Completed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of withdraw history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous18>> HistoryAllAsync(string coin, string withdrawOrderId, Status2? status, long? startTime, long? endTime, int? offset, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/capital/withdraw/history?");
            if (coin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withdrawOrderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withdrawOrderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withdrawOrderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous18>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deposit Address (supporting network) (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Deposit address info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response30> AddressAsync(string coin, string network, long? recvWindow, long timestamp, string signature)
        {
            return AddressAsync(coin, network, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deposit Address (supporting network) (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Deposit address info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response30> AddressAsync(string coin, string network, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (coin == null)
                throw new System.ArgumentNullException("coin");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/capital/deposit/address?");
            urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (network != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("network") + "=").Append(System.Uri.EscapeDataString(ConvertToString(network, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Account Status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response31> Status2Async(long? recvWindow, long timestamp, string signature)
        {
            return Status2Async(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account Status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response31> Status2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/account/status?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Account API Trading Status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account API trading status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response32> ApiTradingStatusAsync(long? recvWindow, long timestamp, string signature)
        {
            return ApiTradingStatusAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account API Trading Status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account API trading status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response32> ApiTradingStatusAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/account/apiTradingStatus?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response32>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// DustLog(USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust log records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response33> Dribblet2Async(long? startTime, long? endTime, long? recvWindow, long timestamp, string signature)
        {
            return Dribblet2Async(startTime, endTime, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// DustLog(USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust log records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response33> Dribblet2Async(long? startTime, long? endTime, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/dribblet?");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response33>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Assets That Can Be Converted Into BNB (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account assets available to be converted to BNB</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response34> DustBtcAsync(long? recvWindow, long timestamp, string signature)
        {
            return DustBtcAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Assets That Can Be Converted Into BNB (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Account assets available to be converted to BNB</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response34> DustBtcAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/dust-btc?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response34>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Dust Transfer (USER_DATA)
        /// </summary>
        /// <param name="asset">The asset being converted. For example, asset=BTC&amp;asset=USDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust log records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response35> DustAsync(System.Collections.Generic.IEnumerable<string> asset, long? recvWindow, long timestamp, string signature)
        {
            return DustAsync(asset, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dust Transfer (USER_DATA)
        /// </summary>
        /// <param name="asset">The asset being converted. For example, asset=BTC&amp;asset=USDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Dust log records</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response35> DustAsync(System.Collections.Generic.IEnumerable<string> asset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/dust?");
            foreach (var item_ in asset) { urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response35>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Asset Dividend Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Records of asset devidend</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response36> AssetDividendAsync(string asset, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return AssetDividendAsync(asset, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Asset Dividend Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Records of asset devidend</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response36> AssetDividendAsync(string asset, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/assetDividend?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response36>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Asset Detail (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset detail</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response37> AssetDetailAsync(string asset, long? recvWindow, long timestamp, string signature)
        {
            return AssetDetailAsync(asset, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Asset Detail (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset detail</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response37> AssetDetailAsync(string asset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/assetDetail?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response37>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Trade Fee (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Trade fee info per symbol</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous19>> TradeFeeAsync(string symbol, long? recvWindow, long timestamp, string signature)
        {
            return TradeFeeAsync(symbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Trade Fee (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Trade fee info per symbol</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous19>> TradeFeeAsync(string symbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/tradeFee?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous19>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query User Universal Transfer History (USER_DATA)
        /// </summary>
        /// <param name="type">Universal transfer type</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="fromSymbol">Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="toSymbol">Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Universal transfer history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response38> TransferGET3Async(Type5 type, long? startTime, long? endTime, int? current, int? size, string fromSymbol, string toSymbol, long? recvWindow, long timestamp, string signature)
        {
            return TransferGET3Async(type, startTime, endTime, current, size, fromSymbol, toSymbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query User Universal Transfer History (USER_DATA)
        /// </summary>
        /// <param name="type">Universal transfer type</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="fromSymbol">Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="toSymbol">Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Universal transfer history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response38> TransferGET3Async(Type5 type, long? startTime, long? endTime, int? current, int? size, string fromSymbol, string toSymbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response38>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// User Universal Transfer (USER_DATA)
        /// </summary>
        /// <param name="type">Universal transfer type</param>
        /// <param name="fromSymbol">Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="toSymbol">Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response39> TransferPOST3Async(Type5 type, string asset, double amount, string fromSymbol, string toSymbol, long? recvWindow, long timestamp, string signature)
        {
            return TransferPOST3Async(type, asset, amount, fromSymbol, toSymbol, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// User Universal Transfer (USER_DATA)
        /// </summary>
        /// <param name="type">Universal transfer type</param>
        /// <param name="fromSymbol">Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="toSymbol">Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response39> TransferPOST3Async(Type5 type, string asset, double amount, string fromSymbol, string toSymbol, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fromSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toSymbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toSymbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toSymbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response39>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Funding Wallet (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Funding asset detail</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous20>> GetFundingAssetAsync(string asset, NeedBtcValuation? needBtcValuation, long? recvWindow, long timestamp, string signature)
        {
            return GetFundingAssetAsync(asset, needBtcValuation, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Funding Wallet (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Funding asset detail</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous20>> GetFundingAssetAsync(string asset, NeedBtcValuation? needBtcValuation, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/get-funding-asset?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (needBtcValuation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("needBtcValuation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(needBtcValuation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous20>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// User Asset (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>User assets</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous21>> GetUserAssetAsync(string asset, NeedBtcValuation? needBtcValuation, long? recvWindow, long timestamp, string signature)
        {
            return GetUserAssetAsync(asset, needBtcValuation, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// User Asset (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>User assets</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous21>> GetUserAssetAsync(string asset, NeedBtcValuation? needBtcValuation, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v3/asset/getUserAsset?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (needBtcValuation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("needBtcValuation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(needBtcValuation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous21>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Convert Transfer (USER_DATA)
        /// </summary>
        /// <param name="clientTranId">The unique flag, the min length is 20</param>
        /// <param name="targetAsset">Target asset you want to convert</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Conversion Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response40> ConvertTransferAsync(string clientTranId, string asset, double amount, string targetAsset, long? recvWindow, long timestamp, string signature)
        {
            return ConvertTransferAsync(clientTranId, asset, amount, targetAsset, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Convert Transfer (USER_DATA)
        /// </summary>
        /// <param name="clientTranId">The unique flag, the min length is 20</param>
        /// <param name="targetAsset">Target asset you want to convert</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Conversion Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response40> ConvertTransferAsync(string clientTranId, string asset, double amount, string targetAsset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (clientTranId == null)
                throw new System.ArgumentNullException("clientTranId");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (targetAsset == null)
                throw new System.ArgumentNullException("targetAsset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/convert-transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("clientTranId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientTranId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("targetAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(targetAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response40>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Convert Transfer (USER_DATA)
        /// </summary>
        /// <param name="tranId">The transaction id</param>
        /// <param name="asset">If it is blank, we will match deducted asset and target asset.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="accountType">MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Query Convert Transfer</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response41> QueryByPagePOSTAsync(long? tranId, string asset, long startTime, long endTime, AccountType? accountType, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return QueryByPagePOSTAsync(tranId, asset, startTime, endTime, accountType, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Convert Transfer (USER_DATA)
        /// </summary>
        /// <param name="tranId">The transaction id</param>
        /// <param name="asset">If it is blank, we will match deducted asset and target asset.</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="accountType">MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Query Convert Transfer</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response41> QueryByPagePOSTAsync(long? tranId, string asset, long startTime, long endTime, AccountType? accountType, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (startTime == null)
                throw new System.ArgumentNullException("startTime");

            if (endTime == null)
                throw new System.ArgumentNullException("endTime");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/convert-transfer/queryByPage?");
            if (tranId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tranId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tranId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (accountType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("accountType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response41>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Cloud-Mining payment and refund history (USER_DATA)
        /// </summary>
        /// <param name="tranId">The transaction id</param>
        /// <param name="clientTranId">The unique flag</param>
        /// <param name="asset">If it is blank, we will query all assets</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cloud Mining Payment and Refund History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response42> QueryByPageGETAsync(long? tranId, string clientTranId, string asset, long startTime, long endTime, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return QueryByPageGETAsync(tranId, clientTranId, asset, startTime, endTime, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Cloud-Mining payment and refund history (USER_DATA)
        /// </summary>
        /// <param name="tranId">The transaction id</param>
        /// <param name="clientTranId">The unique flag</param>
        /// <param name="asset">If it is blank, we will query all assets</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cloud Mining Payment and Refund History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response42> QueryByPageGETAsync(long? tranId, string clientTranId, string asset, long startTime, long endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (startTime == null)
                throw new System.ArgumentNullException("startTime");

            if (endTime == null)
                throw new System.ArgumentNullException("endTime");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage?");
            if (tranId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tranId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tranId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (clientTranId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("clientTranId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientTranId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response42>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get API Key Permission (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>API Key permissions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response43> ApiRestrictionsAsync(long? recvWindow, long timestamp, string signature)
        {
            return ApiRestrictionsAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get API Key Permission (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>API Key permissions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response43> ApiRestrictionsAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/account/apiRestrictions?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response43>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a Virtual Sub-account(For Master Account)
        /// </summary>
        /// <param name="subAccountString">Please input a string. We will create a virtual email using that string for you to register</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Return the created virtual email</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response44> VirtualSubAccountAsync(string subAccountString, long? recvWindow, long timestamp, string signature)
        {
            return VirtualSubAccountAsync(subAccountString, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a Virtual Sub-account(For Master Account)
        /// </summary>
        /// <param name="subAccountString">Please input a string. We will create a virtual email using that string for you to register</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Return the created virtual email</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response44> VirtualSubAccountAsync(string subAccountString, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (subAccountString == null)
                throw new System.ArgumentNullException("subAccountString");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/virtualSubAccount?");
            urlBuilder_.Append(System.Uri.EscapeDataString("subAccountString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subAccountString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response44>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Sub-account List (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 1; max 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of sub-accounts</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response45> ListAsync(string email, IsFreeze? isFreeze, int? page, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return ListAsync(email, isFreeze, page, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Sub-account List (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 1; max 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of sub-accounts</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response45> ListAsync(string email, IsFreeze? isFreeze, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/list?");
            if (email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isFreeze != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isFreeze") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isFreeze, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response45>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account Spot Asset Transfer History (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account Spot Asset Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous22>> HistoryAll2Async(string fromEmail, string toEmail, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return HistoryAll2Async(fromEmail, toEmail, startTime, endTime, page, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Spot Asset Transfer History (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account Spot Asset Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous22>> HistoryAll2Async(string fromEmail, string toEmail, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/sub/transfer/history?");
            if (fromEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous22>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account Futures Asset Transfer History (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">1:USDT-margined Futures, 2: Coin-margined Futures</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default value: 50, Max value: 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account Futures Asset Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response46> InternalTransferGETAsync(string email, int futuresType, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return InternalTransferGETAsync(email, futuresType, startTime, endTime, page, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Futures Asset Transfer History (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">1:USDT-margined Futures, 2: Coin-margined Futures</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default value: 50, Max value: 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account Futures Asset Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response46> InternalTransferGETAsync(string email, int futuresType, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (futuresType == null)
                throw new System.ArgumentNullException("futuresType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/futures/internalTransfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("futuresType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(futuresType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response46>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account Futures Asset Transfer (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sender email</param>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="futuresType">1:USDT-margined Futures,2: Coin-margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Asset Transfer Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response47> InternalTransferPOSTAsync(string fromEmail, string toEmail, int futuresType, string asset, double amount, long? recvWindow, long timestamp, string signature)
        {
            return InternalTransferPOSTAsync(fromEmail, toEmail, futuresType, asset, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Futures Asset Transfer (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sender email</param>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="futuresType">1:USDT-margined Futures,2: Coin-margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Asset Transfer Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response47> InternalTransferPOSTAsync(string fromEmail, string toEmail, int futuresType, string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (fromEmail == null)
                throw new System.ArgumentNullException("fromEmail");

            if (toEmail == null)
                throw new System.ArgumentNullException("toEmail");

            if (futuresType == null)
                throw new System.ArgumentNullException("futuresType");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/futures/internalTransfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("futuresType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(futuresType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response47>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account Assets (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of assets balances</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response48> AssetsAsync(string email, long? recvWindow, long timestamp, string signature)
        {
            return AssetsAsync(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Assets (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of assets balances</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response48> AssetsAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v3/sub-account/assets?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response48>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account Spot Assets Summary (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="page">Default 1</param>
        /// <param name="size">Default:10 Max:20</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Summary of Sub-account Spot Assets</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response49> SpotSummaryAsync(string email, int? page, int? size, long? recvWindow, long timestamp, string signature)
        {
            return SpotSummaryAsync(email, page, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Spot Assets Summary (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="page">Default 1</param>
        /// <param name="size">Default:10 Max:20</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Summary of Sub-account Spot Assets</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response49> SpotSummaryAsync(string email, int? page, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/spotSummary?");
            if (email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response49>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account Spot Assets Summary (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Deposit address info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response50> SubAddressAsync(string email, string coin, string network, long? recvWindow, long timestamp, string signature)
        {
            return SubAddressAsync(email, coin, network, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Spot Assets Summary (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="coin">Coin name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Deposit address info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response50> SubAddressAsync(string email, string coin, string network, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (coin == null)
                throw new System.ArgumentNullException("coin");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/capital/deposit/subAddress?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (network != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("network") + "=").Append(System.Uri.EscapeDataString(ConvertToString(network, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response50>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account Deposit History (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="coin">Coin name</param>
        /// <param name="status">0(0:pending,6: credited but cannot withdraw, 1:success)</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account deposit history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous23>> SubHisrecAsync(string email, string coin, int? status, long? startTime, long? endTime, long? limit, int? offset, long? recvWindow, long timestamp, string signature)
        {
            return SubHisrecAsync(email, coin, status, startTime, endTime, limit, offset, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Deposit History (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="coin">Coin name</param>
        /// <param name="status">0(0:pending,6: credited but cannot withdraw, 1:success)</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account deposit history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous23>> SubHisrecAsync(string email, string coin, int? status, long? startTime, long? endTime, long? limit, int? offset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/capital/deposit/subHisrec?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (coin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous23>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account's Status on Margin/Futures (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on Margin/Futures</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous24>> StatusAllAsync(string email, long? recvWindow, long timestamp, string signature)
        {
            return StatusAllAsync(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account's Status on Margin/Futures (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Status on Margin/Futures</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous24>> StatusAllAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/status?");
            if (email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous24>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable Margin for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response51> EnableAsync(string email, long? recvWindow, long timestamp, string signature)
        {
            return EnableAsync(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Margin for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response51> EnableAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/margin/enable?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response51>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Detail on Sub-account's Margin Account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin sub-account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response52> AccountGET4Async(string email, long? recvWindow, long timestamp, string signature)
        {
            return AccountGET4Async(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detail on Sub-account's Margin Account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin sub-account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response52> AccountGET4Async(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/margin/account?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response52>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Summary of Sub-account's Margin Account (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin sub-account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response53> AccountSummaryAsync(long? recvWindow, long timestamp, string signature)
        {
            return AccountSummaryAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Summary of Sub-account's Margin Account (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Margin sub-account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response53> AccountSummaryAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/margin/accountSummary?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response53>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable Futures for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response54> Enable2Async(string email, long? recvWindow, long timestamp, string signature)
        {
            return Enable2Async(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Futures for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response54> Enable2Async(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/futures/enable?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response54>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Detail on Sub-account's Futures Account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response55> AccountGET5Async(string email, long? recvWindow, long timestamp, string signature)
        {
            return AccountGET5Async(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detail on Sub-account's Futures Account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response55> AccountGET5Async(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/futures/account?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response55>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Summary of Sub-account's Futures Account (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response56> AccountSummary2Async(long? recvWindow, long timestamp, string signature)
        {
            return AccountSummary2Async(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Summary of Sub-account's Futures Account (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response56> AccountSummary2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/futures/accountSummary?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response56>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Futures Position-Risk of Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous25>> PositionRiskAllAsync(string email, long? recvWindow, long timestamp, string signature)
        {
            return PositionRiskAllAsync(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Futures Position-Risk of Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures account summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous25>> PositionRiskAllAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/futures/positionRisk?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous25>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Transfer for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">* `1` - transfer from subaccount's spot account to its USDT-margined futures account
        /// <br/>* `2` - transfer from subaccount's USDT-margined futures account to its spot account
        /// <br/>* `3` - transfer from subaccount's spot account to its COIN-margined futures account
        /// <br/>* `4` - transfer from subaccount's COIN-margined futures account to its spot account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response57> TransferPOST4Async(string email, string asset, double amount, Type6 type, long? recvWindow, long timestamp, string signature)
        {
            return TransferPOST4Async(email, asset, amount, type, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">* `1` - transfer from subaccount's spot account to its USDT-margined futures account
        /// <br/>* `2` - transfer from subaccount's USDT-margined futures account to its spot account
        /// <br/>* `3` - transfer from subaccount's spot account to its COIN-margined futures account
        /// <br/>* `4` - transfer from subaccount's COIN-margined futures account to its spot account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response57> TransferPOST4Async(string email, string asset, double amount, Type6 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/futures/transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response57>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Margin Transfer for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">* `1` - transfer from subaccount's spot account to margin account
        /// <br/>* `2` - transfer from subaccount's margin account to its spot account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response58> TransferPOST5Async(string email, string asset, double amount, Type7 type, long? recvWindow, long timestamp, string signature)
        {
            return TransferPOST5Async(email, asset, amount, type, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Margin Transfer for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">* `1` - transfer from subaccount's spot account to margin account
        /// <br/>* `2` - transfer from subaccount's margin account to its spot account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response58> TransferPOST5Async(string email, string asset, double amount, Type7 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/margin/transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response58>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Transfer to Sub-account of Same Master (For Sub-account)
        /// </summary>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response59> SubToSubAsync(string toEmail, string asset, double amount, long? recvWindow, long timestamp, string signature)
        {
            return SubToSubAsync(toEmail, asset, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer to Sub-account of Same Master (For Sub-account)
        /// </summary>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response59> SubToSubAsync(string toEmail, string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (toEmail == null)
                throw new System.ArgumentNullException("toEmail");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/transfer/subToSub?");
            urlBuilder_.Append(System.Uri.EscapeDataString("toEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response59>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Transfer to Master (For Sub-account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response60> SubToMasterAsync(string asset, double amount, long? recvWindow, long timestamp, string signature)
        {
            return SubToMasterAsync(asset, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfer to Master (For Sub-account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response60> SubToMasterAsync(string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/transfer/subToMaster?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response60>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sub-account Transfer History (For Sub-account)
        /// </summary>
        /// <param name="type">* `1` - transfer in
        /// <br/>* `2` - transfer out</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous26>> SubUserHistoryAsync(string asset, Type8? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return SubUserHistoryAsync(asset, type, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sub-account Transfer History (For Sub-account)
        /// </summary>
        /// <param name="type">* `1` - transfer in
        /// <br/>* `2` - transfer out</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous26>> SubUserHistoryAsync(string asset, Type8? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/transfer/subUserHistory?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous26>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Universal Transfer History (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 500, Max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous27>> UniversalTransferAllAsync(string fromEmail, string toEmail, string clientTranId, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return UniversalTransferAllAsync(fromEmail, toEmail, clientTranId, startTime, endTime, page, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Universal Transfer History (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 500, Max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous27>> UniversalTransferAllAsync(string fromEmail, string toEmail, string clientTranId, long? startTime, long? endTime, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/universalTransfer?");
            if (fromEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (clientTranId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("clientTranId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientTranId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous27>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Universal Transfer (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="symbol">Only supported under ISOLATED_MARGIN type</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response61> UniversalTransferAsync(string fromEmail, string toEmail, FromAccountType fromAccountType, ToAccountType toAccountType, string clientTranId, string symbol, string asset, double amount, long? recvWindow, long timestamp, string signature)
        {
            return UniversalTransferAsync(fromEmail, toEmail, fromAccountType, toAccountType, clientTranId, symbol, asset, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Universal Transfer (For Master Account)
        /// </summary>
        /// <param name="fromEmail">Sub-account email</param>
        /// <param name="toEmail">Sub-account email</param>
        /// <param name="symbol">Only supported under ISOLATED_MARGIN type</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response61> UniversalTransferAsync(string fromEmail, string toEmail, FromAccountType fromAccountType, ToAccountType toAccountType, string clientTranId, string symbol, string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (fromAccountType == null)
                throw new System.ArgumentNullException("fromAccountType");

            if (toAccountType == null)
                throw new System.ArgumentNullException("toAccountType");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/universalTransfer?");
            if (fromEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("fromAccountType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromAccountType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toAccountType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toAccountType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (clientTranId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("clientTranId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientTranId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response61>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Detail on Sub-account's Futures Account V2 (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SubAccountUSDTFuturesDetails> AccountGET6Async(string email, FuturesType futuresType, long? recvWindow, long timestamp, string signature)
        {
            return AccountGET6Async(email, futuresType, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Detail on Sub-account's Futures Account V2 (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubAccountUSDTFuturesDetails> AccountGET6Async(string email, FuturesType futuresType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (futuresType == null)
                throw new System.ArgumentNullException("futuresType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v2/sub-account/futures/account?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("futuresType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(futuresType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubAccountUSDTFuturesDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Summary of Sub-account's Futures Account V2 (For Master Account)
        /// </summary>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 10, Max 20</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SubAccountUSDTFuturesSummary> AccountSummary3Async(FuturesType2 futuresType, int? page, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return AccountSummary3Async(futuresType, page, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Summary of Sub-account's Futures Account V2 (For Master Account)
        /// </summary>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="page">Default 1</param>
        /// <param name="limit">Default 10, Max 20</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Summary</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubAccountUSDTFuturesSummary> AccountSummary3Async(FuturesType2 futuresType, int? page, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (futuresType == null)
                throw new System.ArgumentNullException("futuresType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v2/sub-account/futures/accountSummary?");
            urlBuilder_.Append(System.Uri.EscapeDataString("futuresType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(futuresType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubAccountUSDTFuturesSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Futures Position-Risk of Sub-account V2 (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Position Risk</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SubAccountUSDTFuturesPositionRisk> PositionRiskAsync(string email, FuturesType3 futuresType, long? recvWindow, long timestamp, string signature)
        {
            return PositionRiskAsync(email, futuresType, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Futures Position-Risk of Sub-account V2 (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="futuresType">* `1` - USDT Margined Futures
        /// <br/>* `2` - COIN Margined Futures</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>USDT or COIN Margined Futures Position Risk</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubAccountUSDTFuturesPositionRisk> PositionRiskAsync(string email, FuturesType3 futuresType, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (futuresType == null)
                throw new System.ArgumentNullException("futuresType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v2/sub-account/futures/positionRisk?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("futuresType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(futuresType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubAccountUSDTFuturesPositionRisk>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable Leverage Token for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="enableBlvt">Only true for now</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>BLVT status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response62> Enable3Async(string email, bool enableBlvt, long? recvWindow, long timestamp, string signature)
        {
            return Enable3Async(email, enableBlvt, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Leverage Token for Sub-account (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="enableBlvt">Only true for now</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>BLVT status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response62> Enable3Async(string email, bool enableBlvt, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (enableBlvt == null)
                throw new System.ArgumentNullException("enableBlvt");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/blvt/enable?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("enableBlvt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(enableBlvt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response62>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deposit assets into the managed sub-account（For Investor Master Account）
        /// </summary>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response63> DepositPOSTAsync(string toEmail, string asset, double amount, long? recvWindow, long timestamp, string signature)
        {
            return DepositPOSTAsync(toEmail, asset, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deposit assets into the managed sub-account（For Investor Master Account）
        /// </summary>
        /// <param name="toEmail">Recipient email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response63> DepositPOSTAsync(string toEmail, string asset, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (toEmail == null)
                throw new System.ArgumentNullException("toEmail");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/managed-subaccount/deposit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("toEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response63>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Managed sub-account asset details（For Investor Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of asset details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous28>> AssetAllAsync(string email, long? recvWindow, long timestamp, string signature)
        {
            return AssetAllAsync(email, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Managed sub-account asset details（For Investor Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of asset details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous28>> AssetAllAsync(string email, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/managed-subaccount/asset?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous28>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Withdrawl assets from the managed sub-account（For Investor Master Account)
        /// </summary>
        /// <param name="fromEmail">Sender email</param>
        /// <param name="transferDate">Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response64> WithdrawPOSTAsync(string fromEmail, string asset, double amount, long? transferDate, long? recvWindow, long timestamp, string signature)
        {
            return WithdrawPOSTAsync(fromEmail, asset, amount, transferDate, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Withdrawl assets from the managed sub-account（For Investor Master Account)
        /// </summary>
        /// <param name="fromEmail">Sender email</param>
        /// <param name="transferDate">Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transfer id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response64> WithdrawPOSTAsync(string fromEmail, string asset, double amount, long? transferDate, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (fromEmail == null)
                throw new System.ArgumentNullException("fromEmail");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/managed-subaccount/withdraw?");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (transferDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transferDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transferDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response64>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Managed sub-account snapshot (For Investor Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">"SPOT", "MARGIN"(cross), "FUTURES"(UM)</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">min 7, max 30, default 7</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account spot snapshot</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response65> AccountSnapshot2Async(string email, string type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return AccountSnapshot2Async(email, type, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Managed sub-account snapshot (For Investor Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="type">"SPOT", "MARGIN"(cross), "FUTURES"(UM)</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">min 7, max 30, default 7</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Sub-account spot snapshot</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response65> AccountSnapshot2Async(string email, string type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/managed-subaccount/accountSnapshot?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response65>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enable or Disable IP Restriction for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipRestrict">true or false</param>
        /// <param name="thirdParty">true or false</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>IP Restriction information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response66> IpRestrictionPOSTAsync(string email, string subAccountApiKey, bool ipRestrict, bool? thirdParty, long? recvWindow, long timestamp, string signature)
        {
            return IpRestrictionPOSTAsync(email, subAccountApiKey, ipRestrict, thirdParty, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable or Disable IP Restriction for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipRestrict">true or false</param>
        /// <param name="thirdParty">true or false</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>IP Restriction information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response66> IpRestrictionPOSTAsync(string email, string subAccountApiKey, bool ipRestrict, bool? thirdParty, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (subAccountApiKey == null)
                throw new System.ArgumentNullException("subAccountApiKey");

            if (ipRestrict == null)
                throw new System.ArgumentNullException("ipRestrict");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/subAccountApi/ipRestriction?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("subAccountApiKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subAccountApiKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ipRestrict") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ipRestrict, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (thirdParty != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("thirdParty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(thirdParty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response66>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get IP Restriction for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>IP Restriction information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response67> IpRestrictionGETAsync(string email, string subAccountApiKey, long? recvWindow, long timestamp, string signature)
        {
            return IpRestrictionGETAsync(email, subAccountApiKey, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get IP Restriction for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>IP Restriction information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response67> IpRestrictionGETAsync(string email, string subAccountApiKey, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (subAccountApiKey == null)
                throw new System.ArgumentNullException("subAccountApiKey");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/subAccountApi/ipRestriction?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("subAccountApiKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subAccountApiKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response67>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add IP List for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipAddress">Can be added in batches, separated by commas</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Add IP information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response68> IpListPOSTAsync(string email, string subAccountApiKey, string ipAddress, string thirdPartyName, long? recvWindow, long timestamp, string signature)
        {
            return IpListPOSTAsync(email, subAccountApiKey, ipAddress, thirdPartyName, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add IP List for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipAddress">Can be added in batches, separated by commas</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Add IP information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response68> IpListPOSTAsync(string email, string subAccountApiKey, string ipAddress, string thirdPartyName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (subAccountApiKey == null)
                throw new System.ArgumentNullException("subAccountApiKey");

            if (ipAddress == null)
                throw new System.ArgumentNullException("ipAddress");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("subAccountApiKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subAccountApiKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ipAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ipAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (thirdPartyName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("thirdPartyName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(thirdPartyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response68>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete IP List for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipAddress">Can be added in batches, separated by commas</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Delete IP information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response69> IpListDELETEAsync(string email, string subAccountApiKey, string ipAddress, string thirdPartyName, long? recvWindow, long timestamp, string signature)
        {
            return IpListDELETEAsync(email, subAccountApiKey, ipAddress, thirdPartyName, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete IP List for a Sub-account API Key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="ipAddress">Can be added in batches, separated by commas</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Delete IP information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response69> IpListDELETEAsync(string email, string subAccountApiKey, string ipAddress, string thirdPartyName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (subAccountApiKey == null)
                throw new System.ArgumentNullException("subAccountApiKey");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("subAccountApiKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subAccountApiKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (ipAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ipAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ipAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (thirdPartyName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("thirdPartyName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(thirdPartyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response69>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Sub-Account API key Third Party IP whitelist (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Third Party IP whitelist</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response70> ThirdPartyListAsync(long? recvWindow, long timestamp, string signature)
        {
            return ThirdPartyListAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Sub-Account API key Third Party IP whitelist (For Master Account)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Third Party IP whitelist</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response70> ThirdPartyListAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/sub-account/apiRestrictions/ipRestriction/thirdPartyList?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response70>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update IP Restriction for Sub-Account API key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="status">IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only. 3 = Restrict access to users' trusted third party IPs only</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Update IP Restriction</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response71> IpRestrictionPOST2Async(string email, string subAccountApiKey, string status, string thirdPartyName, long? recvWindow, long timestamp, string signature)
        {
            return IpRestrictionPOST2Async(email, subAccountApiKey, status, thirdPartyName, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update IP Restriction for Sub-Account API key (For Master Account)
        /// </summary>
        /// <param name="email">Sub-account email</param>
        /// <param name="status">IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only. 3 = Restrict access to users' trusted third party IPs only</param>
        /// <param name="thirdPartyName">third party IP list name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Update IP Restriction</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response71> IpRestrictionPOST2Async(string email, string subAccountApiKey, string status, string thirdPartyName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (subAccountApiKey == null)
                throw new System.ArgumentNullException("subAccountApiKey");

            if (status == null)
                throw new System.ArgumentNullException("status");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v2/sub-account/subAccountApi/ipRestriction?");
            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("subAccountApiKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subAccountApiKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (thirdPartyName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("thirdPartyName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(thirdPartyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response71>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a ListenKey (USER_STREAM)
        /// </summary>
        /// <returns>Listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response72> UserDataStreamPOSTAsync()
        {
            return UserDataStreamPOSTAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a ListenKey (USER_STREAM)
        /// </summary>
        /// <returns>Listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response72> UserDataStreamPOSTAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/userDataStream");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response72>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Ping/Keep-alive a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> UserDataStreamPUTAsync(string listenKey)
        {
            return UserDataStreamPUTAsync(listenKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ping/Keep-alive a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> UserDataStreamPUTAsync(string listenKey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/userDataStream?");
            if (listenKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listenKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listenKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> UserDataStreamDELETEAsync(string listenKey)
        {
            return UserDataStreamDELETEAsync(listenKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> UserDataStreamDELETEAsync(string listenKey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/userDataStream?");
            if (listenKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listenKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listenKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a ListenKey (USER_STREAM)
        /// </summary>
        /// <returns>Margin listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response73> UserDataStreamPOST2Async()
        {
            return UserDataStreamPOST2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a ListenKey (USER_STREAM)
        /// </summary>
        /// <returns>Margin listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response73> UserDataStreamPOST2Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/userDataStream");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response73>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Ping/Keep-alive a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> UserDataStreamPUT2Async(string listenKey)
        {
            return UserDataStreamPUT2Async(listenKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ping/Keep-alive a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> UserDataStreamPUT2Async(string listenKey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/userDataStream?");
            if (listenKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listenKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listenKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> UserDataStreamDELETE2Async(string listenKey)
        {
            return UserDataStreamDELETE2Async(listenKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> UserDataStreamDELETE2Async(string listenKey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/userDataStream?");
            if (listenKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listenKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listenKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate a Listen Key (USER_STREAM)
        /// </summary>
        /// <returns>Isolated margin listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response74> IsolatedPOSTAsync()
        {
            return IsolatedPOSTAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a Listen Key (USER_STREAM)
        /// </summary>
        /// <returns>Isolated margin listen key</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response74> IsolatedPOSTAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/userDataStream/isolated");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response74>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Ping/Keep-alive a Listen Key (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> IsolatedPUTAsync(string listenKey)
        {
            return IsolatedPUTAsync(listenKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ping/Keep-alive a Listen Key (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> IsolatedPUTAsync(string listenKey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/userDataStream/isolated?");
            if (listenKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listenKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listenKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> IsolatedDELETEAsync(string listenKey)
        {
            return IsolatedDELETEAsync(listenKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close a ListenKey (USER_STREAM)
        /// </summary>
        /// <param name="listenKey">User websocket listen key</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> IsolatedDELETEAsync(string listenKey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/userDataStream/isolated?");
            if (listenKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("listenKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(listenKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fiat Deposit/Withdraw History (USER_DATA)
        /// </summary>
        /// <param name="transactionType">* `0` - deposit
        /// <br/>* `1` - withdraw</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">Default 100, max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of deposit/withdraw orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response75> OrdersAsync(TransactionType transactionType, long? beginTime, long? endTime, int? page, int? rows, long? recvWindow, long timestamp, string signature)
        {
            return OrdersAsync(transactionType, beginTime, endTime, page, rows, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fiat Deposit/Withdraw History (USER_DATA)
        /// </summary>
        /// <param name="transactionType">* `0` - deposit
        /// <br/>* `1` - withdraw</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">Default 100, max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of deposit/withdraw orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response75> OrdersAsync(TransactionType transactionType, long? beginTime, long? endTime, int? page, int? rows, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (transactionType == null)
                throw new System.ArgumentNullException("transactionType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/fiat/orders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("transactionType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transactionType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (beginTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("beginTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(beginTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rows") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response75>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fiat Payments History (USER_DATA)
        /// </summary>
        /// <param name="transactionType">* `0` - deposit
        /// <br/>* `1` - withdraw</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">Default 100, max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of fiat payments</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response76> PaymentsAsync(TransactionType transactionType, long? beginTime, long? endTime, int? page, int? rows, long? recvWindow, long timestamp, string signature)
        {
            return PaymentsAsync(transactionType, beginTime, endTime, page, rows, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fiat Payments History (USER_DATA)
        /// </summary>
        /// <param name="transactionType">* `0` - deposit
        /// <br/>* `1` - withdraw</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">Default 100, max 500</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of fiat payments</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response76> PaymentsAsync(TransactionType transactionType, long? beginTime, long? endTime, int? page, int? rows, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (transactionType == null)
                throw new System.ArgumentNullException("transactionType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/fiat/payments?");
            urlBuilder_.Append(System.Uri.EscapeDataString("transactionType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transactionType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (beginTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("beginTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(beginTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rows") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response76>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Flexible Product List (USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="featured">Default `ALL`</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible products</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous29>> ListAllAsync(Status3? status, Featured? featured, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return ListAllAsync(status, featured, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Flexible Product List (USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="featured">Default `ALL`</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible products</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous29>> ListAllAsync(Status3? status, Featured? featured, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/daily/product/list?");
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (featured != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("featured") + "=").Append(System.Uri.EscapeDataString(ConvertToString(featured, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous29>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Left Daily Purchase Quota of Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Daily purchase quote of flexible product left</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response77> UserLeftQuotaAsync(string productId, long? recvWindow, long timestamp, string signature)
        {
            return UserLeftQuotaAsync(productId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Left Daily Purchase Quota of Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Daily purchase quote of flexible product left</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response77> UserLeftQuotaAsync(string productId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/daily/userLeftQuota?");
            urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response77>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Purchase Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Generated Purchase Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response78> PurchaseAsync(string productId, double amount, long? recvWindow, long timestamp, string signature)
        {
            return PurchaseAsync(productId, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purchase Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Generated Purchase Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response78> PurchaseAsync(string productId, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/daily/purchase?");
            urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response78>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Left Daily Redemption Quota of Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Daily redemption quota of flexible product left</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response79> UserRedemptionQuotaAsync(string productId, Type9 type, long? recvWindow, long timestamp, string signature)
        {
            return UserRedemptionQuotaAsync(productId, type, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Left Daily Redemption Quota of Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Daily redemption quota of flexible product left</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response79> UserRedemptionQuotaAsync(string productId, Type9 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/daily/userRedemptionQuota?");
            urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response79>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Redeem Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> RedeemAsync(string productId, double amount, Type9 type, long? recvWindow, long timestamp, string signature)
        {
            return RedeemAsync(productId, amount, type, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeem Flexible Product (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>OK</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> RedeemAsync(string productId, double amount, Type9 type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/daily/redeem?");
            urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Flexible Product Position (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible product positions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous30>> PositionAsync(string asset, long? recvWindow, long timestamp, string signature)
        {
            return PositionAsync(asset, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Flexible Product Position (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible product positions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous30>> PositionAsync(string asset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/daily/token/position?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous30>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Fixed/Activity Project List(USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="isSortAsc">default "true"</param>
        /// <param name="sortBy">Default `START_TIME`</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of fixed projects</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous31>> ListAll2Async(string asset, Type10 type, Status4? status, bool? isSortAsc, SortBy? sortBy, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return ListAll2Async(asset, type, status, isSortAsc, sortBy, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Fixed/Activity Project List(USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="isSortAsc">default "true"</param>
        /// <param name="sortBy">Default `START_TIME`</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of fixed projects</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous31>> ListAll2Async(string asset, Type10 type, Status4? status, bool? isSortAsc, SortBy? sortBy, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/project/list?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isSortAsc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isSortAsc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isSortAsc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous31>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Purchase Fixed/Activity Project (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Generated Purchase Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response80> Purchase2Async(string projectId, string lot, long? recvWindow, long timestamp, string signature)
        {
            return Purchase2Async(projectId, lot, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purchase Fixed/Activity Project (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Generated Purchase Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response80> Purchase2Async(string projectId, string lot, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            if (lot == null)
                throw new System.ArgumentNullException("lot");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/customizedFixed/purchase?");
            urlBuilder_.Append(System.Uri.EscapeDataString("projectId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("lot") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lot, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response80>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Fixed/Activity Project Position (USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of fixed project positions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous32>> ListAll3Async(string asset, string projectId, Status4? status, long? recvWindow, long timestamp, string signature)
        {
            return ListAll3Async(asset, projectId, status, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Fixed/Activity Project Position (USER_DATA)
        /// </summary>
        /// <param name="status">Default `ALL`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of fixed project positions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous32>> ListAll3Async(string asset, string projectId, Status4? status, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/project/position/list?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (projectId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("projectId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous32>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lending Account (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Lending account</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response81> AccountGET7Async(long? recvWindow, long timestamp, string signature)
        {
            return AccountGET7Async(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lending Account (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Lending account</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response81> AccountGET7Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/union/account?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response81>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Purchase Record (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible or Fixed/Activity products</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SavingsFlexiblePurchaseRecord> PurchaseRecordAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return PurchaseRecordAsync(lendingType, asset, startTime, endTime, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Purchase Record (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of flexible or Fixed/Activity products</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SavingsFlexiblePurchaseRecord> PurchaseRecordAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (lendingType == null)
                throw new System.ArgumentNullException("lendingType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/union/purchaseRecord?");
            urlBuilder_.Append(System.Uri.EscapeDataString("lendingType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lendingType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SavingsFlexiblePurchaseRecord>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Redemption Record (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of Flexible or Fixed/Activity Redemptions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SavingsFlexibleRedemptionRecord> RedemptionRecordAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return RedemptionRecordAsync(lendingType, asset, startTime, endTime, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Redemption Record (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of Flexible or Fixed/Activity Redemptions</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SavingsFlexibleRedemptionRecord> RedemptionRecordAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (lendingType == null)
                throw new System.ArgumentNullException("lendingType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/union/redemptionRecord?");
            urlBuilder_.Append(System.Uri.EscapeDataString("lendingType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lendingType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SavingsFlexibleRedemptionRecord>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Interest History (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of interest</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous33>> InterestHistoryAllAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return InterestHistoryAllAsync(lendingType, asset, startTime, endTime, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Interest History (USER_DATA)
        /// </summary>
        /// <param name="lendingType">* `DAILY` - for flexible
        /// <br/>* `ACTIVITY` - for activity
        /// <br/>* `CUSTOMIZED_FIXED` for fixed</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>History of interest</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous33>> InterestHistoryAllAsync(LendingType lendingType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (lendingType == null)
                throw new System.ArgumentNullException("lendingType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/union/interestHistory?");
            urlBuilder_.Append(System.Uri.EscapeDataString("lendingType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lendingType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous33>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Change Fixed/Activity Position to Daily Position (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Purchase information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response82> PositionChangedAsync(string projectId, string lot, string positionId, long? recvWindow, long timestamp, string signature)
        {
            return PositionChangedAsync(projectId, lot, positionId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change Fixed/Activity Position to Daily Position (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Purchase information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response82> PositionChangedAsync(string projectId, string lot, string positionId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            if (lot == null)
                throw new System.ArgumentNullException("lot");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/lending/positionChanged?");
            urlBuilder_.Append(System.Uri.EscapeDataString("projectId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("lot") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lot, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (positionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response82>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Staking Product List (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Product list.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous34>> ProductListAsync(string product, string asset, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return ProductListAsync(product, asset, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Staking Product List (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Product list.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous34>> ProductListAsync(string product, string asset, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (product == null)
                throw new System.ArgumentNullException("product");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/staking/productList?");
            urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous34>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Purchase Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="renewable">true or false, default false. Active if product is `STAKING` or `L_DEFI`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Position Id.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response83> Purchase3Async(string product, string productId, double amount, string renewable, long? recvWindow, long timestamp, string signature)
        {
            return Purchase3Async(product, productId, amount, renewable, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purchase Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="renewable">true or false, default false. Active if product is `STAKING` or `L_DEFI`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Position Id.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response83> Purchase3Async(string product, string productId, double amount, string renewable, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (product == null)
                throw new System.ArgumentNullException("product");

            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/staking/purchase?");
            urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (renewable != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("renewable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(renewable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response83>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Redeem Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="positionId">Mandatory if product is `STAKING` or `L_DEFI`</param>
        /// <param name="amount">Mandatory if product is `F_DEFI`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response84> Redeem2Async(string product, string positionId, string productId, double? amount, long? recvWindow, long timestamp, string signature)
        {
            return Redeem2Async(product, positionId, productId, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeem Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="positionId">Mandatory if product is `STAKING` or `L_DEFI`</param>
        /// <param name="amount">Mandatory if product is `F_DEFI`</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response84> Redeem2Async(string product, string positionId, string productId, double? amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (product == null)
                throw new System.ArgumentNullException("product");

            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/staking/redeem?");
            urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (positionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (amount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response84>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Staking Product Position (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Position.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous35>> Position2Async(string product, string productId, string asset, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return Position2Async(product, productId, asset, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Staking Product Position (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Position.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous35>> Position2Async(string product, string productId, string asset, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (product == null)
                throw new System.ArgumentNullException("product");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/staking/position?");
            urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (productId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous35>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Staking History (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="txnType">`SUBSCRIPTION`, `REDEMPTION`, `INTEREST`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Staking History.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous36>> StakingRecordAsync(string product, string txnType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return StakingRecordAsync(product, txnType, asset, startTime, endTime, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Staking History (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="txnType">`SUBSCRIPTION`, `REDEMPTION`, `INTEREST`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Staking History.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous36>> StakingRecordAsync(string product, string txnType, string asset, long? startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (product == null)
                throw new System.ArgumentNullException("product");

            if (txnType == null)
                throw new System.ArgumentNullException("txnType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/staking/stakingRecord?");
            urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("txnType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(txnType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous36>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Set Auto Staking (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="renewable">true or false</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response85> SetAutoStakingAsync(string product, string positionId, string renewable, long? recvWindow, long timestamp, string signature)
        {
            return SetAutoStakingAsync(product, positionId, renewable, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Auto Staking (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="renewable">true or false</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response85> SetAutoStakingAsync(string product, string positionId, string renewable, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (product == null)
                throw new System.ArgumentNullException("product");

            if (positionId == null)
                throw new System.ArgumentNullException("positionId");

            if (renewable == null)
                throw new System.ArgumentNullException("renewable");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/staking/setAutoStaking?");
            urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("positionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("renewable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(renewable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response85>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Personal Left Quota of Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quota.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous37>> PersonalLeftQuotaAsync(string product, string productId, long? recvWindow, long timestamp, string signature)
        {
            return PersonalLeftQuotaAsync(product, productId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Personal Left Quota of Staking Product (USER_DATA)
        /// </summary>
        /// <param name="product">* `STAKING` - for Locked Staking
        /// <br/>* `F_DEFI` - for flexible DeFi Staking
        /// <br/>* `L_DEFI` - for locked DeFi Staking</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quota.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous37>> PersonalLeftQuotaAsync(string product, string productId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (product == null)
                throw new System.ArgumentNullException("product");

            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/staking/personalLeftQuota?");
            urlBuilder_.Append(System.Uri.EscapeDataString("product") + "=").Append(System.Uri.EscapeDataString(ConvertToString(product, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous37>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Acquiring Algorithm (MARKET_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Algorithm information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response86> AlgoListAsync(long? recvWindow, long timestamp, string signature)
        {
            return AlgoListAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Acquiring Algorithm (MARKET_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Algorithm information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response86> AlgoListAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/pub/algoList?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response86>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Acquiring CoinName (MARKET_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Coin information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response87> CoinListAsync(long? recvWindow, long timestamp, string signature)
        {
            return CoinListAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Acquiring CoinName (MARKET_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Coin information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response87> CoinListAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/pub/coinList?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response87>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Request for Detail Miner List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="workerName">Miner’s name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of workers' hashrates'</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response88> DetailAsync(string algo, string userName, string workerName, long? recvWindow, long timestamp, string signature)
        {
            return DetailAsync(algo, userName, workerName, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request for Detail Miner List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="workerName">Miner’s name</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of workers' hashrates'</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response88> DetailAsync(string algo, string userName, string workerName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algo == null)
                throw new System.ArgumentNullException("algo");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (workerName == null)
                throw new System.ArgumentNullException("workerName");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/worker/detail?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("workerName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(workerName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response88>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Request for Miner List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="sort">sort sequence（default=0）0 positive sequence, 1 negative sequence</param>
        /// <param name="sortColumn">Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time</param>
        /// <param name="workerStatus">miners status（default=0）0 all, 1 valid, 2 invalid, 3 failure</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of workers</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response89> List2Async(string algo, string userName, int? pageIndex, int? sort, int? sortColumn, int? workerStatus, long? recvWindow, long timestamp, string signature)
        {
            return List2Async(algo, userName, pageIndex, sort, sortColumn, workerStatus, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request for Miner List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="sort">sort sequence（default=0）0 positive sequence, 1 negative sequence</param>
        /// <param name="sortColumn">Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time</param>
        /// <param name="workerStatus">miners status（default=0）0 all, 1 valid, 2 invalid, 3 failure</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of workers</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response89> List2Async(string algo, string userName, int? pageIndex, int? sort, int? sortColumn, int? workerStatus, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algo == null)
                throw new System.ArgumentNullException("algo");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/worker/list?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageIndex != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortColumn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortColumn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortColumn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (workerStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("workerStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(workerStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response89>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Earnings List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="coin">Coin name</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of earnings</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response90> List3Async(string algo, string userName, string coin, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature)
        {
            return List3Async(algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Earnings List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="coin">Coin name</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of earnings</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response90> List3Async(string algo, string userName, string coin, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algo == null)
                throw new System.ArgumentNullException("algo");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/payment/list?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (coin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response90>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Extra Bonus List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="coin">Coin name</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of extra bonuses</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response91> OtherAsync(string algo, string userName, string coin, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature)
        {
            return OtherAsync(algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Extra Bonus List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="coin">Coin name</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of extra bonuses</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response91> OtherAsync(string algo, string userName, string coin, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algo == null)
                throw new System.ArgumentNullException("algo");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/payment/other?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (coin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response91>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Hashrate Resale List (USER_DATA)
        /// </summary>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of hashrate resales</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response92> List4Async(int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature)
        {
            return List4Async(pageIndex, pageSize, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hashrate Resale List (USER_DATA)
        /// </summary>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of hashrate resales</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response92> List4Async(int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/hash-transfer/config/details/list?");
            if (pageIndex != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response92>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Hashrate Resale Details (USER_DATA)
        /// </summary>
        /// <param name="configId">Mining ID</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of hashrate resale details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response93> DetailsAsync(string configId, string userName, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature)
        {
            return DetailsAsync(configId, userName, pageIndex, pageSize, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hashrate Resale Details (USER_DATA)
        /// </summary>
        /// <param name="configId">Mining ID</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of hashrate resale details</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response93> DetailsAsync(string configId, string userName, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (configId == null)
                throw new System.ArgumentNullException("configId");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/hash-transfer/profit/details?");
            urlBuilder_.Append(System.Uri.EscapeDataString("configId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pageIndex != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response93>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Hashrate Resale Request (USER_DATA)
        /// </summary>
        /// <param name="userName">Mining Account</param>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="toPoolUser">Mining Account</param>
        /// <param name="hashRate">Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining Account Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response94> ConfigAsync(string userName, string algo, string startDate, string endDate, string toPoolUser, string hashRate, long? recvWindow, long timestamp, string signature)
        {
            return ConfigAsync(userName, algo, startDate, endDate, toPoolUser, hashRate, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hashrate Resale Request (USER_DATA)
        /// </summary>
        /// <param name="userName">Mining Account</param>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="toPoolUser">Mining Account</param>
        /// <param name="hashRate">Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining Account Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response94> ConfigAsync(string userName, string algo, string startDate, string endDate, string toPoolUser, string hashRate, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (algo == null)
                throw new System.ArgumentNullException("algo");

            if (toPoolUser == null)
                throw new System.ArgumentNullException("toPoolUser");

            if (hashRate == null)
                throw new System.ArgumentNullException("hashRate");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/hash-transfer/config?");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("algo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("toPoolUser") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toPoolUser, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("hashRate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hashRate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response94>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Hashrate Resale configuration (USER_DATA)
        /// </summary>
        /// <param name="configId">Mining ID</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success flag</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response95> CancelAsync(string configId, string userName, long? recvWindow, long timestamp, string signature)
        {
            return CancelAsync(configId, userName, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Hashrate Resale configuration (USER_DATA)
        /// </summary>
        /// <param name="configId">Mining ID</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Success flag</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response95> CancelAsync(string configId, string userName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (configId == null)
                throw new System.ArgumentNullException("configId");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/hash-transfer/config/cancel?");
            urlBuilder_.Append(System.Uri.EscapeDataString("configId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(configId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response95>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Statistic List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining account statistics</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response96> Status3Async(string algo, string userName, long? recvWindow, long timestamp, string signature)
        {
            return Status3Async(algo, userName, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Statistic List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining account statistics</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response96> Status3Async(string algo, string userName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algo == null)
                throw new System.ArgumentNullException("algo");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/statistics/user/status?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response96>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Account List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of mining accounts</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response97> List5Async(string algo, string userName, long? recvWindow, long timestamp, string signature)
        {
            return List5Async(algo, userName, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account List (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="userName">Mining Account</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of mining accounts</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response97> List5Async(string algo, string userName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algo == null)
                throw new System.ArgumentNullException("algo");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/statistics/user/list?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("userName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response97>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mining Account Earning (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining account earnings</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response98> UidAsync(string algo, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature)
        {
            return UidAsync(algo, startDate, endDate, pageIndex, pageSize, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mining Account Earning (USER_DATA)
        /// </summary>
        /// <param name="algo">Algorithm(sha256)</param>
        /// <param name="startDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="endDate">Search date, millisecond timestamp, while empty query all</param>
        /// <param name="pageIndex">Page number, default is first page, start form 1</param>
        /// <param name="pageSize">Number of pages, minimum 10, maximum 200</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Mining account earnings</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response98> UidAsync(string algo, string startDate, string endDate, int? pageIndex, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algo == null)
                throw new System.ArgumentNullException("algo");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/mining/payment/uid?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response98>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// New Future Account Transfer (USER_DATA)
        /// </summary>
        /// <param name="type">1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Transfer</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response99> TransferPOST6Async(string asset, double amount, long type, long? recvWindow, long timestamp, string signature)
        {
            return TransferPOST6Async(asset, amount, type, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// New Future Account Transfer (USER_DATA)
        /// </summary>
        /// <param name="type">1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Transfer</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response99> TransferPOST6Async(string asset, double amount, long type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/futures/transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response99>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Future Account Transaction History List (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Transfer Query</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response100> TransferGET4Async(string asset, long startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature)
        {
            return TransferGET4Async(asset, startTime, endTime, current, size, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Future Account Transaction History List (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="size">Default:10 Max:100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Futures Transfer Query</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response100> TransferGET4Async(string asset, long startTime, long? endTime, int? current, int? size, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (startTime == null)
                throw new System.ArgumentNullException("startTime");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/futures/transfer?");
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response100>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cross-Collateral Borrow History (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Borrow History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response101> HistoryAsync(string coin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return HistoryAsync(coin, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Borrow History (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Borrow History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response101> HistoryAsync(string coin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/futures/loan/borrow/history?");
            if (coin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response101>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cross-Collateral Repayment History (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response102> History2Async(string coin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return History2Async(coin, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Repayment History (USER_DATA)
        /// </summary>
        /// <param name="coin">Coin name</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response102> History2Async(string coin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/futures/loan/repay/history?");
            if (coin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("coin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response102>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cross-Collateral Wallet V2 (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Wallet Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response103> WalletAsync(long? recvWindow, long timestamp, string signature)
        {
            return WalletAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Wallet V2 (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Wallet Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response103> WalletAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v2/futures/loan/wallet?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response103>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adjust Cross-Collateral LTV History (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Adjust Cross-Collateral LTV History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response104> History3Async(string loanCoin, string collateralCoin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return History3Async(loanCoin, collateralCoin, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adjust Cross-Collateral LTV History (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Adjust Cross-Collateral LTV History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response104> History3Async(string loanCoin, string collateralCoin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/futures/loan/adjustCollateral/history?");
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response104>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cross-Collateral Liquidation History (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Liquidation History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response105> LiquidationHistoryAsync(string loanCoin, string collateralCoin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return LiquidationHistoryAsync(loanCoin, collateralCoin, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Liquidation History (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Liquidation History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response105> LiquidationHistoryAsync(string loanCoin, string collateralCoin, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/futures/loan/liquidationHistory?");
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response105>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cross-Collateral Interest History (USER_DATA)
        /// </summary>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Interest History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response106> InterestHistory2Async(string collateralCoin, long? startTime, long? endTime, int? current, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return InterestHistory2Async(collateralCoin, startTime, endTime, current, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cross-Collateral Interest History (USER_DATA)
        /// </summary>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cross-Collateral Interest History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response106> InterestHistory2Async(string collateralCoin, long? startTime, long? endTime, int? current, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/futures/loan/interestHistory?");
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response106>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Volume Participation(VP) New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.</param>
        /// <param name="quantity">Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT</param>
        /// <param name="urgency">Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH</param>
        /// <param name="clientAlgoId">A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value</param>
        /// <param name="reduceOnly">'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position</param>
        /// <param name="limitPrice">Limit price of the order; If it is not sent, will place order by market price by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Volume Participation(VP) Order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response107> NewOrderVpAsync(string symbol, Side side, PositionSide? positionSide, double quantity, Urgency urgency, string clientAlgoId, bool? reduceOnly, double? limitPrice, long? recvWindow, long timestamp, string signature)
        {
            return NewOrderVpAsync(symbol, side, positionSide, quantity, urgency, clientAlgoId, reduceOnly, limitPrice, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Volume Participation(VP) New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.</param>
        /// <param name="quantity">Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT</param>
        /// <param name="urgency">Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH</param>
        /// <param name="clientAlgoId">A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value</param>
        /// <param name="reduceOnly">'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position</param>
        /// <param name="limitPrice">Limit price of the order; If it is not sent, will place order by market price by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Volume Participation(VP) Order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response107> NewOrderVpAsync(string symbol, Side side, PositionSide? positionSide, double quantity, Urgency urgency, string clientAlgoId, bool? reduceOnly, double? limitPrice, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (side == null)
                throw new System.ArgumentNullException("side");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (urgency == null)
                throw new System.ArgumentNullException("urgency");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/algo/futures/newOrderVp?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (positionSide != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionSide") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionSide, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("urgency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(urgency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (clientAlgoId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("clientAlgoId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientAlgoId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reduceOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reduceOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reduceOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limitPrice != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limitPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limitPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response107>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Time-Weighted Average Price(Twap) New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.</param>
        /// <param name="quantity">Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT</param>
        /// <param name="duration">Duration for TWAP orders in seconds. [300, 86400];Less than 5min =&gt; defaults to 5 min; Greater than 24h =&gt; defaults to 24h</param>
        /// <param name="clientAlgoId">A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value</param>
        /// <param name="reduceOnly">'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position</param>
        /// <param name="limitPrice">Limit price of the order; If it is not sent, will place order by market price by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Time-Weighted Average Price(Twap) New Order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response108> NewOrderTwapAsync(string symbol, Side side, PositionSide? positionSide, double quantity, long duration, string clientAlgoId, bool? reduceOnly, double? limitPrice, long? recvWindow, long timestamp, string signature)
        {
            return NewOrderTwapAsync(symbol, side, positionSide, quantity, duration, clientAlgoId, reduceOnly, limitPrice, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Time-Weighted Average Price(Twap) New Order (TRADE)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.</param>
        /// <param name="quantity">Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT</param>
        /// <param name="duration">Duration for TWAP orders in seconds. [300, 86400];Less than 5min =&gt; defaults to 5 min; Greater than 24h =&gt; defaults to 24h</param>
        /// <param name="clientAlgoId">A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value</param>
        /// <param name="reduceOnly">'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position</param>
        /// <param name="limitPrice">Limit price of the order; If it is not sent, will place order by market price by default</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Time-Weighted Average Price(Twap) New Order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response108> NewOrderTwapAsync(string symbol, Side side, PositionSide? positionSide, double quantity, long duration, string clientAlgoId, bool? reduceOnly, double? limitPrice, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (symbol == null)
                throw new System.ArgumentNullException("symbol");

            if (side == null)
                throw new System.ArgumentNullException("side");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (duration == null)
                throw new System.ArgumentNullException("duration");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/algo/futures/newOrderTwap?");
            urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (positionSide != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("positionSide") + "=").Append(System.Uri.EscapeDataString(ConvertToString(positionSide, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("duration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(duration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (clientAlgoId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("clientAlgoId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(clientAlgoId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reduceOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reduceOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reduceOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limitPrice != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limitPrice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limitPrice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response108>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Algo Order(TRADE)
        /// </summary>
        /// <param name="algoId">Eg. 14511</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response109> OrderDELETE3Async(long algoId, long? recvWindow, long timestamp, string signature)
        {
            return OrderDELETE3Async(algoId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Algo Order(TRADE)
        /// </summary>
        /// <param name="algoId">Eg. 14511</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Cancelled order</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response109> OrderDELETE3Async(long algoId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algoId == null)
                throw new System.ArgumentNullException("algoId");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/algo/futures/order?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algoId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algoId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response109>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Current Algo Open Orders (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Open Algo Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response110> OpenOrdersAsync(long? recvWindow, long timestamp, string signature)
        {
            return OpenOrdersAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Current Algo Open Orders (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Open Algo Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response110> OpenOrdersAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/algo/futures/openOrders?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response110>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Historical Algo Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="pageSize">Page size, minimum 1, maximum 100, default 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Historical Algo Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response111> HistoricalOrdersAsync(string symbol, Side2? side, long? startTime, long? endTime, int? page, string pageSize, long? recvWindow, long timestamp, string signature)
        {
            return HistoricalOrdersAsync(symbol, side, startTime, endTime, page, pageSize, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Historical Algo Orders (USER_DATA)
        /// </summary>
        /// <param name="symbol">Trading symbol, e.g. BNBUSDT</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="pageSize">Page size, minimum 1, maximum 100, default 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Historical Algo Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response111> HistoricalOrdersAsync(string symbol, Side2? side, long? startTime, long? endTime, int? page, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/algo/futures/historicalOrders?");
            if (symbol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("symbol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(symbol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (side != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("side") + "=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response111>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Sub Orders (USER_DATA)
        /// </summary>
        /// <param name="page">Default 1</param>
        /// <param name="pageSize">Page size, minimum 1, maximum 100, default 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Adjust Cross-Collateral LTV History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response112> SubOrdersAsync(long algoId, int? page, string pageSize, long? recvWindow, long timestamp, string signature)
        {
            return SubOrdersAsync(algoId, page, pageSize, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Sub Orders (USER_DATA)
        /// </summary>
        /// <param name="page">Default 1</param>
        /// <param name="pageSize">Page size, minimum 1, maximum 100, default 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Adjust Cross-Collateral LTV History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response112> SubOrdersAsync(long algoId, int? page, string pageSize, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (algoId == null)
                throw new System.ArgumentNullException("algoId");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/algo/futures/subOrders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("algoId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(algoId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response112>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Portfolio Margin Account Info (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Portfolio account.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response113> AccountGET8Async(long? recvWindow, long timestamp, string signature)
        {
            return AccountGET8Async(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Portfolio Margin Account Info (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Portfolio account.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response113> AccountGET8Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/portfolio/account?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response113>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Portfolio Margin Collateral Rate (MARKET_DATA)
        /// </summary>
        /// <returns>Portfolio Margin Collateral Rate.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous38>> CollateralRateAsync()
        {
            return CollateralRateAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Portfolio Margin Collateral Rate (MARKET_DATA)
        /// </summary>
        /// <returns>Portfolio Margin Collateral Rate.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous38>> CollateralRateAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/portfolio/collateralRate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous38>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Portfolio Margin Bankruptcy Loan Amount.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response114> PmLoanAsync(long? recvWindow, long timestamp, string signature)
        {
            return PmLoanAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Portfolio Margin Bankruptcy Loan Amount.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response114> PmLoanAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/portfolio/pmLoan?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response114>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response115> RepayPOST2Async(long? recvWindow, long timestamp, string signature)
        {
            return RepayPOST2Async(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Transaction.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response115> RepayPOST2Async(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/portfolio/repay?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response115>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// BLVT Info (MARKET_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <returns>List of token information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous39>> TokenInfoAsync(string tokenName)
        {
            return TokenInfoAsync(tokenName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// BLVT Info (MARKET_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <returns>List of token information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous39>> TokenInfoAsync(string tokenName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/blvt/tokenInfo?");
            if (tokenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tokenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tokenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous39>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Subscribe BLVT (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="cost">Spot balance</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Subscription Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response116> SubscribeAsync(string tokenName, double cost, long? recvWindow, long timestamp, string signature)
        {
            return SubscribeAsync(tokenName, cost, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Subscribe BLVT (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="cost">Spot balance</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Subscription Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response116> SubscribeAsync(string tokenName, double cost, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (tokenName == null)
                throw new System.ArgumentNullException("tokenName");

            if (cost == null)
                throw new System.ArgumentNullException("cost");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/blvt/subscribe?");
            urlBuilder_.Append(System.Uri.EscapeDataString("tokenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tokenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("cost") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cost, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response116>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query Subscription Record (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of subscription record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response117> RecordAsync(string tokenName, long? id, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return RecordAsync(tokenName, id, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query Subscription Record (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of subscription record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response117> RecordAsync(string tokenName, long? id, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/blvt/subscribe/record?");
            if (tokenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tokenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tokenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response117>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Redeem BLVT (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Redemption record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response118> Redeem3Async(string tokenName, double amount, long? recvWindow, long timestamp, string signature)
        {
            return Redeem3Async(tokenName, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeem BLVT (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Redemption record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response118> Redeem3Async(string tokenName, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (tokenName == null)
                throw new System.ArgumentNullException("tokenName");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/blvt/redeem?");
            urlBuilder_.Append(System.Uri.EscapeDataString("tokenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tokenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response118>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Redemption Record (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 1000, max 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of redemption record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous40>> RecordAllAsync(string tokenName, long? id, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return RecordAllAsync(tokenName, id, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redemption Record (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 1000, max 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of redemption record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous40>> RecordAllAsync(string tokenName, long? id, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/blvt/redeem/record?");
            if (tokenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tokenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tokenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous40>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// BLVT User Limit Info (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of token limits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous41>> UserLimitAsync(string tokenName, long? recvWindow, long timestamp, string signature)
        {
            return UserLimitAsync(tokenName, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// BLVT User Limit Info (USER_DATA)
        /// </summary>
        /// <param name="tokenName">BTCDOWN, BTCUP</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List of token limits</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous41>> UserLimitAsync(string tokenName, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/blvt/userLimit?");
            if (tokenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tokenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tokenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous41>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List All Swap Pools (MARKET_DATA)
        /// </summary>
        /// <returns>List of Swap Pools</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous42>> PoolsAsync()
        {
            return PoolsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List All Swap Pools (MARKET_DATA)
        /// </summary>
        /// <returns>List of Swap Pools</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous42>> PoolsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/pools");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous42>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Liquidity information of a pool (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pool Liquidation information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous43>> LiquidityAsync(long? poolId, long? recvWindow, long timestamp, string signature)
        {
            return LiquidityAsync(poolId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liquidity information of a pool (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pool Liquidation information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous43>> LiquidityAsync(long? poolId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/liquidity?");
            if (poolId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous43>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add Liquidity (TRADE)
        /// </summary>
        /// <param name="type">* `Single` - to add a single token
        /// <br/>* `Combination` - to add dual tokens</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response119> LiquidityAddAsync(long poolId, Type11? type, string asset, double quantity, long? recvWindow, long timestamp, string signature)
        {
            return LiquidityAddAsync(poolId, type, asset, quantity, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Liquidity (TRADE)
        /// </summary>
        /// <param name="type">* `Single` - to add a single token
        /// <br/>* `Combination` - to add dual tokens</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response119> LiquidityAddAsync(long poolId, Type11? type, string asset, double quantity, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (poolId == null)
                throw new System.ArgumentNullException("poolId");

            if (asset == null)
                throw new System.ArgumentNullException("asset");

            if (quantity == null)
                throw new System.ArgumentNullException("quantity");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/liquidityAdd?");
            urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response119>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Liquidity (TRADE)
        /// </summary>
        /// <param name="type">* `SINGLE` - for single asset removal
        /// <br/>* `COMBINATION` - for combination of all coins removal</param>
        /// <param name="asset">Mandatory for single asset removal</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response120> LiquidityRemoveAsync(long poolId, Type12 type, string asset, double shareAmount, long? recvWindow, long timestamp, string signature)
        {
            return LiquidityRemoveAsync(poolId, type, asset, shareAmount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Liquidity (TRADE)
        /// </summary>
        /// <param name="type">* `SINGLE` - for single asset removal
        /// <br/>* `COMBINATION` - for combination of all coins removal</param>
        /// <param name="asset">Mandatory for single asset removal</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Operation Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response120> LiquidityRemoveAsync(long poolId, Type12 type, string asset, double shareAmount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (poolId == null)
                throw new System.ArgumentNullException("poolId");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (shareAmount == null)
                throw new System.ArgumentNullException("shareAmount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/liquidityRemove?");
            urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("shareAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shareAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response120>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Liquidity Operation Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Liquidity Operation Record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous44>> LiquidityOpsAsync(long? operationId, long? poolId, Operation? operation, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return LiquidityOpsAsync(operationId, poolId, operation, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liquidity Operation Record (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 500; max 1000.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Liquidity Operation Record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous44>> LiquidityOpsAsync(long? operationId, long? poolId, Operation? operation, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/liquidityOps?");
            if (operationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("operationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (poolId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (operation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("operation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous44>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Request Quote (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quote Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response121> QuoteAsync(string quoteAsset, string baseAsset, double quoteQty, long? recvWindow, long timestamp, string signature)
        {
            return QuoteAsync(quoteAsset, baseAsset, quoteQty, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request Quote (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quote Info</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response121> QuoteAsync(string quoteAsset, string baseAsset, double quoteQty, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (quoteAsset == null)
                throw new System.ArgumentNullException("quoteAsset");

            if (baseAsset == null)
                throw new System.ArgumentNullException("baseAsset");

            if (quoteQty == null)
                throw new System.ArgumentNullException("quoteQty");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/quote?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("baseAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(baseAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response121>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Swap (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Swap Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response122> SwapAsync(string quoteAsset, string baseAsset, double quoteQty, long? recvWindow, long timestamp, string signature)
        {
            return SwapAsync(quoteAsset, baseAsset, quoteQty, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Swap (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Swap Id</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response122> SwapAsync(string quoteAsset, string baseAsset, double quoteQty, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (quoteAsset == null)
                throw new System.ArgumentNullException("quoteAsset");

            if (baseAsset == null)
                throw new System.ArgumentNullException("baseAsset");

            if (quoteQty == null)
                throw new System.ArgumentNullException("quoteQty");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/swap?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("baseAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(baseAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response122>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Swap History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="status">* `0` - pending for swap
        /// <br/>* `1` - success
        /// <br/>* `2` - failed</param>
        /// <param name="limit">default 3, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Swap History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous45>> SwapAllAsync(long? swapId, long? startTime, long? endTime, Status5? status, string quoteAsset, string baseAsset, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return SwapAllAsync(swapId, startTime, endTime, status, quoteAsset, baseAsset, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Swap History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="status">* `0` - pending for swap
        /// <br/>* `1` - success
        /// <br/>* `2` - failed</param>
        /// <param name="limit">default 3, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Swap History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous45>> SwapAllAsync(long? swapId, long? startTime, long? endTime, Status5? status, string quoteAsset, string baseAsset, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/swap?");
            if (swapId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("swapId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(swapId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (quoteAsset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("quoteAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (baseAsset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("baseAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(baseAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous45>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Pool Configure (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pool Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous46>> PoolConfigureAsync(long? poolId, long? recvWindow, long timestamp, string signature)
        {
            return PoolConfigureAsync(poolId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Pool Configure (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pool Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous46>> PoolConfigureAsync(long? poolId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/poolConfigure?");
            if (poolId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous46>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add Liquidity Preview (USER_DATA)
        /// </summary>
        /// <param name="type">* `SINGLE` - for adding a single token
        /// <br/>* `COMBINATION` - for adding dual tokens</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Add Liquidity Preview</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BswapAddLiquidityPreviewCombination> AddLiquidityPreviewAsync(long poolId, Type13 type, string quoteAsset, double quoteQty, long? recvWindow, long timestamp, string signature)
        {
            return AddLiquidityPreviewAsync(poolId, type, quoteAsset, quoteQty, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Liquidity Preview (USER_DATA)
        /// </summary>
        /// <param name="type">* `SINGLE` - for adding a single token
        /// <br/>* `COMBINATION` - for adding dual tokens</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Add Liquidity Preview</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BswapAddLiquidityPreviewCombination> AddLiquidityPreviewAsync(long poolId, Type13 type, string quoteAsset, double quoteQty, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (poolId == null)
                throw new System.ArgumentNullException("poolId");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (quoteAsset == null)
                throw new System.ArgumentNullException("quoteAsset");

            if (quoteQty == null)
                throw new System.ArgumentNullException("quoteQty");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/addLiquidityPreview?");
            urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteQty") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteQty, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BswapAddLiquidityPreviewCombination>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Liquidity Preview (USER_DATA)
        /// </summary>
        /// <param name="type">* `SINGLE` - remove and obtain a single token
        /// <br/>* `COMBINATION` - remove and obtain dual token</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Remove Liquidity Preview</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BswapRmvLiquidityPreviewCombination> RemoveLiquidityPreviewAsync(long poolId, Type14 type, string quoteAsset, double shareAmount, long? recvWindow, long timestamp, string signature)
        {
            return RemoveLiquidityPreviewAsync(poolId, type, quoteAsset, shareAmount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Liquidity Preview (USER_DATA)
        /// </summary>
        /// <param name="type">* `SINGLE` - remove and obtain a single token
        /// <br/>* `COMBINATION` - remove and obtain dual token</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Remove Liquidity Preview</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BswapRmvLiquidityPreviewCombination> RemoveLiquidityPreviewAsync(long poolId, Type14 type, string quoteAsset, double shareAmount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (poolId == null)
                throw new System.ArgumentNullException("poolId");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (quoteAsset == null)
                throw new System.ArgumentNullException("quoteAsset");

            if (shareAmount == null)
                throw new System.ArgumentNullException("shareAmount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/removeLiquidityPreview?");
            urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("shareAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shareAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BswapRmvLiquidityPreviewCombination>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Unclaimed Rewards Record (USER_DATA)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Unclaimed rewards record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response123> UnclaimedRewardsAsync(int? type, long? recvWindow, long timestamp, string signature)
        {
            return UnclaimedRewardsAsync(type, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Unclaimed Rewards Record (USER_DATA)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Unclaimed rewards record</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response123> UnclaimedRewardsAsync(int? type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/unclaimedRewards?");
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response123>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Claim rewards (TRADE)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Result of claim</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response124> ClaimRewardsAsync(int? type, long? recvWindow, long timestamp, string signature)
        {
            return ClaimRewardsAsync(type, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Claim rewards (TRADE)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Result of claim</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response124> ClaimRewardsAsync(int? type, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/claimRewards?");
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response124>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Claimed History (USER_DATA)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 3, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Claimed History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous47>> ClaimedHistoryAsync(long? poolId, string assetRewards, int? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return ClaimedHistoryAsync(poolId, assetRewards, type, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Claimed History (USER_DATA)
        /// </summary>
        /// <param name="type">0: Swap rewards, 1: Liquidity rewards, default to 0</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 3, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Claimed History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous47>> ClaimedHistoryAsync(long? poolId, string assetRewards, int? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/bswap/claimedHistory?");
            if (poolId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("poolId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(poolId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (assetRewards != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("assetRewards") + "=").Append(System.Uri.EscapeDataString(ConvertToString(assetRewards, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous47>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get C2C Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTimestamp">UTC timestamp in ms</param>
        /// <param name="endTimestamp">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">default 100, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Trades history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response125> ListUserOrderHistoryAsync(TradeType tradeType, long? startTimestamp, long? endTimestamp, int? page, int? rows, long? recvWindow, long timestamp, string signature)
        {
            return ListUserOrderHistoryAsync(tradeType, startTimestamp, endTimestamp, page, rows, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get C2C Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTimestamp">UTC timestamp in ms</param>
        /// <param name="endTimestamp">UTC timestamp in ms</param>
        /// <param name="page">Default 1</param>
        /// <param name="rows">default 100, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Trades history</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response125> ListUserOrderHistoryAsync(TradeType tradeType, long? startTimestamp, long? endTimestamp, int? page, int? rows, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (tradeType == null)
                throw new System.ArgumentNullException("tradeType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/c2c/orderMatch/listUserOrderHistory?");
            urlBuilder_.Append(System.Uri.EscapeDataString("tradeType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tradeType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startTimestamp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTimestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTimestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTimestamp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTimestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTimestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rows") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response125>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get VIP Loan Ongoing Orders (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 10; max 100.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Ongoing VIP Loan Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response126> Orders2Async(long? orderId, long? collateralAccountId, string loanCoin, string collateralCoin, int? current, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return Orders2Async(orderId, collateralAccountId, loanCoin, collateralCoin, current, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get VIP Loan Ongoing Orders (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 10; max 100.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Ongoing VIP Loan Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response126> Orders2Async(long? orderId, long? collateralAccountId, string loanCoin, string collateralCoin, int? current, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/vip/ongoing/orders?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response126>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// VIP Loan Repay (TRADE)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Loan Repayment</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response127> RepayPOST3Async(long? orderId, double amount, long? recvWindow, long timestamp, string signature)
        {
            return RepayPOST3Async(orderId, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// VIP Loan Repay (TRADE)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Loan Repayment</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response127> RepayPOST3Async(long? orderId, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/vip/repay?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response127>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get VIP Loan Repayment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 10; max 100.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Loan Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response128> History4Async(long? orderId, string loanCoin, long? startTime, long? endTime, int? current, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return History4Async(orderId, loanCoin, startTime, endTime, current, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get VIP Loan Repayment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">Default 10; max 100.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Loan Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response128> History4Async(long? orderId, string loanCoin, long? startTime, long? endTime, int? current, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/vip/repay/history?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response128>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check Locked Value of VIP Collateral Account (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Locked Value</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response129> AccountGET9Async(long? orderId, long? collateralAccountId, long? recvWindow, long timestamp, string signature)
        {
            return AccountGET9Async(orderId, collateralAccountId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check Locked Value of VIP Collateral Account (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order id</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>VIP Locked Value</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response129> AccountGET9Async(long? orderId, long? collateralAccountId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/vip/collateral/account?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response129>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Crypto Loans Income History (USER_DATA)
        /// </summary>
        /// <param name="type">All types will be returned by default.
        /// <br/>* `borrowIn`
        /// <br/>* `collateralSpent`
        /// <br/>* `repayAmount`
        /// <br/>* `collateralReturn` - Collateral return after repayment
        /// <br/>* `addCollateral`
        /// <br/>* `removeCollateral`
        /// <br/>* `collateralReturnAfterLiquidation`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 20, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous48>> IncomeAsync(string asset, Type15? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return IncomeAsync(asset, type, startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Crypto Loans Income History (USER_DATA)
        /// </summary>
        /// <param name="type">All types will be returned by default.
        /// <br/>* `borrowIn`
        /// <br/>* `collateralSpent`
        /// <br/>* `repayAmount`
        /// <br/>* `collateralReturn` - Collateral return after repayment
        /// <br/>* `addCollateral`
        /// <br/>* `removeCollateral`
        /// <br/>* `collateralReturnAfterLiquidation`</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 20, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous48>> IncomeAsync(string asset, Type15? type, long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/income?");
            if (asset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous48>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Crypto Loan Borrow (TRADE)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="loanAmount">Mandatory when collateralAmount is empty</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="collateralAmount">Mandatory when loanAmount is empty</param>
        /// <param name="loanTerm">7/14/30/90/180 days</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Borrow Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response130> BorrowAsync(string loanCoin, double? loanAmount, string collateralCoin, double? collateralAmount, int loanTerm, long? recvWindow, long timestamp, string signature)
        {
            return BorrowAsync(loanCoin, loanAmount, collateralCoin, collateralAmount, loanTerm, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Loan Borrow (TRADE)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="loanAmount">Mandatory when collateralAmount is empty</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="collateralAmount">Mandatory when loanAmount is empty</param>
        /// <param name="loanTerm">7/14/30/90/180 days</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Borrow Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response130> BorrowAsync(string loanCoin, double? loanAmount, string collateralCoin, double? collateralAmount, int loanTerm, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (loanCoin == null)
                throw new System.ArgumentNullException("loanCoin");

            if (collateralCoin == null)
                throw new System.ArgumentNullException("collateralCoin");

            if (loanTerm == null)
                throw new System.ArgumentNullException("loanTerm");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/borrow?");
            urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (loanAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (collateralAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("loanTerm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanTerm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response130>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Crypto Loans Borrow History (USER_DATA)
        /// </summary>
        /// <param name="orderId">orderId in POST /sapi/v1/loan/borrow</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Borrow History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response131> History5Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature)
        {
            return History5Async(orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Crypto Loans Borrow History (USER_DATA)
        /// </summary>
        /// <param name="orderId">orderId in POST /sapi/v1/loan/borrow</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Borrow History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response131> History5Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/borrow/history?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response131>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Loan Ongoing Orders (USER_DATA)
        /// </summary>
        /// <param name="orderId">orderId in POST /sapi/v1/loan/borrow</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="current">Current querying page. Start from 1; default:1, max:1000</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Ongoing Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response132> Orders3Async(long? orderId, string loanCoin, string collateralCoin, int? current, long? limit, long? recvWindow, long timestamp, string signature)
        {
            return Orders3Async(orderId, loanCoin, collateralCoin, current, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loan Ongoing Orders (USER_DATA)
        /// </summary>
        /// <param name="orderId">orderId in POST /sapi/v1/loan/borrow</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="current">Current querying page. Start from 1; default:1, max:1000</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Ongoing Orders</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response132> Orders3Async(long? orderId, string loanCoin, string collateralCoin, int? current, long? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/ongoing/orders?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response132>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Crypto Loan Repay (TRADE)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="amount">Repayment Amount</param>
        /// <param name="type">Default: 1. 1 for 'repay with borrowed coin'; 2 for 'repay with collateral'.</param>
        /// <param name="collateralReturn">Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Repayment Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RepaymentInfo> RepayPOST4Async(long orderId, double amount, int? type, bool? collateralReturn, long? recvWindow, long timestamp, string signature)
        {
            return RepayPOST4Async(orderId, amount, type, collateralReturn, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Loan Repay (TRADE)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="amount">Repayment Amount</param>
        /// <param name="type">Default: 1. 1 for 'repay with borrowed coin'; 2 for 'repay with collateral'.</param>
        /// <param name="collateralReturn">Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Repayment Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RepaymentInfo> RepayPOST4Async(long orderId, double amount, int? type, bool? collateralReturn, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/repay?");
            urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralReturn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralReturn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralReturn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RepaymentInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Loan Repayment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response133> History6Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature)
        {
            return History6Async(orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loan Repayment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loan Repayment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response133> History6Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/repay/history?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response133>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Crypto Loan Adjust LTV (TRADE)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="amount">Amount</param>
        /// <param name="direction">'ADDITIONAL', 'REDUCED'</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>LTV Adjust</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response134> LtvAsync(long orderId, double amount, Direction direction, long? recvWindow, long timestamp, string signature)
        {
            return LtvAsync(orderId, amount, direction, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Loan Adjust LTV (TRADE)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="amount">Amount</param>
        /// <param name="direction">'ADDITIONAL', 'REDUCED'</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>LTV Adjust</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response134> LtvAsync(long orderId, double amount, Direction direction, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (direction == null)
                throw new System.ArgumentNullException("direction");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/adjust/ltv?");
            urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response134>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Loan LTV Adjustment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>LTV Adjustment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response135> History7Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature)
        {
            return History7Async(orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loan LTV Adjustment History (USER_DATA)
        /// </summary>
        /// <param name="orderId">Order ID</param>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="current">Current querying page. Start from 1. Default:1</param>
        /// <param name="limit">default 10, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>LTV Adjustment History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response135> History7Async(long? orderId, string loanCoin, string collateralCoin, long? startTime, long? endTime, int? current, long? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/ltv/adjustment/history?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (current != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("current") + "=").Append(System.Uri.EscapeDataString(ConvertToString(current, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response135>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Loanable Assets Data (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loanable Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response136> DataAsync(string loanCoin, int? vipLevel, long? recvWindow, long timestamp, string signature)
        {
            return DataAsync(loanCoin, vipLevel, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Loanable Assets Data (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Loanable Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response136> DataAsync(string loanCoin, int? vipLevel, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/loanable/data?");
            if (loanCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vipLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vipLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vipLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response136>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Collateral Assets Data (USER_DATA)
        /// </summary>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response137> Data2Async(string collateralCoin, int? vipLevel, long? recvWindow, long timestamp, string signature)
        {
            return Data2Async(collateralCoin, vipLevel, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Collateral Assets Data (USER_DATA)
        /// </summary>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="vipLevel">Defaults to user's vip level</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response137> Data2Async(string collateralCoin, int? vipLevel, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/collateral/data?");
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vipLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vipLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vipLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response137>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check Collateral Repay Rate (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="repayAmount">repay amount of loanCoin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response138> RateAsync(string loanCoin, string collateralCoin, decimal repayAmount, long? recvWindow, long timestamp, string signature)
        {
            return RateAsync(loanCoin, collateralCoin, repayAmount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check Collateral Repay Rate (USER_DATA)
        /// </summary>
        /// <param name="loanCoin">Coin loaned</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="repayAmount">repay amount of loanCoin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response138> RateAsync(string loanCoin, string collateralCoin, decimal repayAmount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (loanCoin == null)
                throw new System.ArgumentNullException("loanCoin");

            if (collateralCoin == null)
                throw new System.ArgumentNullException("collateralCoin");

            if (repayAmount == null)
                throw new System.ArgumentNullException("repayAmount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/repay/collateral/rate?");
            urlBuilder_.Append(System.Uri.EscapeDataString("loanCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loanCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("repayAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(repayAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response138>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Pay Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 100, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pay History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response139> TransactionsAsync(long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return TransactionsAsync(startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Pay Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 100, max 100</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Pay History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response139> TransactionsAsync(long? startTime, long? endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/pay/transactions?");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response139>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List All Convert Pairs (USER_DATA)
        /// </summary>
        /// <param name="fromAsset">User spends coin</param>
        /// <param name="toAsset">User receives coin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List Convert Pairs</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous49>> ExchangeInfoAllAsync(string fromAsset, string toAsset, long? recvWindow, long timestamp, string signature)
        {
            return ExchangeInfoAllAsync(fromAsset, toAsset, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List All Convert Pairs (USER_DATA)
        /// </summary>
        /// <param name="fromAsset">User spends coin</param>
        /// <param name="toAsset">User receives coin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>List Convert Pairs</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous49>> ExchangeInfoAllAsync(string fromAsset, string toAsset, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/convert/exchangeInfo?");
            if (fromAsset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toAsset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous49>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query order quantity precision per asset (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset Precision Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous50>> AssetInfoAsync(long? recvWindow, long timestamp, string signature)
        {
            return AssetInfoAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query order quantity precision per asset (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset Precision Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous50>> AssetInfoAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/convert/assetInfo?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous50>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send quote request (USER_DATA)
        /// </summary>
        /// <param name="fromAmount">When specified, it is the amount you will be debited after the conversion</param>
        /// <param name="toAmount">When specified, it is the amount you will be debited after the conversion</param>
        /// <param name="validTime">10s, 30s, 1m, 2m, default 10s</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quote Request</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response140> GetQuoteAsync(string fromAsset, string toAsset, decimal? fromAmount, decimal? toAmount, ValidTime? validTime, long? recvWindow, long timestamp, string signature)
        {
            return GetQuoteAsync(fromAsset, toAsset, fromAmount, toAmount, validTime, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send quote request (USER_DATA)
        /// </summary>
        /// <param name="fromAmount">When specified, it is the amount you will be debited after the conversion</param>
        /// <param name="toAmount">When specified, it is the amount you will be debited after the conversion</param>
        /// <param name="validTime">10s, 30s, 1m, 2m, default 10s</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Quote Request</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response140> GetQuoteAsync(string fromAsset, string toAsset, decimal? fromAmount, decimal? toAmount, ValidTime? validTime, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (fromAsset == null)
                throw new System.ArgumentNullException("fromAsset");

            if (toAsset == null)
                throw new System.ArgumentNullException("toAsset");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/convert/getQuote?");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toAsset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toAsset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fromAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (validTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("validTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(validTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response140>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Accept Quote (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Accept Quote</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response141> AcceptQuoteAsync(string quoteId, long? recvWindow, long timestamp, string signature)
        {
            return AcceptQuoteAsync(quoteId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Accept Quote (TRADE)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Accept Quote</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response141> AcceptQuoteAsync(string quoteId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (quoteId == null)
                throw new System.ArgumentNullException("quoteId");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/convert/acceptQuote?");
            urlBuilder_.Append(System.Uri.EscapeDataString("quoteId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(quoteId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response141>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Order status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order Status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response142> OrderStatusAsync(string orderId, long? recvWindow, long timestamp, string signature)
        {
            return OrderStatusAsync(orderId, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Order status (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Order Status</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response142> OrderStatusAsync(string orderId, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/convert/orderStatus?");
            urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response142>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Convert Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 100, max 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Convert Trade History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response143> TradeFlowAsync(long startTime, long endTime, int? limit, long? recvWindow, long timestamp, string signature)
        {
            return TradeFlowAsync(startTime, endTime, limit, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Convert Trade History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">default 100, max 1000</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Convert Trade History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response143> TradeFlowAsync(long startTime, long endTime, int? limit, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (startTime == null)
                throw new System.ArgumentNullException("startTime");

            if (endTime == null)
                throw new System.ArgumentNullException("endTime");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/convert/tradeFlow?");
            urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response143>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Spot Rebate History Records (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Rebate History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response144> TaxQueryAsync(long? startTime, long? endTime, int? page, long? recvWindow, long timestamp, string signature)
        {
            return TaxQueryAsync(startTime, endTime, page, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Spot Rebate History Records (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="page">default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Rebate History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response144> TaxQueryAsync(long? startTime, long? endTime, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/rebate/taxQuery?");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response144>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get NFT Transaction History (USER_DATA)
        /// </summary>
        /// <param name="orderType">0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Transaction History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response145> Transactions2Async(int orderType, long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature)
        {
            return Transactions2Async(orderType, startTime, endTime, limit, page, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT Transaction History (USER_DATA)
        /// </summary>
        /// <param name="orderType">0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee</param>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Transaction History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response145> Transactions2Async(int orderType, long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (orderType == null)
                throw new System.ArgumentNullException("orderType");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/nft/history/transactions?");
            urlBuilder_.Append(System.Uri.EscapeDataString("orderType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response145>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get NFT Deposit History(USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Deposit History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response146> DepositGETAsync(long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature)
        {
            return DepositGETAsync(startTime, endTime, limit, page, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT Deposit History(USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Deposit History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response146> DepositGETAsync(long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/nft/history/deposit?");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response146>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get NFT Withdraw History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Withdraw History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response147> WithdrawGETAsync(long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature)
        {
            return WithdrawGETAsync(startTime, endTime, limit, page, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT Withdraw History (USER_DATA)
        /// </summary>
        /// <param name="startTime">UTC timestamp in ms</param>
        /// <param name="endTime">UTC timestamp in ms</param>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>NFT Withdraw History</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response147> WithdrawGETAsync(long? startTime, long? endTime, int? limit, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/nft/history/withdraw?");
            if (startTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response147>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get NFT Asset (USER_DATA)
        /// </summary>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response148> GetAssetAsync(int? limit, int? page, long? recvWindow, long timestamp, string signature)
        {
            return GetAssetAsync(limit, page, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get NFT Asset (USER_DATA)
        /// </summary>
        /// <param name="limit">Default 50, Max 50</param>
        /// <param name="page">Default 1</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Asset Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response148> GetAssetAsync(int? limit, int? page, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/nft/user/getAsset?");
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response148>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="token">The coin type contained in the Binance Code</param>
        /// <param name="amount">The amount of the coin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code creation</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response149> CreateCodeAsync(string token, double amount, long? recvWindow, long timestamp, string signature)
        {
            return CreateCodeAsync(token, amount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="token">The coin type contained in the Binance Code</param>
        /// <param name="amount">The amount of the coin</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code creation</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response149> CreateCodeAsync(string token, double amount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (token == null)
                throw new System.ArgumentNullException("token");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/giftcard/createCode?");
            urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response149>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Redeem a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="code">Binance Code</param>
        /// <param name="externalUid">Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Redeemed Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response150> RedeemCodeAsync(string code, string externalUid, long? recvWindow, long timestamp, string signature)
        {
            return RedeemCodeAsync(code, externalUid, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Redeem a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="code">Binance Code</param>
        /// <param name="externalUid">Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Redeemed Information</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response150> RedeemCodeAsync(string code, string externalUid, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (code == null)
                throw new System.ArgumentNullException("code");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/giftcard/redeemCode?");
            urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (externalUid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("externalUid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(externalUid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response150>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Verify a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="referenceNo">reference number</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code Verification</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response151> VerifyAsync(string referenceNo, long? recvWindow, long timestamp, string signature)
        {
            return VerifyAsync(referenceNo, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Verify a Binance Code (USER_DATA)
        /// </summary>
        /// <param name="referenceNo">reference number</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code Verification</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response151> VerifyAsync(string referenceNo, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (referenceNo == null)
                throw new System.ArgumentNullException("referenceNo");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/giftcard/verify?");
            urlBuilder_.Append(System.Uri.EscapeDataString("referenceNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response151>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch RSA Public Key (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>RSA Public Key.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response152> RsaPublicKeyAsync(long? recvWindow, long timestamp, string signature)
        {
            return RsaPublicKeyAsync(recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch RSA Public Key (USER_DATA)
        /// </summary>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>RSA Public Key.</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response152> RsaPublicKeyAsync(long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/giftcard/cryptography/rsa-public-key?");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response152>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Buy a Binance Code (TRADE)
        /// </summary>
        /// <param name="baseToken">The token you want to pay, example BUSD</param>
        /// <param name="faceToken">The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint.</param>
        /// <param name="baseTokenAmount">The base token asset quantity, example  1.002</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code creation</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response153> BuyCodeAsync(string baseToken, string faceToken, double baseTokenAmount, long? recvWindow, long timestamp, string signature)
        {
            return BuyCodeAsync(baseToken, faceToken, baseTokenAmount, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Buy a Binance Code (TRADE)
        /// </summary>
        /// <param name="baseToken">The token you want to pay, example BUSD</param>
        /// <param name="faceToken">The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint.</param>
        /// <param name="baseTokenAmount">The base token asset quantity, example  1.002</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Code creation</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response153> BuyCodeAsync(string baseToken, string faceToken, double baseTokenAmount, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (baseToken == null)
                throw new System.ArgumentNullException("baseToken");

            if (faceToken == null)
                throw new System.ArgumentNullException("faceToken");

            if (baseTokenAmount == null)
                throw new System.ArgumentNullException("baseTokenAmount");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/giftcard/buyCode?");
            urlBuilder_.Append(System.Uri.EscapeDataString("baseToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(baseToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("faceToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(faceToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("baseTokenAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(baseTokenAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response153>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch Token Limit (USER_DATA)
        /// </summary>
        /// <param name="baseToken">The token you want to pay, example BUSD</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Token limit</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response154> TokenLimitAsync(string baseToken, long? recvWindow, long timestamp, string signature)
        {
            return TokenLimitAsync(baseToken, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch Token Limit (USER_DATA)
        /// </summary>
        /// <param name="baseToken">The token you want to pay, example BUSD</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Token limit</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response154> TokenLimitAsync(string baseToken, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (baseToken == null)
                throw new System.ArgumentNullException("baseToken");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/giftcard/buyCode/token-limit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("baseToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(baseToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response154>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new BinanceSpotApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new BinanceSpotApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IMarginClient
    {
        /// <summary>
        /// Crypto Loan Customize Margin Call (TRADE)
        /// </summary>
        /// <param name="orderId">Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response155> CallAsync(long? orderId, string collateralCoin, decimal marginCall, long? recvWindow, long timestamp, string signature);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Loan Customize Margin Call (TRADE)
        /// </summary>
        /// <param name="orderId">Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response155> CallAsync(long? orderId, string collateralCoin, decimal marginCall, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginClient : IMarginClient
    {
        private string _baseUrl = "https://api.binance.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public MarginClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Crypto Loan Customize Margin Call (TRADE)
        /// </summary>
        /// <param name="orderId">Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response155> CallAsync(long? orderId, string collateralCoin, decimal marginCall, long? recvWindow, long timestamp, string signature)
        {
            return CallAsync(orderId, collateralCoin, marginCall, recvWindow, timestamp, signature, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crypto Loan Customize Margin Call (TRADE)
        /// </summary>
        /// <param name="orderId">Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.</param>
        /// <param name="collateralCoin">Coin used as collateral</param>
        /// <param name="recvWindow">The value cannot be greater than 60000</param>
        /// <param name="timestamp">UTC timestamp in ms</param>
        /// <param name="signature">Signature</param>
        /// <returns>Collateral Assets Data</returns>
        /// <exception cref="BinanceSpotApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response155> CallAsync(long? orderId, string collateralCoin, decimal marginCall, long? recvWindow, long timestamp, string signature, System.Threading.CancellationToken cancellationToken)
        {
            if (marginCall == null)
                throw new System.ArgumentNullException("marginCall");

            if (timestamp == null)
                throw new System.ArgumentNullException("timestamp");

            if (signature == null)
                throw new System.ArgumentNullException("signature");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/sapi/v1/loan/customize/margin_call?");
            if (orderId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collateralCoin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collateralCoin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collateralCoin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("marginCall") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marginCall, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (recvWindow != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recvWindow") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recvWindow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("timestamp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timestamp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("signature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(signature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response155>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BinanceSpotApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BinanceSpotApiException<Error>("Unauthorized Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BinanceSpotApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new BinanceSpotApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new BinanceSpotApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account
    {

        [System.Text.Json.Serialization.JsonPropertyName("makerCommission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MakerCommission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("takerCommission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TakerCommission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("buyerCommission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long BuyerCommission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sellerCommission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long SellerCommission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canTrade")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanTrade { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canWithdraw")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanWithdraw { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canDeposit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanDeposit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("brokered")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Brokered { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("balances")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Balances> Balances { get; set; } = new System.Collections.ObjectModel.Collection<Balances>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Account FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Account>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Order
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        /// <summary>
        /// Unless OCO, value will be -1
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Order FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Order>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OcoOrder
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders>();

        [System.Text.Json.Serialization.JsonPropertyName("orderReports")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderReports> OrderReports { get; set; } = new System.Collections.ObjectModel.Collection<OrderReports>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OcoOrder FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OcoOrder>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginOcoOrder
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders2> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders2>();

        [System.Text.Json.Serialization.JsonPropertyName("orderReports")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderReports2> OrderReports { get; set; } = new System.Collections.ObjectModel.Collection<OrderReports2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginOcoOrder FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginOcoOrder>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        /// <summary>
        /// Unless OCO, value will be -1
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stopPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StopPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icebergQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IcebergQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isWorking")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsWorking { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQuoteOrderQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQuoteOrderQty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrderDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrderDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderResponseAck
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrderResponseAck FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrderResponseAck>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderResponseResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("strategyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long StrategyId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("strategyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long StrategyType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrderResponseResult FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrderResponseResult>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderResponseFull
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("strategyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long StrategyId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("strategyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long StrategyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fills")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Fills> Fills { get; set; } = new System.Collections.ObjectModel.Collection<Fills>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrderResponseFull FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrderResponseFull>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginOrder
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginOrder FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginOrder>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginOrderDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icebergQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IcebergQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isWorking")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsWorking { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stopPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StopPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginOrderDetail FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginOrderDetail>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CanceledMarginOrderDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CanceledMarginOrderDetail FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CanceledMarginOrderDetail>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginOrderResponseAck
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginOrderResponseAck FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginOrderResponseAck>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginOrderResponseResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginOrderResponseResult FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginOrderResponseResult>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginOrderResponseFull
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        /// <summary>
        /// will not return if no margin trade happens
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("marginBuyBorrowAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double MarginBuyBorrowAmount { get; set; }

        /// <summary>
        /// will not return if no margin trade happens
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("marginBuyBorrowAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginBuyBorrowAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fills")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Fills2> Fills { get; set; } = new System.Collections.ObjectModel.Collection<Fills2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginOrderResponseFull FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginOrderResponseFull>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginTrade
    {

        [System.Text.Json.Serialization.JsonPropertyName("commission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Commission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("commissionAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CommissionAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBestMatch")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBestMatch { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBuyer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBuyer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMaker")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMaker { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginTrade FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginTrade>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginTransferDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginTransferDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginTransferDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsolatedMarginAccountInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("assets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Assets> Assets { get; set; } = new System.Collections.ObjectModel.Collection<Assets>();

        [System.Text.Json.Serialization.JsonPropertyName("totalAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalLiabilityOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalLiabilityOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalNetAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalNetAssetOfBtc { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IsolatedMarginAccountInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IsolatedMarginAccountInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BookTickerList : System.Collections.ObjectModel.Collection<BookTicker>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BookTickerList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BookTickerList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BookTicker
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bidPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BidPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bidQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BidQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("askPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AskPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("askQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AskQty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BookTicker FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BookTicker>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceTickerList : System.Collections.ObjectModel.Collection<PriceTicker>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PriceTickerList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PriceTickerList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceTicker
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PriceTicker FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PriceTicker>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepaymentInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("remainingPrincipal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RemainingPrincipal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("remainingInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RemainingInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("remainingCollateral")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RemainingCollateral { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currentLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrentLTV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RepaymentInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RepaymentInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepaymentInfo2
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RepaymentInfo2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RepaymentInfo2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TickerList : System.Collections.ObjectModel.Collection<Ticker>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TickerList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<TickerList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ticker
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceChange")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PriceChange { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceChangePercent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PriceChangePercent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("prevClosePrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PrevClosePrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bidPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BidPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bidQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BidQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("askPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AskPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("askQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AskQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("openPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("highPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HighPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lowPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LowPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("volume")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Volume { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteVolume")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteVolume { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("openTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OpenTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("closeTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CloseTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long FirstId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long LastId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Ticker FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Ticker>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MyTrade
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// Trade id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        /// <summary>
        /// Price
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        /// <summary>
        /// Amount of base asset
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        /// <summary>
        /// Amount of quote asset
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("commission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Commission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("commissionAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CommissionAsset { get; set; }

        /// <summary>
        /// Trade timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBuyer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBuyer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMaker")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMaker { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBestMatch")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBestMatch { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MyTrade FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MyTrade>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transaction
    {
        /// <summary>
        /// transaction id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Transaction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Transaction>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Trade
    {
        /// <summary>
        /// trade id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        /// <summary>
        /// price
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        /// <summary>
        /// amount of base asset
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        /// <summary>
        /// amount of quote asset
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteQty { get; set; }

        /// <summary>
        /// Trade executed timestamp, as same as `T` in the stream
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBuyerMaker")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBuyerMaker { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBestMatch")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBestMatch { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Trade FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Trade>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggTrade
    {
        /// <summary>
        /// Aggregate tradeId
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("a")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long A { get; set; }

        /// <summary>
        /// Price
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("p")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string P { get; set; }

        /// <summary>
        /// Quantity
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("q")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Q { get; set; }

        /// <summary>
        /// First tradeId
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("f")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long F { get; set; }

        /// <summary>
        /// Last tradeId
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("l")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long L { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("T")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool T { get; set; }

        /// <summary>
        /// Was the buyer the maker?
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("m")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool M { get; set; }


        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AggTrade FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AggTrade>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BnbBurnStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("spotBNBBurn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool SpotBNBBurn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestBNBBurn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool InterestBNBBurn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BnbBurnStatus FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BnbBurnStatus>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotSpot
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("snapshotVos")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SnapshotVos> SnapshotVos { get; set; } = new System.Collections.ObjectModel.Collection<SnapshotVos>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SnapshotSpot FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SnapshotSpot>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotMargin
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("snapshotVos")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SnapshotVos2> SnapshotVos { get; set; } = new System.Collections.ObjectModel.Collection<SnapshotVos2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SnapshotMargin FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SnapshotMargin>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotFutures
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("snapshotVos")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SnapshotVos3> SnapshotVos { get; set; } = new System.Collections.ObjectModel.Collection<SnapshotVos3>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SnapshotFutures FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SnapshotFutures>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountUSDTFuturesDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("futureAccountResp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public FutureAccountResp FutureAccountResp { get; set; } = new FutureAccountResp();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountUSDTFuturesDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountUSDTFuturesDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountCOINFuturesDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Assets2> Assets { get; set; } = new System.Collections.ObjectModel.Collection<Assets2>();

        [System.Text.Json.Serialization.JsonPropertyName("canDeposit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanDeposit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canTrade")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanTrade { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canWithdraw")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanWithdraw { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long FeeTier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountCOINFuturesDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountCOINFuturesDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountUSDTFuturesSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("futureAccountSummaryResp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public FutureAccountSummaryResp FutureAccountSummaryResp { get; set; } = new FutureAccountSummaryResp();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountUSDTFuturesSummary FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountUSDTFuturesSummary>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountCOINFuturesSummary
    {

        [System.Text.Json.Serialization.JsonPropertyName("deliveryAccountSummaryResp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public DeliveryAccountSummaryResp DeliveryAccountSummaryResp { get; set; } = new DeliveryAccountSummaryResp();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountCOINFuturesSummary FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountCOINFuturesSummary>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountUSDTFuturesPositionRisk
    {

        [System.Text.Json.Serialization.JsonPropertyName("futurePositionRiskVos")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FuturePositionRiskVos> FuturePositionRiskVos { get; set; } = new System.Collections.ObjectModel.Collection<FuturePositionRiskVos>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountUSDTFuturesPositionRisk FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountUSDTFuturesPositionRisk>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountCOINFuturesPositionRisk
    {

        [System.Text.Json.Serialization.JsonPropertyName("deliveryPositionRiskVos")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DeliveryPositionRiskVos> DeliveryPositionRiskVos { get; set; } = new System.Collections.ObjectModel.Collection<DeliveryPositionRiskVos>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountCOINFuturesPositionRisk FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountCOINFuturesPositionRisk>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavingsFlexiblePurchaseRecord : System.Collections.ObjectModel.Collection<Anonymous51>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SavingsFlexiblePurchaseRecord FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SavingsFlexiblePurchaseRecord>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavingsFixedActivityPurchaseRecord : System.Collections.ObjectModel.Collection<Anonymous52>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SavingsFixedActivityPurchaseRecord FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SavingsFixedActivityPurchaseRecord>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavingsFlexibleRedemptionRecord : System.Collections.ObjectModel.Collection<Anonymous53>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SavingsFlexibleRedemptionRecord FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SavingsFlexibleRedemptionRecord>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavingsFixedActivityRedemptionRecord : System.Collections.ObjectModel.Collection<Anonymous54>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SavingsFixedActivityRedemptionRecord FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SavingsFixedActivityRedemptionRecord>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BswapAddLiquidityPreviewCombination
    {

        [System.Text.Json.Serialization.JsonPropertyName("quoteAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BaseAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long QuoteAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long BaseAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("share")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Share { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BswapAddLiquidityPreviewCombination FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BswapAddLiquidityPreviewCombination>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BswapAddLiquidityPreviewSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("quoteAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long QuoteAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("share")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Share { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("slippage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Slippage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Fee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BswapAddLiquidityPreviewSingle FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BswapAddLiquidityPreviewSingle>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BswapRmvLiquidityPreviewCombination
    {

        [System.Text.Json.Serialization.JsonPropertyName("quoteAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BaseAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long QuoteAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long BaseAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Price { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BswapRmvLiquidityPreviewCombination FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BswapRmvLiquidityPreviewCombination>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BswapRmvLiquidityPreviewSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("quoteAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long QuoteAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("slippage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Slippage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Fee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BswapRmvLiquidityPreviewSingle FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BswapRmvLiquidityPreviewSingle>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Error code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        /// <summary>
        /// Error message
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Error FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Error>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Interval
    {

        [System.Runtime.Serialization.EnumMember(Value = @"1s")]
        _1s = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"1m")]
        _1m = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"3m")]
        _3m = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"5m")]
        _5m = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"15m")]
        _15m = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"30m")]
        _30m = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"1h")]
        _1h = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"2h")]
        _2h = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"4h")]
        _4h = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"6h")]
        _6h = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"8h")]
        _8h = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"12h")]
        _12h = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"1d")]
        _1d = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"3d")]
        _3d = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"1w")]
        _1w = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"1M")]
        _1M = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Interval2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"1s")]
        _1s = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"1m")]
        _1m = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"3m")]
        _3m = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"5m")]
        _5m = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"15m")]
        _15m = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"30m")]
        _30m = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"1h")]
        _1h = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"2h")]
        _2h = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"4h")]
        _4h = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"6h")]
        _6h = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"8h")]
        _8h = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"12h")]
        _12h = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"1d")]
        _1d = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"3d")]
        _3d = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"1w")]
        _1w = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"1M")]
        _1M = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Side
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SELL")]
        SELL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUY")]
        BUY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LIMIT")]
        LIMIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MARKET")]
        MARKET = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STOP_LOSS")]
        STOP_LOSS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STOP_LOSS_LIMIT")]
        STOP_LOSS_LIMIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TAKE_PROFIT")]
        TAKE_PROFIT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TAKE_PROFIT_LIMIT")]
        TAKE_PROFIT_LIMIT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMIT_MAKER")]
        LIMIT_MAKER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimeInForce
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GTC")]
        GTC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IOC")]
        IOC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FOK")]
        FOK = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NewOrderRespType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACK")]
        ACK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESULT")]
        RESULT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL")]
        FULL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StopLimitTimeInForce
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GTC")]
        GTC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FOK")]
        FOK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IOC")]
        IOC = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NewOrderRespType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACK")]
        ACK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESULT")]
        RESULT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL")]
        FULL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2
    {

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ROLL_IN")]
        ROLL_IN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLL_OUT")]
        ROLL_OUT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IsIsolated
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TRUE")]
        TRUE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FALSE")]
        FALSE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SideEffectType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NO_SIDE_EFFECT")]
        NO_SIDE_EFFECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN_BUY")]
        MARGIN_BUY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_REPAY")]
        AUTO_REPAY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransFrom
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPOT")]
        SPOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATED_MARGIN")]
        ISOLATED_MARGIN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransTo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPOT")]
        SPOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATED_MARGIN")]
        ISOLATED_MARGIN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransFrom2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPOT")]
        SPOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATED_MARGIN")]
        ISOLATED_MARGIN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransTo2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPOT")]
        SPOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATED_MARGIN")]
        ISOLATED_MARGIN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SpotBNBBurn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InterestBNBBurn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPOT")]
        SPOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN")]
        MARGIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTURES")]
        FUTURES = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        _0 = 0,

        _6 = 6,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status2
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN_C2C")]
        MAIN_C2C = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN_UMFUTURE")]
        MAIN_UMFUTURE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN_CMFUTURE")]
        MAIN_CMFUTURE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN_MARGIN")]
        MAIN_MARGIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN_MINING")]
        MAIN_MINING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"C2C_MAIN")]
        C2C_MAIN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"C2C_UMFUTURE")]
        C2C_UMFUTURE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"C2C_MINING")]
        C2C_MINING = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"C2C_MARGIN")]
        C2C_MARGIN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UMFUTURE_MAIN")]
        UMFUTURE_MAIN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"UMFUTURE_C2C")]
        UMFUTURE_C2C = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UMFUTURE_MARGIN")]
        UMFUTURE_MARGIN = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CMFUTURE_MAIN")]
        CMFUTURE_MAIN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CMFUTURE_MARGIN")]
        CMFUTURE_MARGIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN_MAIN")]
        MARGIN_MAIN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN_UMFUTURE")]
        MARGIN_UMFUTURE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN_CMFUTURE")]
        MARGIN_CMFUTURE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN_MINING")]
        MARGIN_MINING = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN_C2C")]
        MARGIN_C2C = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"MINING_MAIN")]
        MINING_MAIN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"MINING_UMFUTURE")]
        MINING_UMFUTURE = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MINING_C2C")]
        MINING_C2C = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MINING_MARGIN")]
        MINING_MARGIN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN_PAY")]
        MAIN_PAY = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PAY_MAIN")]
        PAY_MAIN = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATEDMARGIN_MARGIN")]
        ISOLATEDMARGIN_MARGIN = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN_ISOLATEDMARGIN")]
        MARGIN_ISOLATEDMARGIN = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATEDMARGIN_ISOLATEDMARGIN")]
        ISOLATEDMARGIN_ISOLATEDMARGIN = 27,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NeedBtcValuation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MAIN")]
        MAIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD")]
        CARD = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IsFreeze
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type6
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type7
    {

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type8
    {

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FromAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPOT")]
        SPOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USDT_FUTURE")]
        USDT_FUTURE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COIN_FUTURE")]
        COIN_FUTURE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN")]
        MARGIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATED_MARGIN")]
        ISOLATED_MARGIN = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ToAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPOT")]
        SPOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USDT_FUTURE")]
        USDT_FUTURE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COIN_FUTURE")]
        COIN_FUTURE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MARGIN")]
        MARGIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ISOLATED_MARGIN")]
        ISOLATED_MARGIN = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FuturesType
    {

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FuturesType2
    {

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FuturesType3
    {

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUBSCRIBABLE")]
        SUBSCRIBABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSUBSCRIBABLE")]
        UNSUBSCRIBABLE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Featured
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRUE")]
        TRUE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAST")]
        FAST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NORMAL")]
        NORMAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVITY")]
        ACTIVITY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMIZED_FIXED")]
        CUSTOMIZED_FIXED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUBSCRIBABLE")]
        SUBSCRIBABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNSUBSCRIBABLE")]
        UNSUBSCRIBABLE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"START_TIME")]
        START_TIME = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOT_SIZE")]
        LOT_SIZE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INTEREST_RATE")]
        INTEREST_RATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DURATION")]
        DURATION = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LendingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DAILY")]
        DAILY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVITY")]
        ACTIVITY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMIZED_FIXED")]
        CUSTOMIZED_FIXED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PositionSide
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BOTH")]
        BOTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LONG")]
        LONG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORT")]
        SHORT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Urgency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Side2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SELL")]
        SELL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUY")]
        BUY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Combination")]
        Combination = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMBINATION")]
        COMBINATION = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Operation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADD")]
        ADD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REMOVE")]
        REMOVE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status5
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMBINATION")]
        COMBINATION = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMBINATION")]
        COMBINATION = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TradeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUY")]
        BUY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SELL")]
        SELL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"borrowIn")]
        BorrowIn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"collateralSpent")]
        CollateralSpent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"repayAmount")]
        RepayAmount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"collateralReturn")]
        CollateralReturn = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"addCollateral")]
        AddCollateral = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"removeCollateral")]
        RemoveCollateral = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"collateralReturnAfterLiquidation")]
        CollateralReturnAfterLiquidation = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADDITIONAL")]
        ADDITIONAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REDUCED")]
        REDUCED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ValidTime
    {

        [System.Runtime.Serialization.EnumMember(Value = @"10s")]
        _10s = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"30s")]
        _30s = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"1m")]
        _1m = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"2m")]
        _2m = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [System.Text.Json.Serialization.JsonPropertyName("serverTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ServerTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {

        [System.Text.Json.Serialization.JsonPropertyName("timezone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timezone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serverTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ServerTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rateLimits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RateLimits> RateLimits { get; set; } = new System.Collections.ObjectModel.Collection<RateLimits>();

        [System.Text.Json.Serialization.JsonPropertyName("exchangeFilters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> ExchangeFilters { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        [System.Text.Json.Serialization.JsonPropertyName("symbols")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Symbols> Symbols { get; set; } = new System.Collections.ObjectModel.Collection<Symbols>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long LastUpdateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bids")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<string>> Bids { get; set; } = new System.Collections.ObjectModel.Collection<System.Collections.Generic.ICollection<string>>();

        [System.Text.Json.Serialization.JsonPropertyName("asks")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<string>> Asks { get; set; } = new System.Collections.ObjectModel.Collection<System.Collections.Generic.ICollection<string>>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {

        [System.Text.Json.Serialization.JsonPropertyName("mins")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Mins { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceChange")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PriceChange { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("priceChangePercent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PriceChangePercent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("weightedAvgPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightedAvgPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("openPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("highPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HighPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lowPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LowPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("volume")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Volume { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteVolume")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteVolume { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("openTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OpenTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("closeTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CloseTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long FirstId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long LastId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {

        [System.Text.Json.Serialization.JsonPropertyName("cancelResult")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CancelResult { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("newOrderResult")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewOrderResult { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cancelResponse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public CancelResponse CancelResponse { get; set; } = new CancelResponse();

        [System.Text.Json.Serialization.JsonPropertyName("newOrderResponse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public NewOrderResponse NewOrderResponse { get; set; } = new NewOrderResponse();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders3> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders3>();

        [System.Text.Json.Serialization.JsonPropertyName("orderReports")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderReports3> OrderReports { get; set; } = new System.Collections.ObjectModel.Collection<OrderReports3>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response8
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders4> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders4>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous2
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders5> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders5>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous3
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders6> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders6>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous4
    {

        [System.Text.Json.Serialization.JsonPropertyName("rateLimitType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RateLimitType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interval")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interval { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("intervalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int IntervalNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("limit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Limit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response9
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows2> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows2>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response10
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows3> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows3>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response11
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows4> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows4>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response12
    {

        [System.Text.Json.Serialization.JsonPropertyName("assetFullName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AssetFullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assetName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AssetName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBorrowable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBorrowable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMortgageable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMortgageable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userMinBorrow")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserMinBorrow { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userMinRepay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserMinRepay { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response13
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("base")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Base { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quote")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Quote { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarginTrade")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMarginTrade { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBuyAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBuyAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSellAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsSellAllowed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous5
    {

        [System.Text.Json.Serialization.JsonPropertyName("assetFullName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AssetFullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assetName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AssetName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBorrowable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBorrowable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMortgageable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMortgageable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userMinBorrow")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserMinBorrow { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userMinRepay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserMinRepay { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous6
    {

        [System.Text.Json.Serialization.JsonPropertyName("base")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Base { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBuyAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBuyAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarginTrade")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMarginTrade { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSellAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsSellAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quote")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Quote { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response14
    {

        [System.Text.Json.Serialization.JsonPropertyName("calcTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CalcTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response15
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows5> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows5>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response16
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows6> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows6>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response17
    {

        [System.Text.Json.Serialization.JsonPropertyName("borrowEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool BorrowEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginLevel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalLiabilityOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalLiabilityOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalNetAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalNetAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tradeEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool TradeEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool TransferEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userAssets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserAssets> UserAssets { get; set; } = new System.Collections.ObjectModel.Collection<UserAssets>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous7
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response18
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// will not return if no margin trade happens
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("marginBuyBorrowAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginBuyBorrowAmount { get; set; }

        /// <summary>
        /// will not return if no margin trade happens
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("marginBuyBorrowAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginBuyBorrowAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders7> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders7>();

        [System.Text.Json.Serialization.JsonPropertyName("orderReports")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderReports4> OrderReports { get; set; } = new System.Collections.ObjectModel.Collection<OrderReports4>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response19
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders8> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders8>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous8
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders9> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders9>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous9
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contingencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContingencyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listStatusType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListStatusType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listOrderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListOrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("listClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders10> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders10>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response20
    {
        /// <summary>
        /// account's currently max borrowable amount with sufficient system availability
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        /// <summary>
        /// max borrowable amount limited by the account level
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("borrowLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BorrowLimit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response21
    {
        /// <summary>
        /// Account's currently max borrowable amount with sufficient system availability
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        /// <summary>
        /// Max borrowable amount limited by the account level
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("borrowLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BorrowLimit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response22
    {
        /// <summary>
        /// Account's currently max borrowable amount with sufficient system availability
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("normalBar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string NormalBar { get; set; }

        /// <summary>
        /// Max borrowable amount limited by the account level
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("marginCallBar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string MarginCallBar { get; set; }

        /// <summary>
        /// Liquidation Margin Ratio
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("forceLiquidationBar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string ForceLiquidationBar { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response23
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response24
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response25
    {

        [System.Text.Json.Serialization.JsonPropertyName("enabledAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long EnabledAccount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MaxAccount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response26
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("base")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Base { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quote")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Quote { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarginTrade")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMarginTrade { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBuyAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBuyAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSellAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsSellAllowed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous10
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("base")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Base { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quote")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Quote { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarginTrade")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMarginTrade { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isBuyAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsBuyAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSellAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsSellAllowed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous11
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DailyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("vipLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int VipLevel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous12
    {

        [System.Text.Json.Serialization.JsonPropertyName("vipLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int VipLevel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferIn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool TransferIn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Borrowable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DailyInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yearlyInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string YearlyInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BorrowLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginablePairs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MarginablePairs { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous13
    {

        [System.Text.Json.Serialization.JsonPropertyName("vipLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int VipLevel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("leverage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Leverage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<Data> Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous14
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int Tier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("effectiveMultiple")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string EffectiveMultiple { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("initialRiskRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string InitialRiskRatio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("liquidationRiskRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string LiquidationRiskRatio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAssetMaxBorrowable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string BaseAssetMaxBorrowable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteAssetMaxBorrowable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string QuoteAssetMaxBorrowable { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous15
    {

        [System.Text.Json.Serialization.JsonPropertyName("rateLimitType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RateLimitType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interval")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interval { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("intervalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long IntervalNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("limit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Limit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response27
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userAssetDribblets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserAssetDribblets> UserAssetDribblets { get; set; } = new System.Collections.ObjectModel.Collection<UserAssetDribblets>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response28
    {
        /// <summary>
        /// 0: normal, 1：system maintenance
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        /// <summary>
        /// "normal", "system_maintenance"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous16
    {

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("depositAllEnable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool DepositAllEnable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("freeze")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Freeze { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ipoable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ipoable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ipoing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ipoing { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isLegalMoney")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsLegalMoney { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("networkList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NetworkList> NetworkList { get; set; } = new System.Collections.ObjectModel.Collection<NetworkList>();

        [System.Text.Json.Serialization.JsonPropertyName("storage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("trading")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Trading { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawAllEnable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool WithdrawAllEnable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Withdrawing { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response29
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous17
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("network")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("addressTag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressTag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("insertTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long InsertTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int TransferType { get; set; }

        /// <summary>
        /// confirm times for unlocking
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unlockConfirm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnlockConfirm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("confirmTimes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConfirmTimes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous18
    {

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("applyTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApplyTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// will not be returned if there's no withdrawOrderId for this withdraw.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WithdrawOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("network")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

        /// <summary>
        /// 1 for internal transfer, 0 for external transfer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transferType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int TransferType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransactionFee { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("confirmNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int ConfirmNo { get; set; }

        /// <summary>
        /// Reason for withdrawal failure
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("info")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Info { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response30
    {

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response31
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response32
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data2 Data { get; set; } = new Data2();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response33
    {
        /// <summary>
        /// Total counts of exchange
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userAssetDribblets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserAssetDribblets2> UserAssetDribblets { get; set; } = new System.Collections.ObjectModel.Collection<UserAssetDribblets2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response33>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response34
    {

        [System.Text.Json.Serialization.JsonPropertyName("details")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Details> Details { get; set; } = new System.Collections.ObjectModel.Collection<Details>();

        [System.Text.Json.Serialization.JsonPropertyName("totalTransferBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalTransferBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalTransferBNB")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalTransferBNB { get; set; }

        /// <summary>
        /// Commission fee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dribbletPercentage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DribbletPercentage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response35
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalServiceCharge")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalServiceCharge { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalTransfered")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalTransfered { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferResult")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransferResult> TransferResult { get; set; } = new System.Collections.ObjectModel.Collection<TransferResult>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response35 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response35>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response36
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows7> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows7>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response36 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response36>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response37
    {

        [System.Text.Json.Serialization.JsonPropertyName("CTR")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public CTR CTR { get; set; } = new CTR();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response37 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response37>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous19
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("makerCommission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MakerCommission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("takerCommission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TakerCommission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response38
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows8> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows8>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response38 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response38>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response39
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response39 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response39>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous20
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("freeze")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Freeze { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Withdrawing { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("btcValuation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BtcValuation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous21
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("freeze")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Freeze { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Withdrawing { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ipoable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ipoable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("btcValuation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BtcValuation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response40
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response40 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response40>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response41
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows9> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows9>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response41 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response41>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response42
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows10> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows10>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response42 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response42>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response43
    {

        [System.Text.Json.Serialization.JsonPropertyName("ipRestrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IpRestrict { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        /// <summary>
        /// This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enableWithdrawals")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool EnableWithdrawals { get; set; }

        /// <summary>
        /// This option authorizes this key to transfer funds between your master account and your sub account instantly
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enableInternalTransfer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool EnableInternalTransfer { get; set; }

        /// <summary>
        /// Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("permitsUniversalTransfer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool PermitsUniversalTransfer { get; set; }

        /// <summary>
        /// Authorizes this key to Vanilla options trading
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enableVanillaOptions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool EnableVanillaOptions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enableReading")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool EnableReading { get; set; }

        /// <summary>
        /// API Key created before your futures account opened does not support futures API service
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enableFutures")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool EnableFutures { get; set; }

        /// <summary>
        /// This option can be adjusted after the Cross Margin account transfer is completed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enableMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool EnableMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enableSpotAndMarginTrading")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool EnableSpotAndMarginTrading { get; set; }

        /// <summary>
        /// Expiration time for spot and margin trading permission
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tradingAuthorityExpirationTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TradingAuthorityExpirationTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response43 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response43>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response44
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response44 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response44>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response45
    {

        [System.Text.Json.Serialization.JsonPropertyName("subAccounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubAccounts> SubAccounts { get; set; } = new System.Collections.ObjectModel.Collection<SubAccounts>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response45 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response45>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous22
    {

        [System.Text.Json.Serialization.JsonPropertyName("from")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("to")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response46
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("futuresType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int FuturesType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transfers")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Transfers> Transfers { get; set; } = new System.Collections.ObjectModel.Collection<Transfers>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response46 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response46>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response47
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txnId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxnId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response47 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response47>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response48
    {

        [System.Text.Json.Serialization.JsonPropertyName("balances")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Balances2> Balances { get; set; } = new System.Collections.ObjectModel.Collection<Balances2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response48 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response48>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response49
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TotalCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("masterAccountTotalAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MasterAccountTotalAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("spotSubUserAssetBtcVoList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SpotSubUserAssetBtcVoList> SpotSubUserAssetBtcVoList { get; set; } = new System.Collections.ObjectModel.Collection<SpotSubUserAssetBtcVoList>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response49 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response49>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response50
    {

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response50 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response50>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous23
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("network")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("addressTag")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressTag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("insertTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long InsertTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int TransferType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("confirmTimes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConfirmTimes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous24
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSubUserEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsSubUserEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUserActive")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsUserActive { get; set; }

        /// <summary>
        /// sub account create time
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("insertTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long InsertTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarginEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMarginEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFutureEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsFutureEnabled { get; set; }

        /// <summary>
        /// user mobile number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mobile")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Mobile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response51
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarginEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMarginEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response51 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response51>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response52
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginLevel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalLiabilityOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalLiabilityOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalNetAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalNetAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginTradeCoeffVo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public MarginTradeCoeffVo MarginTradeCoeffVo { get; set; } = new MarginTradeCoeffVo();

        [System.Text.Json.Serialization.JsonPropertyName("marginUserAssetVoList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MarginUserAssetVoList> MarginUserAssetVoList { get; set; } = new System.Collections.ObjectModel.Collection<MarginUserAssetVoList>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response52 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response52>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response53
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalLiabilityOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalLiabilityOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalNetAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalNetAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subAccountList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubAccountList> SubAccountList { get; set; } = new System.Collections.ObjectModel.Collection<SubAccountList>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response53 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response53>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response54
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFuturesEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsFuturesEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response54 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response54>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response55
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Assets3> Assets { get; set; } = new System.Collections.ObjectModel.Collection<Assets3>();

        [System.Text.Json.Serialization.JsonPropertyName("canDeposit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanDeposit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canTrade")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanTrade { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canWithdraw")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanWithdraw { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long FeeTier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxWithdrawAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxWithdrawAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMaintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMarginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalOpenOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalOpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPositionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalPositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalUnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWalletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalWalletBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response55 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response55>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response56
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMaintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMarginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalOpenOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalOpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPositionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalPositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalUnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWalletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalWalletBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subAccountList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubAccountList2> SubAccountList { get; set; } = new System.Collections.ObjectModel.Collection<SubAccountList2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response56 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response56>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous25
    {

        [System.Text.Json.Serialization.JsonPropertyName("entryPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EntryPrice { get; set; }

        /// <summary>
        /// current initial leverage
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("leverage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Leverage { get; set; }

        /// <summary>
        /// notional value limit of current initial leverage
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxNotional")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxNotional { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("liquidationPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LiquidationPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("markPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarkPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnrealizedProfit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response57
    {

        [System.Text.Json.Serialization.JsonPropertyName("txnId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxnId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response57 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response57>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response58
    {

        [System.Text.Json.Serialization.JsonPropertyName("txnId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxnId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response58 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response58>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response59
    {

        [System.Text.Json.Serialization.JsonPropertyName("txnId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxnId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response59 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response59>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response60
    {

        [System.Text.Json.Serialization.JsonPropertyName("txnId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxnId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response60 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response60>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous26
    {

        [System.Text.Json.Serialization.JsonPropertyName("counterParty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CounterParty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        /// <summary>
        /// 1 for transfer in, 2 for transfer out
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAccountType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAccountType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAccountType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAccountType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous27
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAccountType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAccountType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAccountType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAccountType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTimeStamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTimeStamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientTranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientTranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response61
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientTranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientTranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response61 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response61>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response62
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enableBlvt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool EnableBlvt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response62 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response62>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response63
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response63 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response63>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous28
    {

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("availableBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AvailableBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("inOrder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("btcValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BtcValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response64
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response64 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response64>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response65
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("snapshotVos")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SnapshotVos4> SnapshotVos { get; set; } = new System.Collections.ObjectModel.Collection<SnapshotVos4>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response65 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response65>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response66
    {

        [System.Text.Json.Serialization.JsonPropertyName("ipRestrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IpRestrict { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ipList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<IpList> IpList { get; set; } = new System.Collections.ObjectModel.Collection<IpList>();

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response66 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response66>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response67
    {

        [System.Text.Json.Serialization.JsonPropertyName("ipRestrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IpRestrict { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ipList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IpList { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response67 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response67>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response68
    {

        [System.Text.Json.Serialization.JsonPropertyName("ip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response68 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response68>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response69
    {

        [System.Text.Json.Serialization.JsonPropertyName("ipRestrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IpRestrict { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ipList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IpList { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response69 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response69>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response70
    {

        [System.Text.Json.Serialization.JsonPropertyName("thirdPartyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ThirdPartyName { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response70 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response70>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response71
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ipList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IpList { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response71 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response71>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response72
    {

        [System.Text.Json.Serialization.JsonPropertyName("listenKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListenKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response72 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response72>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response73
    {

        [System.Text.Json.Serialization.JsonPropertyName("listenKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListenKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response73 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response73>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response74
    {

        [System.Text.Json.Serialization.JsonPropertyName("listenKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ListenKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response74 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response74>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response75
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data3> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data3>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response75 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response75>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response76
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data4> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data4>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response76 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response76>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous29
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("avgAnnualInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AvgAnnualInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canPurchase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanPurchase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canRedeem")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanRedeem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyInterestPerThousand")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DailyInterestPerThousand { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("featured")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Featured { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minPurchaseAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MinPurchaseAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchasedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PurchasedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("upLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UpLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("upLimitPerUser")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UpLimitPerUser { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response77
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("leftQuota")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LeftQuota { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response77 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response77>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response78
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PurchaseId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response78 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response78>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response79
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyQuota")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DailyQuota { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("leftQuota")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LeftQuota { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minRedemptionAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MinRedemptionAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response79 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response79>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous30
    {

        [System.Text.Json.Serialization.JsonPropertyName("annualInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AnnualInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("avgAnnualInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AvgAnnualInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canRedeem")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanRedeem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DailyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("freeAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FreeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("freezeAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FreezeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LockedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("redeemingAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RedeemingAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("todayPurchasedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TodayPurchasedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalInterest { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous31
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("displayPriority")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long DisplayPriority { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("duration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Duration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestPerLot")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestPerLot { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lotSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotSize { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lotsLowLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long LotsLowLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lotsPurchased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long LotsPurchased { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lotsUpLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long LotsUpLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxLotsPerUser")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MaxLotsPerUser { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("needKyc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool NeedKyc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withAreaLimitation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool WithAreaLimitation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response80
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PurchaseId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response80 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response80>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous32
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canTransfer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanTransfer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTimestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTimestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("duration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Duration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long EndTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lot")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Lot { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PositionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("principal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Principal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PurchaseTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("redeemDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset RedeemDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long StartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response81
    {

        [System.Text.Json.Serialization.JsonPropertyName("positionAmountVos")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PositionAmountVos> PositionAmountVos { get; set; } = new System.Collections.ObjectModel.Collection<PositionAmountVos>();

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountInBTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAmountInBTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAmountInUSDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAmountInUSDT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFixedAmountInBTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalFixedAmountInBTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFixedAmountInUSDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalFixedAmountInUSDT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlexibleInBTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalFlexibleInBTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFlexibleInUSDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalFlexibleInUSDT { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response81 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response81>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous33
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lendingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LendingType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous33>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response82
    {

        [System.Text.Json.Serialization.JsonPropertyName("dailyPurchaseId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long DailyPurchaseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response82 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response82>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous34
    {

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Detail Detail { get; set; } = new Detail();

        [System.Text.Json.Serialization.JsonPropertyName("quota")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Quota Quota { get; set; } = new Quota();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response83
    {

        [System.Text.Json.Serialization.JsonPropertyName("positionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response83 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response83>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response84
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response84 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response84>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous35
    {

        [System.Text.Json.Serialization.JsonPropertyName("positionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PurchaseTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("duration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Duration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accrualDays")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccrualDays { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rewardAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RewardAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("APY")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string APY { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rewardAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RewardAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("extraRewardAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExtraRewardAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("extraRewardAPY")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExtraRewardAPY { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("estExtraRewardAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EstExtraRewardAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nextInterestPay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NextInterestPay { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nextInterestPayDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NextInterestPayDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payInterestPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PayInterestPeriod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("redeemAmountEarly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RedeemAmountEarly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestEndDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestEndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deliverDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeliverDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("redeemPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RedeemPeriod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("redeemingAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RedeemingAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("partialAmtDeliverDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PartialAmtDeliverDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canRedeemEarly")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanRedeemEarly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("renewable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Renewable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous35 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous35>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous36
    {

        [System.Text.Json.Serialization.JsonPropertyName("positionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("project")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Project { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lockPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LockPeriod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deliverDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeliverDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous36 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous36>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response85
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response85 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response85>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous37
    {

        [System.Text.Json.Serialization.JsonPropertyName("leftPersonalQuota")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LeftPersonalQuota { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous37 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous37>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response86
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data5> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data5>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response86 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response86>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response87
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data6> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data6>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response87 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response87>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response88
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data7> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data7>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response88 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response88>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response89
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data8 Data { get; set; } = new Data8();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response89 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response89>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response90
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data9 Data { get; set; } = new Data9();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response90 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response90>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response91
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data10 Data { get; set; } = new Data10();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response91 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response91>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response92
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data11 Data { get; set; } = new Data11();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response92 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response92>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response93
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data12 Data { get; set; } = new Data12();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response93 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response93>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response94
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        /// <summary>
        /// Mining Account
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response94 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response94>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response95
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response95 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response95>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response96
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data13 Data { get; set; } = new Data13();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response96 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response96>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response97
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data14> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data14>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response97 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response97>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response98
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data15 Data { get; set; } = new Data15();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response98 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response98>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response99
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response99 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response99>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response100
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows11> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows11>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response100 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response100>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response101
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows12> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows12>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response101 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response101>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response102
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows13> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows13>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response102 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response102>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response103
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalCrossCollateral")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalCrossCollateral { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalBorrowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalBorrowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestFreeLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestFreeLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("crossCollaterals")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CrossCollaterals> CrossCollaterals { get; set; } = new System.Collections.ObjectModel.Collection<CrossCollaterals>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response103 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response103>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response104
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows14> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows14>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response104 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response104>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response105
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows15> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows15>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response105 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response105>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response106
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows16> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows16>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response106 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response106>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response107
    {

        [System.Text.Json.Serialization.JsonPropertyName("clientAlgoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientAlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response107 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response107>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response108
    {

        [System.Text.Json.Serialization.JsonPropertyName("clientAlgoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientAlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response108 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response108>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response109
    {

        [System.Text.Json.Serialization.JsonPropertyName("algoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long AlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("msg")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response109 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response109>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response110
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<Orders11> Orders { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response110 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response110>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response111
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Orders12> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Orders12>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response111 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response111>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response112
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subOrders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubOrders> SubOrders { get; set; } = new System.Collections.ObjectModel.Collection<SubOrders>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response112 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response112>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response113
    {

        [System.Text.Json.Serialization.JsonPropertyName("uniMMR")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UniMMR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountEquity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountEquity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountMaintMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountMaintMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response113 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response113>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous38
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralRate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous38 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous38>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response114
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response114 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response114>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response115
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response115 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response115>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous39
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokenName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("underlying")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Underlying { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenIssued")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenIssued { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("basket")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Basket { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currentBaskets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CurrentBaskets> CurrentBaskets { get; set; } = new System.Collections.ObjectModel.Collection<CurrentBaskets>();

        [System.Text.Json.Serialization.JsonPropertyName("nav")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nav { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("realLeverage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RealLeverage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fundingRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FundingRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyManagementFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DailyManagementFee { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseFeePct")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PurchaseFeePct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyPurchaseLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DailyPurchaseLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("redeemFeePct")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RedeemFeePct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyRedeemLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DailyRedeemLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous39 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous39>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response116
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Id { get; set; }

        /// <summary>
        /// S, P, and F for "success", "pending", and "failure"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenName { get; set; }

        /// <summary>
        /// subscribed token amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        /// <summary>
        /// subscription cost in usdt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cost")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Cost { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response116 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response116>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response117
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenName { get; set; }

        /// <summary>
        /// Subscription amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        /// <summary>
        /// NAV price of subscription
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nav")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nav { get; set; }

        /// <summary>
        /// Subscription fee in usdt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Fee { get; set; }

        /// <summary>
        /// Subscription cost in usdt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalCharge")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalCharge { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response117 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response117>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response118
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Id { get; set; }

        /// <summary>
        /// S, P, and F for "success", "pending", and "failure"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenName { get; set; }

        /// <summary>
        /// Redemption token amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("redeemAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RedeemAmount { get; set; }

        /// <summary>
        /// Redemption value in usdt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response118 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response118>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous40
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenName { get; set; }

        /// <summary>
        /// Redemption amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        /// <summary>
        /// NAV of redemption
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nav")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nav { get; set; }

        /// <summary>
        /// Reemption fee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Fee { get; set; }

        /// <summary>
        /// Net redemption value in usdt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netProceed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetProceed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous40 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous40>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous41
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokenName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenName { get; set; }

        /// <summary>
        /// USDT
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("userDailyTotalPurchaseLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserDailyTotalPurchaseLimit { get; set; }

        /// <summary>
        /// USDT
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("userDailyTotalRedeemLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserDailyTotalRedeemLimit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous41 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous41>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous42
    {

        [System.Text.Json.Serialization.JsonPropertyName("poolId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PoolId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("poolName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PoolName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Assets { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous42 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous42>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous43
    {

        [System.Text.Json.Serialization.JsonPropertyName("poolId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PoolId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("poolNmae")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PoolNmae { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("liquidity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Liquidity Liquidity { get; set; } = new Liquidity();

        [System.Text.Json.Serialization.JsonPropertyName("share")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Share Share { get; set; } = new Share();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous43 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous43>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response119
    {

        [System.Text.Json.Serialization.JsonPropertyName("operationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OperationId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response119 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response119>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response120
    {

        [System.Text.Json.Serialization.JsonPropertyName("operationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OperationId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response120 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response120>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous44
    {

        [System.Text.Json.Serialization.JsonPropertyName("operationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OperationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("poolId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PoolId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("poolName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PoolName { get; set; }

        /// <summary>
        /// "ADD" or "REMOVE"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Operation { get; set; }

        /// <summary>
        /// 0: pending, 1: success, 2: failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("shareAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShareAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous44 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous44>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response121
    {

        [System.Text.Json.Serialization.JsonPropertyName("quoteAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BaseAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double QuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double BaseQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("slippage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Slippage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Fee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response121 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response121>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response122
    {

        [System.Text.Json.Serialization.JsonPropertyName("swapId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long SwapId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response122 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response122>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous45
    {

        [System.Text.Json.Serialization.JsonPropertyName("swapId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long SwapId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("swapTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long SwapTime { get; set; }

        /// <summary>
        /// 0: pending, 1: success, 2: failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BaseAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double QuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double BaseQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Fee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous45 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous45>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous46
    {

        [System.Text.Json.Serialization.JsonPropertyName("poolId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PoolId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("poolNmae")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PoolNmae { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("liquidity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Liquidity2 Liquidity { get; set; } = new Liquidity2();

        [System.Text.Json.Serialization.JsonPropertyName("assetConfigure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public AssetConfigure AssetConfigure { get; set; } = new AssetConfigure();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous46 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous46>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response123
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalUnclaimedRewards")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public TotalUnclaimedRewards TotalUnclaimedRewards { get; set; } = new TotalUnclaimedRewards();

        [System.Text.Json.Serialization.JsonPropertyName("details")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Details2 Details { get; set; } = new Details2();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response123 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response123>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response124
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response124 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response124>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous47
    {

        [System.Text.Json.Serialization.JsonPropertyName("poolId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int PoolId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("poolName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PoolName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assetRewards")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AssetRewards { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ClaimTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("claimAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float ClaimAmount { get; set; }

        /// <summary>
        /// 0: pending, 1: success
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous47 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous47>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response125
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data16> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data16>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response125 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response125>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response126
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows17> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows17>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response126 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response126>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response127
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("remainingPrincipal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RemainingPrincipal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("remainingInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RemainingInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currentLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrentLTV { get; set; }

        /// <summary>
        /// Repaid, Repaying, Failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("repayStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response127 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response127>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response128
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows18> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows18>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response128 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response128>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response129
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows19> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows19>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response129 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response129>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous48
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous48 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous48>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response130
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hourlyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HourlyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response130 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response130>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response131
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows20> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows20>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response131 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response131>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response132
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows21> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows21>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response132 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response132>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response133
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows22> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows22>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response133 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response133>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response134
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("direction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Direction { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currentLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrentLTV { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response134 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response134>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response135
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows23> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows23>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response135 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response135>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response136
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows24> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows24>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response136 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response136>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response137
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows25> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows25>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response137 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response137>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response138
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayAmount { get; set; }

        /// <summary>
        /// rate of collateral coin/loan coin
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Rate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response138 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response138>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response139
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data17> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data17>();

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response139 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response139>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous49
    {

        [System.Text.Json.Serialization.JsonPropertyName("fromAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAssetMinAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAssetMinAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAssetMaxAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAssetMaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAssetMinAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAssetMinAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAssetMaxAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAssetMaxAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous49 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous49>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous50
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fraction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Fraction { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous50 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous50>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response140
    {

        [System.Text.Json.Serialization.JsonPropertyName("quoteId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ratio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ratio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("inverseRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InverseRatio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("validTimestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ValidTimestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response140 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response140>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response141
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response141 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response141>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response142
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ratio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ratio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("inverseRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InverseRatio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response142 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response142>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response143
    {

        [System.Text.Json.Serialization.JsonPropertyName("list")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<List> List { get; set; } = new System.Collections.ObjectModel.Collection<List>();

        [System.Text.Json.Serialization.JsonPropertyName("startTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long StartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long EndTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("limit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Limit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moreData")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool MoreData { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response143 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response143>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response144
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data18 Data { get; set; } = new Data18();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response144 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response144>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response145
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("list")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<List2> List { get; set; } = new System.Collections.ObjectModel.Collection<List2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response145 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response145>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response146
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("list")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<List3> List { get; set; } = new System.Collections.ObjectModel.Collection<List3>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response146 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response146>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response147
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("list")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<List4> List { get; set; } = new System.Collections.ObjectModel.Collection<List4>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response147 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response147>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response148
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("list")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<List5> List { get; set; } = new System.Collections.ObjectModel.Collection<List5>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response148 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response148>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response149
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data19 Data { get; set; } = new Data19();

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response149 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response149>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response150
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data20 Data { get; set; } = new Data20();

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response150 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response150>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response151
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data21 Data { get; set; } = new Data21();

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response151 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response151>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response152
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response152 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response152>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response153
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data22 Data { get; set; } = new Data22();

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response153 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response153>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response154
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data23 Data { get; set; } = new Data23();

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Success { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response154 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response154>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response155
    {

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rows26> Rows { get; set; } = new System.Collections.ObjectModel.Collection<Rows26>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response155 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response155>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balances
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balances FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balances>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderReports
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stopPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StopPrice { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrderReports FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrderReports>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders2
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderReports2
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stopPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StopPrice { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrderReports2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrderReports2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fills
    {

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("commission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Commission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("commissionAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CommissionAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fills FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fills>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fills2
    {

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("commission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Commission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("commissionAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CommissionAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fills2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fills2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transFrom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransFrom { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransTo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets
    {

        [System.Text.Json.Serialization.JsonPropertyName("baseAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public BaseAsset BaseAsset { get; set; } = new BaseAsset();

        [System.Text.Json.Serialization.JsonPropertyName("quoteAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public QuoteAsset QuoteAsset { get; set; } = new QuoteAsset();

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isolatedCreated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsolatedCreated { get; set; }

        /// <summary>
        /// true-enabled, false-disabled
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Enabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginLevel { get; set; }

        /// <summary>
        /// "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("marginLevelStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginLevelStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginRatio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("indexPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IndexPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("liquidatePrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LiquidatePrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("liquidateRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LiquidateRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tradeEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool TradeEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotVos
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data24 Data { get; set; } = new Data24();

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SnapshotVos FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SnapshotVos>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotVos2
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data25 Data { get; set; } = new Data25();

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SnapshotVos2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SnapshotVos2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotVos3
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data26 Data { get; set; } = new Data26();

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SnapshotVos3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SnapshotVos3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FutureAccountResp
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Assets4> Assets { get; set; } = new System.Collections.ObjectModel.Collection<Assets4>();

        [System.Text.Json.Serialization.JsonPropertyName("canDeposit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanDeposit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canTrade")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanTrade { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("canWithdraw")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool CanWithdraw { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeTier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long FeeTier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxWithdrawAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxWithdrawAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMaintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMarginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalOpenOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalOpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPositionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalPositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalUnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWalletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalWalletBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FutureAccountResp FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<FutureAccountResp>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets2
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("initialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxWithdrawAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxWithdrawAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("openOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("walletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WalletBalance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FutureAccountSummaryResp
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMaintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMarginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalOpenOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalOpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPositionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalPositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalUnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWalletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalWalletBalance { get; set; }

        /// <summary>
        /// The sum of BUSD and USDT
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subAccountList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubAccountList3> SubAccountList { get; set; } = new System.Collections.ObjectModel.Collection<SubAccountList3>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FutureAccountSummaryResp FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<FutureAccountSummaryResp>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryAccountSummaryResp
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalMarginBalanceOfBTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMarginBalanceOfBTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnrealizedProfitOfBTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalUnrealizedProfitOfBTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWalletBalanceOfBTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalWalletBalanceOfBTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subAccountList")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubAccountList4> SubAccountList { get; set; } = new System.Collections.ObjectModel.Collection<SubAccountList4>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DeliveryAccountSummaryResp FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DeliveryAccountSummaryResp>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FuturePositionRiskVos
    {

        [System.Text.Json.Serialization.JsonPropertyName("entryPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EntryPrice { get; set; }

        /// <summary>
        /// current initial leverage
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("leverage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Leverage { get; set; }

        /// <summary>
        /// notional value limit of current initial leverage
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxNotional")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxNotional { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("liquidationPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LiquidationPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("markPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarkPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnrealizedProfit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FuturePositionRiskVos FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<FuturePositionRiskVos>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryPositionRiskVos
    {

        [System.Text.Json.Serialization.JsonPropertyName("entryPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EntryPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("markPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarkPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("leverage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Leverage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Isolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isolatedWallet")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IsolatedWallet { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isolatedMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IsolatedMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAutoAddMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IsAutoAddMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionSide")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionSide { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnrealizedProfit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DeliveryPositionRiskVos FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DeliveryPositionRiskVos>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous51
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lendingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LendingType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PurchaseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous51 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous51>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous52
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lendingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LendingType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lot")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Lot { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PurchaseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous52 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous52>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous53
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("principal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Principal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous53 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous53>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous54
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("principal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Principal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long StartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous54 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous54>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateLimits
    {

        [System.Text.Json.Serialization.JsonPropertyName("rateLimitType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RateLimitType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interval")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interval { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("intervalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int IntervalNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("limit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Limit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RateLimits FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RateLimits>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Symbols
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BaseAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseAssetPrecision")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int BaseAssetPrecision { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteAssetPrecision")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int QuoteAssetPrecision { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseCommissionPrecision")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int BaseCommissionPrecision { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteCommissionPrecision")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int QuoteCommissionPrecision { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> OrderTypes { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("icebergAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IcebergAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ocoAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool OcoAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("quoteOrderQtyMarketAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool QuoteOrderQtyMarketAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allowTrailingStop")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool AllowTrailingStop { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSpotTradingAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsSpotTradingAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isMarginTradingAllowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsMarginTradingAllowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Filters> Filters { get; set; } = new System.Collections.ObjectModel.Collection<Filters>();

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Symbols FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Symbols>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origClientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CancelResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CancelResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fills")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Fills { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NewOrderResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NewOrderResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders3
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderReports3
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stopPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StopPrice { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrderReports3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrderReports3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders4
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders5
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders6
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows2
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows3
    {

        [System.Text.Json.Serialization.JsonPropertyName("isolatedSymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IsolatedSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TxId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("principal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Principal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows4
    {
        /// <summary>
        /// Isolated symbol, will not be returned for crossed margin
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isolatedSymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IsolatedSymbol { get; set; }

        /// <summary>
        /// Total amount repaid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        /// <summary>
        /// Interest repaid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        /// <summary>
        /// Principal repaid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("principal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Principal { get; set; }

        /// <summary>
        /// One of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TxId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows5
    {

        [System.Text.Json.Serialization.JsonPropertyName("isolatedSymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IsolatedSymbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestAccuredTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long InterestAccuredTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("principal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Principal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows6
    {

        [System.Text.Json.Serialization.JsonPropertyName("avgPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AvgPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isIsolated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsIsolated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updatedTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdatedTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAssets
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Borrowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("netAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserAssets FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserAssets>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders7
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderReports4
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cummulativeQuoteQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CummulativeQuoteQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stopPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StopPrice { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrderReports4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrderReports4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders8
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders9
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders10
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientOrderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientOrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dailyInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string DailyInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string BorrowLimit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAssetDribblets
    {

        [System.Text.Json.Serialization.JsonPropertyName("operateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OperateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalTransferedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalTransferedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalServiceChargeAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalServiceChargeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userAssetDribbletDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserAssetDribbletDetails> UserAssetDribbletDetails { get; set; } = new System.Collections.ObjectModel.Collection<UserAssetDribbletDetails>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserAssetDribblets FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserAssetDribblets>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkList
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressRegex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressRegex { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        /// <summary>
        /// shown only when "depositEnable" is false.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depositDesc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepositDesc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("depositEnable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool DepositEnable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsDefault { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memoRegex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemoRegex { get; set; }

        /// <summary>
        /// min number for balance confirmation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minConfirm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MinConfirm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("network")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resetAddressStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool ResetAddressStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("specialTips")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SpecialTips { get; set; }

        /// <summary>
        /// confirmation number for balance unlock.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unLockConfirm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UnLockConfirm { get; set; }

        /// <summary>
        /// shown only when "withdrawEnable" is false
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawDesc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WithdrawDesc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawEnable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool WithdrawEnable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WithdrawFee { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawIntegerMultiple")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WithdrawIntegerMultiple { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawMax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WithdrawMax { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawMin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WithdrawMin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sameAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool SameAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NetworkList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NetworkList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data2
    {
        /// <summary>
        /// API trading function is locked or not
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isLocked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsLocked { get; set; }

        /// <summary>
        /// If API trading function is locked, this is the planned recover time
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("plannedRecoverTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PlannedRecoverTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("triggerCondition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public TriggerCondition TriggerCondition { get; set; } = new TriggerCondition();

        /// <summary>
        /// The indicators updated every 30 seconds
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indicators")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Indicators Indicators { get; set; } = new Indicators();

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAssetDribblets2
    {

        [System.Text.Json.Serialization.JsonPropertyName("operateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OperateTime { get; set; }

        /// <summary>
        /// Total transfered BNB amount for this exchange.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalTransferedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalTransferedAmount { get; set; }

        /// <summary>
        /// Total service charge amount for this exchange.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalServiceChargeAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalServiceChargeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userAssetDribbletDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserAssetDribbletDetails2> UserAssetDribbletDetails { get; set; } = new System.Collections.ObjectModel.Collection<UserAssetDribbletDetails2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserAssetDribblets2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserAssetDribblets2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Details
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assetFullName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AssetFullName { get; set; }

        /// <summary>
        /// Convertible amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amountFree")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmountFree { get; set; }

        /// <summary>
        /// BTC amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("toBTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToBTC { get; set; }

        /// <summary>
        /// BNB amount（Not deducted commission fee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("toBNB")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToBNB { get; set; }

        /// <summary>
        /// BNB amount（Deducted commission fee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("toBNBOffExchange")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToBNBOffExchange { get; set; }

        /// <summary>
        /// Commission fee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exchange")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Exchange { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Details FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Details>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransferResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OperateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serviceChargeAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceChargeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransferedAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TransferResult FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<TransferResult>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows7
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("divTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long DivTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EnInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CTR
    {

        [System.Text.Json.Serialization.JsonPropertyName("minWithdrawAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MinWithdrawAmount { get; set; }

        /// <summary>
        /// deposit status (false if ALL of networks' are false)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depositStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool DepositStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("withdrawFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long WithdrawFee { get; set; }

        /// <summary>
        /// withdrawStatus status (false if ALL of networks' are false)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool WithdrawStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("depositTip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DepositTip { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CTR FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CTR>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows8
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows9
    {

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deductedAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeductedAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deductedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeductedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targetAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targetAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows10
    {

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccounts
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFreeze")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsFreeze { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isManagedSubAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsManagedSubAccount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isAssetManagementSubAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool IsAssetManagementSubAccount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccounts FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccounts>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transfers
    {

        [System.Text.Json.Serialization.JsonPropertyName("from")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("to")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("qty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Qty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Transfers FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Transfers>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balances2
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Locked { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balances2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balances2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpotSubUserAssetBtcVoList
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SpotSubUserAssetBtcVoList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SpotSubUserAssetBtcVoList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginTradeCoeffVo
    {
        /// <summary>
        /// Liquidation margin ratio
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("forceLiquidationBar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ForceLiquidationBar { get; set; }

        /// <summary>
        /// Margin call margin ratio
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("marginCallBar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginCallBar { get; set; }

        /// <summary>
        /// Initial margin ratio
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("normalBar")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NormalBar { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginTradeCoeffVo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginTradeCoeffVo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarginUserAssetVoList
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Borrowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("netAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MarginUserAssetVoList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MarginUserAssetVoList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountList
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalLiabilityOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalLiabilityOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalNetAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalNetAssetOfBtc { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets3
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("initialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxWithdrawAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxWithdrawAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("openOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("walletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WalletBalance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountList2
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMaintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMarginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalOpenOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalOpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPositionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalPositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalUnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWalletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalWalletBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountList2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountList2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SnapshotVos4
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Data27 Data { get; set; } = new Data27();

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SnapshotVos4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SnapshotVos4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpList
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IpList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IpList>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data3
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fiatCurrency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FiatCurrency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("indicatedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IndicatedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalFee { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("method")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method { get; set; }

        /// <summary>
        /// Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data4
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNo { get; set; }

        /// <summary>
        /// Fiat trade amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sourceAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceAmount { get; set; }

        /// <summary>
        /// Fiat token
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fiatCurrency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FiatCurrency { get; set; }

        /// <summary>
        /// Crypto trade amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("obtainAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ObtainAmount { get; set; }

        /// <summary>
        /// Crypto token
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cryptoCurrency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CryptoCurrency { get; set; }

        /// <summary>
        /// Trade fee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalFee { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        /// <summary>
        /// Processing, Completed, Failed, Refunded
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PositionAmountVos
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amountInBTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmountInBTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amountInUSDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AmountInUSDT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PositionAmountVos FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PositionAmountVos>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rewardAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RewardAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("duration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Duration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("renewable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Renewable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("apy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Apy { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Detail FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Detail>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Quota
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalPersonalQuota")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalPersonalQuota { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minimum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Minimum { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Quota FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Quota>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data5
    {

        [System.Text.Json.Serialization.JsonPropertyName("algoName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AlgoName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long AlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("poolIndex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PoolIndex { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data6
    {

        [System.Text.Json.Serialization.JsonPropertyName("coinName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CoinName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coinId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CoinId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("poolIndex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PoolIndex { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long AlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algoName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AlgoName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data7
    {
        /// <summary>
        /// Mining Account name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("workerName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkerName { get; set; }

        /// <summary>
        /// Type of hourly hashrate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hashrateDatas")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HashrateDatas> HashrateDatas { get; set; } = new System.Collections.ObjectModel.Collection<HashrateDatas>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data8
    {

        [System.Text.Json.Serialization.JsonPropertyName("workerDatas")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkerDatas> WorkerDatas { get; set; } = new System.Collections.ObjectModel.Collection<WorkerDatas>();

        [System.Text.Json.Serialization.JsonPropertyName("totalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TotalNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PageSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data9
    {

        [System.Text.Json.Serialization.JsonPropertyName("accountProfits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AccountProfits> AccountProfits { get; set; } = new System.Collections.ObjectModel.Collection<AccountProfits>();

        /// <summary>
        /// Total Rows
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TotalNum { get; set; }

        /// <summary>
        /// Rows per page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PageSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data10
    {

        [System.Text.Json.Serialization.JsonPropertyName("otherProfits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OtherProfits> OtherProfits { get; set; } = new System.Collections.ObjectModel.Collection<OtherProfits>();

        /// <summary>
        /// Total Rows
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TotalNum { get; set; }

        /// <summary>
        /// Rows per page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PageSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data11
    {

        [System.Text.Json.Serialization.JsonPropertyName("configDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ConfigDetails> ConfigDetails { get; set; } = new System.Collections.ObjectModel.Collection<ConfigDetails>();

        [System.Text.Json.Serialization.JsonPropertyName("totalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TotalNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PageSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data12
    {

        [System.Text.Json.Serialization.JsonPropertyName("profitTransferDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProfitTransferDetails> ProfitTransferDetails { get; set; } = new System.Collections.ObjectModel.Collection<ProfitTransferDetails>();

        [System.Text.Json.Serialization.JsonPropertyName("totalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TotalNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long PageSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data13
    {

        [System.Text.Json.Serialization.JsonPropertyName("fifteenMinHashRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FifteenMinHashRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dayHashRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DayHashRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("validNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ValidNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invalidNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long InvalidNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("profitToday")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public ProfitToday ProfitToday { get; set; } = new ProfitToday();

        [System.Text.Json.Serialization.JsonPropertyName("profitYesterday")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public ProfitYesterday ProfitYesterday { get; set; } = new ProfitYesterday();

        [System.Text.Json.Serialization.JsonPropertyName("userName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Algo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data14
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("list")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<List6> List { get; set; } = new System.Collections.ObjectModel.Collection<List6>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data15
    {

        [System.Text.Json.Serialization.JsonPropertyName("accountProfits")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AccountProfits2> AccountProfits { get; set; } = new System.Collections.ObjectModel.Collection<AccountProfits2>();

        [System.Text.Json.Serialization.JsonPropertyName("totalNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int TotalNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int PageSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows11
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tranId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TranId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        /// <summary>
        /// one of PENDING (pending to execution), CONFIRMED (successfully transfered), FAILED (execution failed, nothing happened to your account);
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows12
    {

        [System.Text.Json.Serialization.JsonPropertyName("confirmedTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ConfirmedTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("leftTotal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LeftTotal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("leftPrincipal")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LeftPrincipal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deadline")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Deadline { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BorrowId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows13
    {

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("releasedCollateral")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReleasedCollateral { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayCollateral")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayCollateral { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("confirmedTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ConfirmedTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CrossCollaterals
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currentCollateralRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrentCollateralRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestFreeLimitUsed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestFreeLimitUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("principalForInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PrincipalForInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CrossCollaterals FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CrossCollaterals>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows14
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("preCollateralRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string PreCollateralRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("afterCollateralRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string AfterCollateralRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("direction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Direction { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("adjustTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long AdjustTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows15
    {

        [System.Text.Json.Serialization.JsonPropertyName("collateralAmountForLiquidation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralAmountForLiquidation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("forceLiquidationStartTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ForceLiquidationStartTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("restCollateralAmountAfterLiquidation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RestCollateralAmountAfterLiquidation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("restLoanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RestLoanAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows16
    {

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestFreeLimitUsed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestFreeLimitUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("principalForInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PrincipalForInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders11
    {

        [System.Text.Json.Serialization.JsonPropertyName("algoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long AlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionSide")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionSide { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("avgPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AvgPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientAlgoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientAlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bookTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long BookTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long EndTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algoStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AlgoStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algoType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AlgoType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("urgency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Urgency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Orders12
    {

        [System.Text.Json.Serialization.JsonPropertyName("algoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long AlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionSide")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionSide { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("avgPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AvgPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientAlgoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientAlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bookTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long BookTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("endTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long EndTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algoStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AlgoStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("algoType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AlgoType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("urgency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Urgency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Orders12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Orders12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubOrders
    {

        [System.Text.Json.Serialization.JsonPropertyName("algoId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long AlgoId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string ExecutedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("executedAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutedAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FeeAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FeeAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bookTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long BookTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("avgPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AvgPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("side")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Side { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("subId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long SubId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeInForce")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TimeInForce { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("origQty")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrigQty { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubOrders FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubOrders>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentBaskets
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notionalValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NotionalValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CurrentBaskets FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CurrentBaskets>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Liquidity
    {

        [System.Text.Json.Serialization.JsonPropertyName("BUSD")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double BUSD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("USDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double USDT { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Liquidity FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Liquidity>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Share
    {

        [System.Text.Json.Serialization.JsonPropertyName("shareAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double ShareAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sharePercentage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double SharePercentage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public Asset Asset { get; set; } = new Asset();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Share FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Share>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Liquidity2
    {
        /// <summary>
        /// "NA" if pool is an innovation pool
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("constantA")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ConstantA { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minRedeemShare")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double MinRedeemShare { get; set; }

        /// <summary>
        /// The swap proceeds only when the slippage is within the set range
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slippageTolerance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double SlippageTolerance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Liquidity2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Liquidity2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssetConfigure
    {

        [System.Text.Json.Serialization.JsonPropertyName("BUSD")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public BUSD BUSD { get; set; } = new BUSD();

        [System.Text.Json.Serialization.JsonPropertyName("USDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public USDT USDT { get; set; } = new USDT();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AssetConfigure FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AssetConfigure>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalUnclaimedRewards
    {

        [System.Text.Json.Serialization.JsonPropertyName("BUSD")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float BUSD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BNB")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double BNB { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("USDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double USDT { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TotalUnclaimedRewards FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<TotalUnclaimedRewards>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Details2
    {

        [System.Text.Json.Serialization.JsonPropertyName("BNB/USDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public BNB_USDT BNB_USDT { get; set; } = new BNB_USDT();

        [System.Text.Json.Serialization.JsonPropertyName("BNB/BTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public BNB_BTC BNB_BTC { get; set; } = new BNB_BTC();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Details2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Details2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data16
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("advNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AdvNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tradeType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fiat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Fiat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fiatSymbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FiatSymbol { get; set; }

        /// <summary>
        /// Quantity (in Crypto)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalPrice { get; set; }

        /// <summary>
        /// Unit Price (in Fiat)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnitPrice { get; set; }

        /// <summary>
        /// PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        /// <summary>
        /// Transaction Fee (in Crypto)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("commission")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Commission { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("counterPartNickName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CounterPartNickName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("advertisementRole")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AdvertisementRole { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows17
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalDebt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalDebt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("residualInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResidualInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        /// <summary>
        /// locked collateral value shown in USD value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateralValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currentLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrentLTV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expirationTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ExpirationTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows18
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        /// <summary>
        /// Repaid, Repaying, Failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("repayStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows19
    {

        [System.Text.Json.Serialization.JsonPropertyName("collateralAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        /// <summary>
        /// locked collateral value shown in USD value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateralValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows20
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("initialLoanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitialLoanAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hourlyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HourlyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loanTerm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanTerm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("initialCollateralAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitialCollateralAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long BorrowTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows21
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalDebt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalDebt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("residualInterest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResidualInterest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currentLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrentLTV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expirationTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ExpirationTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows22
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralUsed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralUsed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralReturn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralReturn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayType { get; set; }

        /// <summary>
        /// 'repayType': '1' // 1 for 'repay with borrowed coin', 2 for 'repay with collateral' 'repayStatus': 'Repaid' // Repaid, Repaying, Failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("repayStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RepayStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long RepayTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows23
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("direction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Direction { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("preLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PreLTV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("afterLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AfterLTV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("adjustTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long AdjustTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows24
    {

        [System.Text.Json.Serialization.JsonPropertyName("loanCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoanCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_7dHourlyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _7dHourlyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_7dDailyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _7dDailyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_14dHourlyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _14dHourlyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_14dDailyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _14dDailyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_30dHourlyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _30dHourlyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_30dDailyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _30dDailyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_90dHourlyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _90dHourlyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_90dDailyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _90dDailyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_180dHourlyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _180dHourlyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_180dDailyInterestRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _180dDailyInterestRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MinLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("vipLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int VipLevel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows25
    {

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("initialLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitialLTV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginCallLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginCallLTV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("liquidationLTV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LiquidationLTV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxLimit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("vipLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int VipLevel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data17
    {
        /// <summary>
        /// Enum：PAY(C2B Merchant Acquiring Payment), PAY_REFUND(C2B Merchant Acquiring Payment,refund), C2C(C2C Transfer Payment),CRYPTO_BOX(Crypto box), CRYPTO_BOX_RF(Crypto Box, refund), C2C_HOLDING(Transfer to new Binance user), C2C_HOLDING_RF(Transfer to new Binance user,refund), PAYOUT(B2C Disbursement Payment)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransactionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransactionTime { get; set; }

        /// <summary>
        /// order amount(up to 8 decimal places), positive is income, negative is expenditure
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fundsDetail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FundsDetail> FundsDetail { get; set; } = new System.Collections.ObjectModel.Collection<FundsDetail>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class List
    {

        [System.Text.Json.Serialization.JsonPropertyName("quoteId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string QuoteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("toAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToAmount { get; set; }

        /// <summary>
        /// price ratio
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ratio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ratio { get; set; }

        /// <summary>
        /// inverse price
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inverseRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InverseRatio { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CreateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static List FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<List>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data18
    {

        [System.Text.Json.Serialization.JsonPropertyName("page")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Page { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int TotalRecords { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPageNum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int TotalPageNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Data28> Data { get; set; } = new System.Collections.ObjectModel.Collection<Data28>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class List2
    {
        /// <summary>
        /// 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Tokens> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<Tokens>();

        [System.Text.Json.Serialization.JsonPropertyName("tradeTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TradeTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tradeAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tradeCurrency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TradeCurrency { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static List2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<List2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class List3
    {

        [System.Text.Json.Serialization.JsonPropertyName("network")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int? TxID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractAdrress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractAdrress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static List3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<List3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class List4
    {

        [System.Text.Json.Serialization.JsonPropertyName("network")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("txID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TxID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractAdrress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractAdrress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Timestamp { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Fee { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("feeAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FeeAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static List4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<List4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class List5
    {

        [System.Text.Json.Serialization.JsonPropertyName("network")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static List5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<List5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data19
    {

        [System.Text.Json.Serialization.JsonPropertyName("referenceNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data20
    {

        [System.Text.Json.Serialization.JsonPropertyName("token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("referenceNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("identityNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdentityNo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data21
    {

        [System.Text.Json.Serialization.JsonPropertyName("valid")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Valid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data22
    {

        [System.Text.Json.Serialization.JsonPropertyName("referenceNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceNo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data23
    {

        [System.Text.Json.Serialization.JsonPropertyName("coin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string Coin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromMin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string FromMin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromMax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string FromMax { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rows26
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collateralCoin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollateralCoin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("preMarginCall")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PreMarginCall { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("afterMarginCall")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AfterMarginCall { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customizeTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long CustomizeTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Rows26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Rows26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseAsset
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool BorrowEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Borrowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("netAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("netAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool RepayEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BaseAsset FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BaseAsset>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuoteAsset
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool BorrowEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Borrowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("netAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetAsset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("netAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("repayEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool RepayEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static QuoteAsset FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<QuoteAsset>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data24
    {

        [System.Text.Json.Serialization.JsonPropertyName("balances")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Balances3> Balances { get; set; } = new System.Collections.ObjectModel.Collection<Balances3>();

        [System.Text.Json.Serialization.JsonPropertyName("totalAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAssetOfBtc { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data25
    {

        [System.Text.Json.Serialization.JsonPropertyName("marginLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginLevel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalLiabilityOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalLiabilityOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalNetAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalNetAssetOfBtc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("userAssets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserAssets2> UserAssets { get; set; } = new System.Collections.ObjectModel.Collection<UserAssets2>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data26
    {

        [System.Text.Json.Serialization.JsonPropertyName("assets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Assets5> Assets { get; set; } = new System.Collections.ObjectModel.Collection<Assets5>();

        [System.Text.Json.Serialization.JsonPropertyName("position")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Position> Position { get; set; } = new System.Collections.ObjectModel.Collection<Position>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets4
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("initialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxWithdrawAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxWithdrawAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("openOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("walletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WalletBalance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountList3
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMaintenanceMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMaintenanceMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMarginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalOpenOrderInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalOpenOrderInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPositionInitialMargin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalPositionInitialMargin { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalUnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWalletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalWalletBalance { get; set; }

        /// <summary>
        /// The sum of BUSD and USDT
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountList3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountList3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubAccountList4
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalMarginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalMarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnrealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalUnrealizedProfit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("totalWalletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalWalletBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SubAccountList4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SubAccountList4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Filters
    {

        [System.Text.Json.Serialization.JsonPropertyName("filterType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FilterType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MinPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MaxPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tickSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TickSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Filters FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Filters>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAssetDribbletDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("transId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serviceChargeAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceChargeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OperateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransferedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserAssetDribbletDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserAssetDribbletDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TriggerCondition
    {
        /// <summary>
        /// Number of GTC orders
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("GCR")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long GCR { get; set; }

        /// <summary>
        /// Number of FOK/IOC orders
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("IFER")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long IFER { get; set; }

        /// <summary>
        /// Number of orders
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("UFR")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UFR { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TriggerCondition FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<TriggerCondition>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Indicators
    {

        [System.Text.Json.Serialization.JsonPropertyName("BTCUSDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BTCUSDT> BTCUSDT { get; set; } = new System.Collections.ObjectModel.Collection<BTCUSDT>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Indicators FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Indicators>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAssetDribbletDetails2
    {

        [System.Text.Json.Serialization.JsonPropertyName("transId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long TransId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("serviceChargeAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceChargeAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long OperateTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transferedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransferedAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserAssetDribbletDetails2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserAssetDribbletDetails2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data27
    {

        [System.Text.Json.Serialization.JsonPropertyName("balances")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Balances4> Balances { get; set; } = new System.Collections.ObjectModel.Collection<Balances4>();

        [System.Text.Json.Serialization.JsonPropertyName("totalAssetOfBtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TotalAssetOfBtc { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HashrateDatas
    {

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hashrate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hashrate { get; set; }

        /// <summary>
        /// Rejection Rate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Reject { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static HashrateDatas FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<HashrateDatas>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerDatas
    {

        [System.Text.Json.Serialization.JsonPropertyName("workerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("workerName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkerName { get; set; }

        /// <summary>
        /// Status：1 valid, 2 invalid, 3 no longer valid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Status { get; set; }

        /// <summary>
        /// Real-time rate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hashRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long HashRate { get; set; }

        /// <summary>
        /// 24H Hashrate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dayHashRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long DayHashRate { get; set; }

        /// <summary>
        /// Real-time Rejection Rate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rejectRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long RejectRate { get; set; }

        /// <summary>
        /// Last submission time
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastShareTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long LastShareTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static WorkerDatas FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<WorkerDatas>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountProfits
    {
        /// <summary>
        /// Mining date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        /// <summary>
        /// 0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Type { get; set; }

        /// <summary>
        /// Transferred Hashrate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hashTransfer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int HashTransfer { get; set; }

        /// <summary>
        /// Transferred Income
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transferAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double TransferAmount { get; set; }

        /// <summary>
        /// Daily Hashrate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dayHashRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long DayHashRate { get; set; }

        /// <summary>
        /// Earnings Amount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("profitAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double ProfitAmount { get; set; }

        /// <summary>
        /// Coin Type
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("coinName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CoinName { get; set; }

        /// <summary>
        /// Status：0:Unpaid, 1:Paying  2：Paid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AccountProfits FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AccountProfits>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherProfits
    {
        /// <summary>
        /// Mining date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        /// <summary>
        /// Coin Name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("coinName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CoinName { get; set; }

        /// <summary>
        /// 1: Merged Mining, 2: Activity Bonus, 3:Rebate 4:Smart Pool 6:Income Transfer 7:Pool Savings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("profitAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double ProfitAmount { get; set; }

        /// <summary>
        /// 0:Unpaid, 1:Paying  2：Paid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OtherProfits FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OtherProfits>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigDetails
    {
        /// <summary>
        /// Mining ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("configId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long ConfigId { get; set; }

        /// <summary>
        /// Transfer out of subaccount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("poolUsername")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PoolUsername { get; set; }

        /// <summary>
        /// Transfer into subaccount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("toPoolUsername")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToPoolUsername { get; set; }

        /// <summary>
        /// Transfer algorithm
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("algoName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AlgoName { get; set; }

        /// <summary>
        /// Transferred Hashrate quantity
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hashRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long HashRate { get; set; }

        /// <summary>
        /// Start date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startDay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long StartDay { get; set; }

        /// <summary>
        /// End date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endDay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long EndDay { get; set; }

        /// <summary>
        /// 0 Processing, 1：Cancelled, 2：Terminated 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ConfigDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ConfigDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfitTransferDetails
    {
        /// <summary>
        /// Transfer out of sub-account
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("poolUsername")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PoolUsername { get; set; }

        /// <summary>
        /// Transfer into subaccount
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("toPoolUsername")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToPoolUsername { get; set; }

        /// <summary>
        /// Transfer algorithm
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("algoName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AlgoName { get; set; }

        /// <summary>
        /// Transferred Hashrate quantity
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hashRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long HashRate { get; set; }

        /// <summary>
        /// Transfer date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("day")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Day { get; set; }

        /// <summary>
        /// Transfer income
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coinName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CoinName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ProfitTransferDetails FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ProfitTransferDetails>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfitToday
    {

        [System.Text.Json.Serialization.JsonPropertyName("BTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BSV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BSV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BCH")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BCH { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ProfitToday FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ProfitToday>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfitYesterday
    {

        [System.Text.Json.Serialization.JsonPropertyName("BTC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BTC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BSV")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BSV { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BCH")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BCH { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ProfitYesterday FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ProfitYesterday>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class List6
    {

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hashrate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hashrate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reject { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static List6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<List6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountProfits2
    {

        [System.Text.Json.Serialization.JsonPropertyName("time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Time { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("coinName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CoinName { get; set; }

        /// <summary>
        /// 0:Referral 1:Refund 2:Rebate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Type { get; set; }

        /// <summary>
        /// puid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("puid")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Puid { get; set; }

        /// <summary>
        /// Mining account
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AccountProfits2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AccountProfits2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Asset
    {

        [System.Text.Json.Serialization.JsonPropertyName("BUSD")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double BUSD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("USDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double USDT { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Asset FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Asset>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BUSD
    {

        [System.Text.Json.Serialization.JsonPropertyName("minAdd")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MinAdd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxAdd")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MaxAdd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minSwap")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MinSwap { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxSwap")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MaxSwap { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BUSD FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BUSD>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class USDT
    {

        [System.Text.Json.Serialization.JsonPropertyName("minAdd")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MinAdd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxAdd")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MaxAdd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minSwap")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MinSwap { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxSwap")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long MaxSwap { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static USDT FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<USDT>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BNB_USDT
    {

        [System.Text.Json.Serialization.JsonPropertyName("BUSD")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float BUSD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("USDT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double USDT { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BNB_USDT FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BNB_USDT>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BNB_BTC
    {

        [System.Text.Json.Serialization.JsonPropertyName("BNB")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double BNB { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BNB_BTC FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BNB_BTC>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FundsDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FundsDetail FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<FundsDetail>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data28
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        /// <summary>
        /// rebate type：1 is commission rebate，2 is referral kickback
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long UpdateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tokens
    {

        [System.Text.Json.Serialization.JsonPropertyName("network")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tokens FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tokens>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balances3
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balances3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balances3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAssets2
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borrowed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Borrowed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Interest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("netAsset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetAsset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserAssets2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserAssets2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets5
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("marginBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarginBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("walletBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WalletBalance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Position
    {

        [System.Text.Json.Serialization.JsonPropertyName("entryPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EntryPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("markPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarkPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("positionAmt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PositionAmt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unRealizedProfit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnRealizedProfit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Position FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Position>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BTCUSDT
    {
        /// <summary>
        /// Unfilled Ratio (UFR)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("i")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string I { get; set; }

        /// <summary>
        /// Count of all orders
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("c")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long C { get; set; }

        /// <summary>
        /// Current UFR value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("v")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float V { get; set; }

        /// <summary>
        /// Trigger UFR value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("t")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public float T { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BTCUSDT FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BTCUSDT>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balances4
    {

        [System.Text.Json.Serialization.JsonPropertyName("asset")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Asset { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("free")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Free { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locked { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balances4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balances4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTime>
    {
        public override System.DateTime Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTime.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTime value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BinanceSpotApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public BinanceSpotApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BinanceSpotApiException<TResult> : BinanceSpotApiException
    {
        public TResult Result { get; private set; }

        public BinanceSpotApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603